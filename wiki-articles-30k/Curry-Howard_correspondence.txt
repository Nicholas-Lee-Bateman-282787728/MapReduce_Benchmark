 In programming language theory and proof theory, the Curry–Howard correspondence (also known as the Curry–Howard isomorphism or equivalence, or the proofs-as-programs and propositions- or formulae-as-types interpretation) is the direct relationship between computer programs and mathematical proofs. It is a generalization of a syntactic analogy between systems of formal logic and computational calculi that was first discovered by the American mathematician Haskell Curry and logician William Alvin Howard.The correspondence was first made explicit in . See, for example section 4.6, p.53 Gert Smolka and Jan Schwinghammer (2007-8), Lecture Notes in Semantics It is the link between logic and computation that is usually attributed to Curry and Howard, although the idea is related to the operational interpretation of intuitionistic logic given in various formulations by  L. E. J. Brouwer, Arend Heyting and Andrey Kolmogorov (see Brouwer–Heyting–Kolmogorov interpretation)The Brouwer–Heyting–Kolmogorov interpretation  is also called the 'proof interpretation': p. 161 of Juliette Kennedy, Roman Kossak, eds. 2011. Set Theory, Arithmetic, and Foundations of Mathematics: Theorems, Philosophies ISBN 978-1-107-00804-5 and Stephen Kleene (see Realizability). The relationship has been extended to include category theory as the three-way Curry–Howard–Lambek correspondence. At the very beginning, the Curry–Howard correspondence is In other words, the Curry–Howard correspondence is the observation that two families of formalisms that had seemed unrelated—namely, the proof systems on one hand, and the models of computation on the other—were, in the two examples considered by Curry and Howard, in fact structurally the same kind of objects. If one now abstracts on the peculiarities of this or that formalism, the immediate generalization is the following claim: a proof is a program, the formula it proves is a type for the program.  More informally, this can be seen as an analogy that states that the return type of a function (i.e., the type of values returned by a function) is analogous to a logical theorem, subject to hypotheses corresponding to the types of the argument values passed to the function; and that the program to compute that function is analogous to a proof of that theorem.  This sets a form of logic programming on a rigorous foundation: proofs can be represented as programs, and especially as lambda terms, or proofs can be run. The correspondence has been the starting point of a large spectrum of new research after its discovery, leading in particular to a new class of formal systems designed to act both as a proof system and as a typed functional programming language. This includes Martin-Löf's intuitionistic type theory and Coquand's Calculus of Constructions, two calculi in which proofs are regular objects of the discourse and in which one can state properties of proofs the same way as of any program. This field of research is usually referred to as modern type theory. Such typed lambda calculi derived from the Curry–Howard paradigm led to software like Coq in which proofs seen as programs can be formalized, checked, and run. A converse direction is to use a program to extract a proof, given its correctness— an area of research closely related to proof-carrying code.  This is only feasible if the programming language the program is written for is very richly typed:  the development of such type systems has been partly motivated by the wish to make the Curry–Howard correspondence practically relevant. The Curry–Howard correspondence also raised new questions regarding the computational content of proof concepts that were not covered by the original works of Curry and Howard. In particular, classical logic has been shown to correspond to the ability to manipulate the continuation of programs and the symmetry of sequent calculus to express the duality between the two evaluation strategies known as call-by-name and call-by-value. Speculatively, the Curry–Howard correspondence might be expected to lead to a substantial unification between mathematical logic and foundational computer science: Hilbert-style logic and natural deduction are but two kinds of proof systems among a large family of formalisms. Alternative syntaxes include sequent calculus, proof nets, calculus of structures, etc. If one admits the Curry–Howard correspondence as the general principle that any proof system hides a model of computation, a theory of the underlying untyped computational structure of these kinds of proof system should be possible. Then, a natural question is whether something mathematically interesting can be said about these underlying computational calculi. Conversely, combinatory logic and simply typed lambda calculus are not the only models of computation, either.  Girard's linear logic was developed from the fine analysis of the use of resources in some models of lambda calculus; can we imagine a typed version of Turing's machine that would behave as a proof system? Typed assembly languages are such an instance of "low-level" models of computation that carry types. Because of the possibility of writing non-terminating programs, Turing-complete models of computation (such as languages with arbitrary recursive functions) must be interpreted with care, as naive application of the correspondence leads to an inconsistent logic.  The best way of dealing with arbitrary computation from a logical point of view is still an actively debated research question, but one popular approach is based on using monads to segregate provably terminating from potentially non-terminating code (an approach that also generalizes to much richer models of computation, and is itself related to modal logic by a natural extension of the Curry–Howard isomorphism).  A more radical approach, advocated by total functional programming, is to eliminate unrestricted recursion (and forgo Turing completeness, although still retaining high computational complexity), using more controlled corecursion wherever non-terminating behavior is actually desired. In its more general formulation, the Curry–Howard correspondence is a correspondence between formal proof calculi and type systems for models of computation. In particular, it splits into two correspondences. One at the level of formulas and types that is independent of which particular proof system or model of computation is considered, and one at the level of proofs and programs which, this time, is specific to the particular choice of proof system and model of computation considered. At the level of formulas and types, the correspondence says that implication behaves the same as a function type, conjunction as a "product" type (this may be called a tuple, a struct, a list, or some other term depending on the language), disjunction as a sum type (this type may be called a union), the false formula as the empty type and the true formula as the singleton type (whose sole member is the null object). Quantifiers correspond to dependent function space or products (as appropriate). This is summarized in the following table: At the level of proof systems and models of computations, the correspondence mainly shows the identity of structure, first, between some particular formulations of systems known as Hilbert-style deduction system and combinatory logic, and, secondly, between some particular formulations of systems known as natural deduction and lambda calculus. Between the natural deduction system and the lambda calculus there are the following correspondences: It was at the beginning a simple remark in Curry and Feys's 1958 book on combinatory logic: the simplest types for the basic combinators K and S of combinatory logic surprisingly corresponded to the respective axiom schemes α → (β → α) and (α → (β → γ)) → ((α → β) → (α → γ)) used in Hilbert-style deduction systems. For this reason, these schemes are now often called axioms K and S. Examples of programs seen as proofs in a Hilbert-style logic are given below. If one restricts to the implicational intuitionistic fragment, a simple way to formalize logic in Hilbert's style is as follows. Let Γ be a finite collection of formulas, considered as hypotheses. We say that δ is derivable from Γ, and we write Γ  δ, in the following cases: This can be formalized using inference rules, what we do in the left column of the following table. We can formulate typed combinatory logic using a similar syntax: let Γ be a finite collection of variables, annotated with their types. A term T (also annotated with its type) will depend on these variables [Γ  T:δ] when: The generation rules defined here are given in the right-column below. Curry's remark simply states that both columns are in one-to-one correspondence. The restriction of the correspondence to intuitionistic logic means that some classical tautologies, such as Peirce's law ((α → β) → α) → α, are excluded from the correspondence. Seen at a more abstract level, the correspondence can be restated as shown in the following table. Especially, the deduction theorem specific to Hilbert-style logic matches the process of abstraction elimination of combinatory logic. Thanks to the correspondence, results from combinatory logic can be transferred to Hilbert-style logic and vice versa. For instance, the notion of reduction of terms in combinatory logic can be transferred to Hilbert-style logic and it provides a way to canonically transform proofs into other proofs of the same statement. One can also transfer the notion of normal terms to a notion of normal proofs, expressing that the hypotheses of the axioms never need to be all detached (since otherwise a simplification can happen). Conversely, the non provability in intuitionistic logic of Peirce's law can be transferred back to combinatory logic: there is no typed term of combinatory logic that is typable with type ((α → β) → α) → α. Results on the completeness of some sets of combinators or axioms can also be transferred. For instance, the fact that the combinator X constitutes a one-point basis of (extensional) combinatory logic implies that the single axiom scheme (((α → (β → γ)) → ((α → β) → (α → γ))) → ((δ → (ε → δ)) → ζ)) → ζ, which is the principal type of X, is an adequate replacement to the combination of the axiom schemes α → (β → α) and (α → (β → γ)) → ((α → β) → (α → γ)). After Curry emphasized the syntactic correspondence between Hilbert-style deduction and combinatory logic, Howard made explicit in 1969 a syntactic analogy between the programs of simply typed lambda calculus and the proofs of natural deduction. Below, the left-hand side formalizes intuitionistic implicational natural deduction as a calculus of sequents (the use of sequents is standard in discussions of the Curry–Howard isomorphism as it allows the deduction rules to be stated more cleanly) with implicit weakening and the right-hand side shows the typing rules of lambda calculus. In the left-hand side, Γ, Γ1 and Γ2 denote ordered sequences of formulas while in the right-hand side, they denote sequences of named (i.e., typed) formulas with all names different. To paraphrase the correspondence, proving Γ  α means having a program that, given values with the types listed in Γ, manufactures an object of type α. An axiom corresponds to the introduction of a new variable with a new, unconstrained type, the →&nbsp;I rule corresponds to function abstraction and the →&nbsp;E rule corresponds to function application. Observe that the correspondence is not exact if the context Γ is taken to be a set of formulas as, e.g., the λ-terms λx.λy.x and λx.λy.y of type α → α → α would not be distinguished in the correspondence. Examples are given below. Howard showed that the correspondence extends to other connectives of the logic and other constructions of simply typed lambda calculus. Seen at an abstract level, the correspondence can then be summarized as shown in the following table. Especially, it also shows that the notion of normal forms in lambda calculus matches Prawitz's notion of normal deduction in natural deduction, from what we deduce, among others, that the algorithms for the type inhabitation problem can be turned into algorithms for deciding intuitionistic provability. Howard's correspondence naturally extends to other extensions of natural deduction and simply typed lambda calculus. Here is a non exhaustive list: At the time of Curry, and also at the time of Howard, the proofs-as-programs correspondence concerned only intuitionistic logic, i.e. a logic in which, in particular, Peirce's law was not deducible. The extension of the correspondence to Peirce's law and hence to classical logic became clear from the work of Griffin on typing operators that capture the evaluation context of a given program execution so that this evaluation context can be later on reinstalled. The basic Curry–Howard-style correspondence for classical logic is given below. Note the correspondence between the double-negation translation used to map classical proofs to intuitionistic logic and the continuation-passing-style translation used to map lambda terms involving control to pure lambda terms. More particularly, call-by-name continuation-passing-style translations relates to Kolmogorov's double negation translation and call-by-value continuation-passing-style translations relates to a kind of double-negation translation due to Kuroda. A finer Curry–Howard correspondence exists for classical logic if one defines classical logic not by adding an axiom such as Peirce's law, but by allowing several conclusions in sequents. In the case of classical natural deduction, there exists a proofs-as-programs correspondence with the typed programs of Parigot's λμ-calculus. A proofs-as-programs correspondence can be settled for the formalism known as Gentzen's sequent calculus but it is not a correspondence with a well-defined pre-existing model of computation as it was for Hilbert-style and natural deductions. Sequent calculus is characterized by the presence of left introduction rules, right introduction rule and a cut rule that can be eliminated. The structure of sequent calculus relates to a calculus whose structure is close to the one of some abstract machines. The informal correspondence is as follows: N. G. de Bruijn used the lambda notation for representing proofs of the theorem checker Automath, and represented propositions as "categories" of their proofs.  It was in the late 1960s at the same period of time Howard wrote his manuscript; de Bruijn was likely unaware of Howard's work, and stated the correspondence independently (Sørensen & Urzyczyn [1998] 2006, pp 98–99).  Some researchers tend to use the term Curry–Howard–de Bruijn correspondence in place of Curry–Howard correspondence. The BHK interpretation interprets intuitionistic proofs as functions but it does not specify the class of functions relevant for the interpretation. If one takes lambda calculus for this class of function, then the BHK interpretation tells the same as Howard's correspondence between natural deduction and lambda calculus. Kleene's recursive realizability splits proofs of intuitionistic arithmetic into the pair of a recursive function and of a proof of a formula expressing that the recursive function "realizes", i.e. correctly instantiates the disjunctions and existential quantifiers of the initial formula so that the formula gets true. Kreisel's modified realizability applies to intuitionistic higher-order predicate logic and shows that the simply typed lambda term inductively extracted from the proof realizes the initial formula. In the case of propositional logic, it coincides with Howard's statement: the extracted lambda term is the proof itself (seen as an untyped lambda term) and the realizability statement is a paraphrase of the fact that the extracted lambda term has the type that the formula means (seen as a type). Gödel's dialectica interpretation realizes (an extension of) intuitionistic arithmetic with computable functions. The connection with lambda calculus is unclear, even in the case of natural deduction. Joachim Lambek showed in the early 1970s that the proofs of intuitionistic propositional logic and the combinators of typed combinatory logic share a common equational theory which is the one of cartesian closed categories. The expression Curry–Howard–Lambek correspondence is now used by some people to refer to the three way isomorphism between intuitionistic logic, typed lambda calculus and cartesian closed categories, with objects being interpreted as types or propositions and morphisms as terms or proofs. The correspondence works at the equational level and is not the expression of a syntactic identity of structures as it is the case for each of Curry's and Howard's correspondences: i.e. the structure of a well-defined morphism in a cartesian-closed category is not comparable to the structure of a proof of the corresponding judgment in either Hilbert-style logic or natural deduction.  To clarify this distinction, the underlying syntactic structure of cartesian closed categories is rephrased below. Objects (types) are defined by Morphisms (terms) are defined by Well-defined morphisms (typed terms) are defined by the following typing rules (in which the usual categorical morphism notation f : \alpha \to \beta is replaced with sequent calculus notation f :\!\!-~~ \alpha ~\vdash~ \beta). Identity: \frac{}{id:\!\!-~~ \alpha ~\vdash~ \alpha} Composition: \frac{t:\!\!-~~ \alpha ~\vdash~ \beta\qquad u:\!\!-~~ \beta ~\vdash~ \gamma}{u \circ t:\!\!- ~\alpha ~\vdash~ \gamma} Unit type (terminal object): \frac{}{\star:\!\!-~~\alpha ~\vdash~ \top} Cartesian product: \frac{t:\!\!-~~\alpha ~\vdash~ \beta\qquad u:\!\!-~~\alpha ~\vdash~ \gamma}{(t,u):\!\!-~~ \alpha ~\vdash~ \beta \times \gamma} Left and right projection: \frac{}{\pi_1:\!\!-~~ \alpha \times \beta ~\vdash~ \alpha}\qquad\frac{}{\pi_2:\!\!-~~ \alpha \times \beta ~\vdash~ \beta} Currying: \frac{t:\!\!-~~ \alpha \times \beta ~\vdash~ \gamma}{\lambda t:\!\!-~~ \alpha ~\vdash~ \beta \rightarrow \gamma} Application: \frac{}{eval:\!\!-~~ (\alpha \rightarrow \beta) \times \alpha ~\vdash~ \beta} Finally, the equations of the category are Now, there exists t such that t:\!\!-~ \alpha_1 \times \ldots \times \alpha_n \vdash \beta iff \alpha_1, \ldots, \alpha_n \vdash \beta  is provable in implicational intuitionistic logic,. Thanks to the Curry–Howard correspondence, a typed expression whose type corresponds to a logical formula is analogous to a proof of that formula. Here are examples. As a simple example, we construct a proof of the theorem α → α. In lambda calculus, this is the type of the identity function I = λx.x and in combinatory logic, the identity function is obtained by applying S twice to K.  That is, we have I = ((S K) K). As a description of a proof, this says that to prove α → α, we can proceed as follows: In general, the procedure is that whenever the program contains an application of the form (P Q), we should first prove theorems corresponding to the types of P and Q. Since P is being applied to Q, the type of P must have the form α → β and the type of Q must have the form α for some α and β. We can then detach the conclusion, β, via the modus ponens rule. As a more complicated example, let's look at the theorem that corresponds to the B function. The type of B is (β → α) → (γ → β) → γ → α. B is equivalent to (S (K S) K). This is our roadmap for the proof of the theorem (β → α) → (γ → β) → γ → α. First we need to construct (K S). We make the antecedent of the K axiom look like the S axiom by setting α equal to (α → β → γ) → (α → β) → α → γ, and β equal to δ (to avoid variable collisions): K : α → β → α K[α = (α → β → γ) → (α → β) → α → γ, β=δ] : ((α → β → γ) → (α → β) → α → γ) → δ → (α → β → γ) → (α → β) → α → γ Since the antecedent here is just S, we can detach the consequent using Modus Ponens: K S : δ → (α → β → γ) → (α → β) → α → γ This is the theorem that corresponds to the type of (K S). We now apply S to this expression. Taking S S : (α → β → γ) → (α → β) → α → γ we put α = δ, β = α → β → γ, and γ = (α → β) → α → γ, yielding S[α = δ, β = α → β → γ, γ = (α → β) → α → γ] : (δ → (α → β → γ) → (α → β) → α → γ) → (δ → (α → β → γ)) → δ → (α → β) → α → γ and we then detach the consequent: S (K S) : (δ → α → β → γ) → δ → (α → β) → α → γ This is the formula for the type of (S (K S)). A special case of this theorem has δ = (β → γ): S (K S)[δ = β → γ] : ((β → γ) → α → β → γ) → (β → γ) → (α → β) → α → γ We need to apply this last formula to K. Again, we specialize K, this time by replacing α with (β → γ) and β with α: K : α → β → α K[α = β → γ, β = α] : (β → γ) → α → (β → γ) This is the same as the antecedent of the prior formula, so we detach the consequent: S (K S) K : (β → γ) → (α → β) → α → γ Switching the names of the variables α and γ gives us (β → α) → (γ → β) → γ → α which was what we had to prove. We give below a proof of (β → α) → (γ → β) → γ → α in natural deduction and show how it can be interpreted as the λ-expression λ a. λb. λ g.(a (b g)) of type (β → α) → (γ → β) → γ → α. a:β → α, b:γ → β, g:γ  b : γ → β    a:β → α, b:γ → β, g:γ  g : γ  ———————————————————————————————————  ————————————————————————————————————————————————————————————————————  a:β → α, b:γ → β, g:γ  a : β → α      a:β → α, b:γ → β, g:γ  b g : β  ————————————————————————————————————————————————————————————————————————                 a:β → α, b:γ → β, g:γ  a (b g) : α                 ————————————————————————————————————                 a:β → α, b:γ → β  λ g. a (b g) : γ → α                 ————————————————————————————————————————                          a:β → α  λ b. λ g. a (b g) : (γ → β) -> γ → α                          ————————————————————————————————————                                   λ a. λ b. λ g. a (b g) : (β → α) -> (γ → β) -> γ → α  Recently, the isomorphism has been proposed as a way to define search space partition in Genetic programming.F. Binard and A. Felty, "Genetic programming with polymorphic types and higher-order functions." In Proceedings of the 10th annual conference on Genetic and evolutionary computation, pages 1187 1194, 2008.[ ]  The method indexes sets of genotypes (the program trees evolved by the GP system) by their Curry–Howard isomorphic proof (referred to as a species). The correspondences listed here go much farther and deeper. For example, cartesian closed categories are generalized by closed monoidal categories. The internal language of these categories is the linear type system (corresponding to linear logic), which generalizes simply-typed lambda calculus as the internal language of cartesian closed categories.  What's more, these can be shown to correspond to cobordisms,John c. Baez and Mike Stay, "Physics, Topology, Logic and Computation: A Rosetta Stone", (2009) ArXiv 0903.0340 in New Structures for Physics, ed. Bob Coecke, Lecture Notes in Physics vol. 813, Springer, Berlin, 2011, pp. 95-174. which play a vital role in string theory. An extended set of equivalences is also explored in homotopy type theory, which is a very active area of research at this time (2013). Here, type theory is extended by the univalence axiom, ('equivalence is equivalent to equality') which permits homotopy type theory to be used as a foundation for all of mathematics (including set theory and classical logic, providing new ways to discuss the axiom of choice and many other things). That is, the Curry–Howard correspondence that proofs are elements of inhabited types is generalized to the notion homotopic equivalence of proofs (as paths in space, the identity type or equality type of type theory being interpreted as a path).Homotopy Type Theory: Univalent Foundations of Mathematics. (2013) The Univalent Foundations Program. Institute for Advanced Study.   refs=  Logic side Programming side universal quantification generalised product type (&Pi; type) existential quantification generalised sum type (&Sigma; type) implication function type conjunction product type disjunction sum type true formula unit type false formula bottom type Logic side Programming side Hilbert-style deduction system type system for combinatory logic natural deduction type system for lambda calculus Logic side Programming side hypotheses free variables implication elimination (modus ponens) application implication introduction abstraction Hilbert-style intuitionistic implicational logic Simply typed combinatory logic \frac{\alpha \in \Gamma}{\Gamma \vdash \alpha} \qquad\qquad\text{Assum} \frac{x:\alpha \in \Gamma}{\Gamma \vdash x:\alpha} \frac{}{\Gamma \vdash \alpha \rightarrow (\beta \rightarrow \alpha)} \qquad\text{Ax}_K \frac{}{\Gamma \vdash K: \alpha \rightarrow (\beta \rightarrow \alpha)} \frac{}{\Gamma \vdash (\alpha\!\rightarrow\!(\beta\!\rightarrow\!\gamma))\!\rightarrow\!((\alpha\!\rightarrow\!\beta)\!\rightarrow\!(\alpha\!\rightarrow\!\gamma))}\;\text{Ax}_S \frac{}{\Gamma \vdash S: (\alpha\!\rightarrow\!(\beta\!\rightarrow\!\gamma))\!\rightarrow\!((\alpha\!\rightarrow\!\beta)\!\rightarrow\!(\alpha\!\rightarrow\!\gamma))} \frac{\Gamma \vdash \alpha \rightarrow \beta \qquad \Gamma \vdash \alpha}{\Gamma \vdash \beta}\quad\text{Modus Ponens} \frac{\Gamma \vdash E_1:\alpha \rightarrow \beta \qquad \Gamma \vdash E_2:\alpha}{\Gamma \vdash E_1\;E_2:\beta}  Logic side Programming side assumption variable axioms combinators modus ponens application deduction theorem abstraction elimination Intuitionistic implicational natural deduction Lambda calculus type assignment rules \frac{}{\Gamma_1, \alpha, \Gamma_2 \vdash \alpha} \text{Ax} \frac{}{\Gamma_1, x:\alpha, \Gamma_2 \vdash x:\alpha} \frac{\Gamma, \alpha \vdash \beta}{\Gamma \vdash \alpha \rightarrow \beta} \rightarrow I \frac{\Gamma, x:\alpha \vdash t:\beta}{\Gamma \vdash \lambda x.t : \alpha \rightarrow \beta} \frac{\Gamma \vdash \alpha \rightarrow \beta \qquad \Gamma \vdash \alpha}{\Gamma \vdash \beta} \rightarrow E \frac{\Gamma \vdash t:\alpha \rightarrow \beta \qquad \Gamma \vdash u:\alpha}{\Gamma \vdash t\;u:\beta}  Logic side Programming side axiom variable introduction rule constructor elimination rule destructor normal deduction normal form normalisation of deductions weak normalisation provability type inhabitation problem intuitionistic tautology inhabited type Logic side Programming side Peirce's law: ((α → β) → α) → α call-with-current-continuation double-negation translation continuation-passing-style translation Logic side Programming side cut elimination reduction in a form of abstract machine right introduction rules constructors of code left introduction rules constructors of evaluation stacks priority to right-hand side in cut-elimination call-by-name reduction priority to left-hand side in cut-elimination call-by-value reduction the observation in 1934 by Curry that the types of the combinators could be seen as axiom-schemes for intuitionistic implicational logic, the observation in 1958 by Curry that a certain kind of proof system, referred to as Hilbert-style deduction systems, coincides on some fragment to the typed fragment of a standard model of computation known as combinatory logic, the observation in 1969 by Howard that another, more "high-level" proof system, referred to as natural deduction, can be directly interpreted in its intuitionistic version as a typed variant of the model of computation known as lambda calculus. δ is an hypothesis, i.e. it is a formula of Γ, δ is an instance of an axiom scheme; i.e., under the most common axiom system: δ has the form α → (β → α), or δ has the form (α → (β → γ)) → ((α → β) → (α → γ)), δ follows by deduction, i.e., for some α, both α → δ and α are already derivable from Γ (this is the rule of modus ponens) T is one of the variables in Γ, T is a basic combinator; i.e., under the most common combinator basis: T is K:α → (β → α) [where α and β denote the types of its arguments], or T is S:(α → (β → γ)) → ((α → β) → (α → γ)), T is the composition of two subterms which depend on the variables in Γ. Girard-Reynolds System F as a common language for both second-order propositional logic and polymorphic lambda calculus, higher-order logic and Girard's System Fω inductive types as algebraic data type necessity \Box in modal logic and staged computation possibility \Diamond in modal logic and monadic types for effects The λI calculus corresponds to relevant logic. The local truth (∇) modality in Grothendieck topology or the equivalent "lax" modality (∘) of Benton, Bierman, and de Paiva (1998) correspond to CL-logic describing "computation types".. The "lax" modality referred to is from  \top is an object if \alpha and \beta are objects then \alpha \times \beta and \alpha \rightarrow \beta are objects. id, \star, \operatorname{eval}, \pi_1 and \pi_2 are morphisms if t is a morphism,  \lambda t is a morphism if t and u are morphisms, (t, u) and u \circ t are morphisms. id \circ t = t, t \circ id = t, (v \circ u) \circ t = v \circ (u \circ t) \star \circ t = \star \pi_1 \circ (t, u) = t, \pi_2 \circ (t,u) = u, (\pi_1 \circ t, \pi_2 \circ t) = t eval \circ (\lambda t \circ \pi_1, \pi_2) = t, \lambda eval = id instantiate the second axiom scheme with the formulas α, β → α and α, so that to obtain a proof of (α → ((β → α) → α)) → ((α → (β → α)) → (α → α)), instantiate the first axiom scheme once with α and β → α, so that to obtain a proof of α → ((β → α) → α), instantiate the first axiom scheme a second time with α and β, so that to obtain a proof of α → (β → α), apply modus ponens twice so that to obtain a proof of α → α . , with 2 sections by William Craig, see paragraph 9E. De Bruijn, Nicolaas (1968), Automath, a language for mathematics, Department of Mathematics, Eindhoven University of Technology, TH-report 68-WSK-05. Reprinted in revised form, with two pages commentary, in: Automation and Reasoning, vol 2, Classical papers on computational logic 1967–1970, Springer Verlag, 1983, pp.&nbsp;159–200. . . . . . (Full version of the paper presented at Logic Colloquium '90, Helsinki. Abstract in JSL 56(3):1139–1140, 1991.) . . (Full version of a paper presented at Logic Colloquium '91, Uppsala. Abstract in JSL 58(2):753–754, 1993.) . . . (Full version of a paper presented at 2nd WoLLIC'95, Recife. Abstract in Journal of the Interest Group in Pure and Applied Logics 4(2):330–332, 1996.) , concerns the adaptation of proofs-as-programs program synthesis to coarse-grain and imperative program development problems, via a method the authors call the Curry–Howard protocol. Includes a discussion of the Curry–Howard correspondence from a Computer Science perspective. . (Full version of a paper presented at LSFA 2010, Natal, Brazil.) . (Early version presented at Logic Colloquium '88, Padova. Abstract in JSL 55:425, 1990.) . (Early version presented at Fourteenth International Wittgenstein Symposium (Centenary Celebration) held in Kirchberg/Wechsel, August 13–20, 1989.) . , the contribution of de Bruijn by himself. , contains a synthetic introduction to the Curry–Howard correspondence. , contains a synthetic introduction to the Curry–Howard correspondence. , reproduces the seminal papers of Curry-Feys and Howard, a paper by de Bruijn and a few other papers. , notes on proof theory and type theory, that includes a presentation of the Curry–Howard correspondence, with a focus on the formulae-as-types correspondence Girard, Jean-Yves (1987–90). Proof and Types. Translated by and with appendices by Lafont, Yves and Taylor, Paul. Cambridge University Press (Cambridge Tracts in Theoretical Computer Science, 7), ISBN 0-521-37181-3, notes on proof theory with a presentation of the Curry–Howard correspondence. Thompson, Simon (1991). Type Theory and Functional Programming Addison–Wesley. ISBN 0-201-41667-0. , concerns the adaptation of proofs-as-programs program synthesis to coarse-grain and imperative program development problems, via a method the authors call the Curry–Howard protocol. Includes a discussion of the Curry–Howard correspondence from a Computer Science perspective. F. Binard and A. Felty, "Genetic programming with polymorphic types and higher-order functions." In Proceedings of the 10th annual conference on Genetic and evolutionary computation, pages 1187 1194, 2008.[ ] . P.T. Johnstone, 2002, Sketches of an Elephant, section D4.2 (vol 2) gives a categorical view of "what happens" in the Curry–Howard correspondence. Howard on Curry-Howard The Curry–Howard Correspondence in Haskell The Monad Reader 6: Adventures in Classical-Land: Curry–Howard in Haskell, Pierce's law.
