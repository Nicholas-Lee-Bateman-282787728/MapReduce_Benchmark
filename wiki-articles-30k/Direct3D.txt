   Direct3D is a graphics application programming interface (API) for Microsoft Windows. Direct3D is used to render three-dimensional graphics in applications where performance is important, such as games. Direct3D uses hardware acceleration if it is available on the graphics card, allowing for hardware acceleration of the entire 3D rendering pipeline or even only partial acceleration. Direct3D exposes the advanced graphics capabilities of 3D graphics hardware, including Z-buffering, W-buffering, Stencil buffering , spatial anti-aliasing, alpha blending, colour blending, mipmapping, texture blending,clipping, Culling, atmospheric effects, perspective-correct texture mapping, programmable HLSL shaders and effects. Integration with other DirectX technologies enables Direct3D to deliver such features as video mapping, hardware 3D rendering in 2D overlay planes, and even sprites, providing the use of 2D and 3D graphics in interactive media ties. Direct3D contains many commands for 3D computer graphics rendering; however, since version 8, Direct3D has superseded the DirectDraw framework and also taken responsibility for the rendering of 2D graphics. Microsoft strives to continually update Direct3D to support the latest technology available on 3D graphics cards. Direct3D offers full vertex software emulation but no pixel software emulation for features not available in hardware. For example, if software programmed using Direct3D requires pixel shaders and the video card on the user's computer does not support that feature, Direct3D will not emulate it, although it will compute and render the polygons and textures of the 3D models, albeit at a usually degraded quality and performance compared to the hardware equivalent. The API does include a Reference Rasterizer (or REF device), which emulates a generic graphics card in software, although it is too slow for most real-time 3D applications and is typically only used for debugging. A new real-time software rasterizer, WARP, designed to emulate complete feature set of Direct3D 10.1, is included with Windows 7 and Windows Vista Service Pack 2 with the Platform Update; its performance is said to be on par with lower-end 3D cards on multi-core CPUs. Part of DirectX, Direct3D is available for Windows 95 and above, and is the base for the vector graphics API on the Xbox and Xbox 360 console systems. The Wine compatibility layer, a free software reimplementation of several Windows APIs, includes an implementation of Direct3D. Direct3D's main competitor is OpenGL. Fahrenheit was an attempt by Microsoft and SGI to unify OpenGL and Direct3D in the 1990s, but was eventually cancelled. In 1992, Servan Keondjian started a company named RenderMorphics, which developed a 3D graphics API named Reality Lab, which was used in medical imaging and CAD software. Two versions of this API were released. Microsoft bought RenderMorphics in February 1995, bringing Keondjian on board to implement a 3D graphics engine for Windows 95. The first version of Direct3D shipped in DirectX 2.0 (June 2, 1996) and DirectX 3.0 (September 26, 1996). Direct3D initially implemented "retained mode" and "immediate mode" 3D APIs. Like other DirectX APIs, such as DirectDraw, both were based on COM.  The retained mode was a scene graph API that attained little adoption. Game developers clamored for more direct control of the hardware's activities than the Direct3D retained mode could provide. Only two games that sold a significant volume, Lego Island and Lego Rock Raiders, were based on the Direct3D retained mode, so Microsoft did not update the retained mode after DirectX 3.0. For DirectX 2.0 and 3.0, the Direct3D immediate mode used an "execute buffer" programming model that Microsoft hoped hardware vendors would support directly. Execute buffers were intended to be allocated in hardware memory and parsed by the hardware to perform the 3D rendering. They were extremely awkward to program, however, hindering adoption of the new API and prompting calls for Microsoft to adopt OpenGL as the official 3D rendering API for games as well as workstation applications. (see OpenGL vs. Direct3D) Rather than adopt OpenGL as a gaming API, Microsoft chose to continue improving Direct3D, not only to be competitive with OpenGL, but to compete more effectively with proprietary APIs such as 3dfx's Glide. From the beginning, the immediate mode also supported Talisman's tiled rendering with the BeginScene/EndScene methods of the IDirect3DDevice interface. No substantive changes were planned to Direct3D for DirectX 4.0, which was scheduled to ship in late 1996 and then cancelled. In December 1996, a team in Redmond took over development of the Direct3D Immediate Mode, while the London-based RenderMorphics team continued work on the Retained Mode.  The Redmond team added the DrawPrimitive API that eliminated the need for applications to construct execute buffers, making Direct3D more closely resemble other immediate mode rendering APIs such as Glide and OpenGL.  The first beta of DrawPrimitive shipped in February 1997, and the final version shipped with DirectX 5.0 in August 1997  Besides introducing an easier-to-use immediate mode API, DirectX 5.0 added the SetRenderTarget method that enabled Direct3D devices to write their graphical output to a variety of DirectDraw surfaces. DirectX 6.0 (released in August, 1998) introduced numerous features to cover contemporary hardware (such as multitexture and stencil buffers) as well as optimized geometry pipelines for x87, SSE and 3DNow! and optional texture management to simplify programming. Direct3D 6.0 also included support for features that had been licensed by Microsoft from specific hardware vendors for inclusion in the API, in exchange for the time-to-market advantage to the licensing vendor. S3 texture compression support was one such feature, renamed as DXTC for purposes of inclusion in the API. Another was TriTech's proprietary bump mapping technique. Microsoft included these features in DirectX, then added them to the requirements needed for drivers to get a Windows logo to encourage broad adoption of the features in other vendors' hardware. A minor update to DirectX 6.0 came in the February, 1999 DirectX 6.1 update. Besides adding DirectMusic support for the first time, this release improved support for Intel Pentium III 3D extensions. A confidential memo sent in 1997  shows Microsoft planning to announce full support for Talisman in DirectX 6.0, but the API ended up being cancelled (See the Microsoft Talisman page for details). DirectX 7.0 introduced the .dds texture format and support for transform and lighting hardware acceleration (first available on PC hardware with Nvidia's GeForce 256), as well as the ability to allocate vertex buffers in hardware memory. Hardware vertex buffers represent the first substantive improvement over OpenGL in DirectX history. Direct3D 7.0 also augmented DirectX support for multitexturing hardware, and represents the pinnacle of fixed-function multitexture pipeline features: although powerful, it was so complicated to program that a new programming model was needed to expose the shading capabilities of graphics hardware. DirectX 8.0, released in November, 2000, introduced programmability in the form of vertex and pixel shaders, enabling developers to write code without worrying about superfluous hardware state. The complexity of the shader programs depended on the complexity of the task, and the display driver compiled those shaders to instructions that could be understood by the hardware. Direct3D 8.0 and its programmable shading capabilities were the first major departure from an OpenGL-style fixed-function architecture, where drawing is controlled by a complicated state machine. Direct3D 8.0 also eliminated DirectDraw as a separate API. Direct3D subsumed all remaining DirectDraw API calls still needed for application development, such as Present(), the function used to display rendering results. Direct3D was not considered to be user friendly, but as of DirectX version 8.1, many usability problems were resolved. Direct3D 8 contained many powerful 3D graphics features, such as vertex shaders, pixel shaders, fog, bump mapping and texture mapping. Direct3D 9.0 added a new version of the High Level Shader Language support for floating-point texture formats, Multiple Render Targets(MRT), Multiple-Element Textures, texture lookups in the vertex shader and stencil buffer techniques. An extension only available in Windows Vista, called Direct3D 9Ex (previously versioned 9.0L), allows the use of the advantages offered by Windows Vista's Windows Display Driver Model (WDDM) and is used for Windows Aero. Direct3D 9Ex, in conjunction with DirectX 9 class WDDM drivers allows graphics memory to be virtualized and paged out to system memory, allows graphics operations to be interrupted and scheduled and allow DirectX surfaces to be shared across processes. Direct3D 9Ex was previously known as version 1.0 of Windows Graphics Foundation (WGF). Windows Vista includes a major update to the Direct3D API. Originally called WGF 2.0 (Windows Graphics Foundation 2.0), then DirectX 10 and DirectX Next. Direct3D 10 features an updated shader model 4.0 and optional interruptibility for shader programs. In this model shaders still consist of fixed stages as on previous versions, but all stages support a nearly unified interface, as well as a unified access paradigm for resources such as textures and shader constants. The language itself has been extended to be more expressive, including integer operations, a greatly increased instruction count, and more C-like language constructs. In addition to the previously available vertex and pixel shader stages, the API includes a geometry shader stage that breaks the old model of one vertex in/one vertex out, to allow geometry to actually be generated from within a shader, allowing for complex geometry to be generated entirely on the graphics hardware. Windows XP is not supported by DirectX 10.0 and above. Unlike prior versions of the API, Direct3D 10 no longer uses "capability bits" (or "caps") to indicate which features are supported on a given graphics device. Instead, it defines a minimum standard of hardware capabilities which must be supported for a display system to be "Direct3D 10 compatible". This is a significant departure, with the goal of streamlining application code by removing capability-checking code and special cases based on the presence or absence of specific capabilities. Because Direct3D 10 hardware was comparatively rare after the initial release of Windows Vista and because of the massive installed base of non-Direct3D 10 compatible graphics cards, the first Direct3D 10-compatible games still provide Direct3D 9 render paths. Examples of such titles are games originally written for Direct3D 9 and ported to Direct3D 10 after their release, such as Company of Heroes, or games originally developed for Direct3D 9 with a Direct3D 10 path retrofitted later in development, such as Hellgate: London or Crysis. The DirectX 10 SDK became available in February 2007. Direct3D 10.0 level hardware must support the following features: The ability to process entire primitives in the new geometry-shader stage, the ability to output pipeline-generated vertex data to memory using the stream-output stage, multisampled alpha-to-coverage support, readback of a depth/stencil surface or a multisampled resource once it is no longer bound as a render target, full HLSL integration - all Direct3D 10 shaders are written in HLSL and implemented with the common-shader core, integer and bitwise shader operations,  organization of pipeline state into 5 immutable state objects, organization of shader constants into constant buffers, increased number of render targets, textures, and samplers, no shader length limit, new resource types and resource formats, layered  runtime/API layers, option to perform per-primitive material swapping and setup using a geometry shader, increased generalization of resource access using a view, removed legacy hardware capability bits(caps). Direct3D 10.1 was announced by Microsoft shortly after the release of Direct3D 10 as a minor update. The specification was finalized with the release of November 2007 DirectX SDK and the runtime was shipped with the Windows Vista SP1, which is available since mid-March 2008. Direct3D 10.1 sets a few more image quality standards for graphics vendors, and gives developers more control over image quality. Features include finer control over anti-aliasing (both multisampling and supersampling with per sample shading and application control over sample position) and more flexibilities to some of the existing features (cubemap arrays and independent blending modes). Direct3D 10.1 level hardware must support the following features: Multisampling has been enhanced to generalize coverage based transparency and make multisampling work more effectively with multi-pass rendering, better culling behavior - Zero-area faces are automatically culled; this affects wireframe rendering only, independent blend modes per render target, new sample-frequency pixel shader execution with primitive rasterization, increased pipeline stage bandwidth, both colour and depth/stencil MSAA surfaces can now be used with CopyResource as either a source or destination, MultisampleEnable only affects line rasterization (points and triangles are unaffected), and is used to choose a line drawing algorithm. This means that some multisample rasterization from Direct3D 10 are no longer supported, Texture Sampling - sample_c and sample_c_lz instructions are defined to work with both Texture2DArrays and TextureCubeArrays use the Location member (the alpha component) to specify an array index, support for TextureCubeArrays. Unlike Direct3D 10 which strictly required Direct3D 10-class hardware and driver interfaces, Direct3D 10.1 runtime can run on Direct3D 10.0 hardware using a concept of "feature levels", but new features are supported exclusively by new hardware which expose feature level 10_1. The only available Direct3D 10.1 hardware as of June 2008 were the Radeon HD 3000 series and Radeon HD 4000 series from ATI; in 2009, they were joined by Chrome 430/440GT GPUs from S3 Graphics and select lower-end models in GeForce 200 series from Nvidia. In 2011, Intel chipsets started supporting Direct3D 10.1 with the introduction of Intel HD Graphics 2000 (GMA HD). Direct3D 11 was released as part of Windows 7. It was presented at Gamefest 2008 on July 22, 2008 and demonstrated at the Nvision 08 technical conference on August 26, 2008. The Direct3D 11 Technical Preview has been included in November 2008 release of DirectX SDK. AMD previewed working DirectX11 hardware at Computex on June 3, 2009, running some DirectX 11 SDK samples. The Direct3D 11 runtime is able to run on Direct3D 9 and 10.x-class hardware and drivers using the concept of "feature levels", expanding on the functionality first introduced in Direct3D 10.1 runtime. Feature levels allow developers to unify the rendering pipeline under Direct3D 11 API and make use of API improvements such as better resource management and multithreading even on entry-level cards, though advanced features such as new shader models and rendering stages will only be exposed on up-level hardware. There are three "10 Level 9" profiles which encapsulate various capabilities of popular DirectX 9.0a cards, and Direct3D 10, 10.1, and 11 each have a separate feature level; each upper level is a strict superset of a lower level. Tessellation was earlier considered for Direct3D 10, but was later abandoned. GPUs such as Radeon R600 feature a tessellation engine that can be used with Direct3D 9/10/10.1 and OpenGL, but it's not compatible with Direct3D 11 (according to Microsoft). Older graphics hardware such as Radeon 8xxx, GeForce 3/4 had support for another form of tesselation (RT patches, N patches) but those technologies never saw substantial use. As such, their support was dropped from newer hardware. Microsoft has also hinted at other features such as order independent transparency, which was never exposed by the Direct3D API but supported almost transparently by early Direct3D hardware such as Videologic's PowerVR line of chips. Direct3D 11.0 features include: Support for Shader Model 5.0, Dynamic shader linking, addressable resources, additional resource types, subroutines, geometry instancing, coverage as pixel shader input,  programmable interpolation of inputs, new texture compression formats (1 new LDR format and 1 new HDR format), texture clamps to limit WDDM preload, require 8-bits of subtexel and sub-mip precision on texture filtering, 16K texture limits, Gather4(support for multi-component textures, support for programmable offsets), DrawIndirect, conservative oDepth, Depth Bias, addressable stream output, per-resource mipmap clamping, floating-point viewports, shader conversion instructions, improved multithreading. Other notable features are the addition of two new texture compression algorithms for more efficient packing of high quality and HDR/alpha textures and an increased texture cache. First seen in the Release Candidate version, Windows 7 integrates the first released Direct3D 11 support. The Platform Update for Windows Vista includes full-featured Direct3D 11 runtime and DXGI 1.1 update, as well as other related components from Windows 7 like WARP, Direct2D, DirectWrite, and WIC. Direct3D 11.1 is an update to the API that ships with Windows 8. The Direct3D runtime in Windows 8 features DXGI 1.2 and requires new WDDM 1.2 device drivers. Preliminary version of the Windows SDK for Windows 8 Developer Preview was released on September 13, 2011. The new API features shader tracing and HLSL compiler enhancements, support for minimum precision HLSL scalar data types,  UAVs (Unordered Access Views) at every pipeline stage, target-independent rasterization (TIR), option to map SRVs of dynamic buffers with NO_OVERWRITE,  shader processing of video resources, option to use logical operations in a render target, option to bind a subrange of a constant buffer to a shader and retrieve it, option to create larger constant buffers than a shader can access, option to discard resources and resource views, option to change subresources with new copy options, option to force the sample count to create a rasterizer state, option to clear all or part of a resource view, option to use Direct3D in Session 0 processes, option to specify user clip planes in HLSL on feature level 9 and higher, support for shadow buffer on feature level 9, support for video playback, extended support for shared Texture2D resources, and on-the-fly swapping between Direct3D 10 and 11 contexts and feature levels.  Direct3D 11.1 includes new feature level 11_1, which brings minor updates to the shader language, such as larger constant buffers and optional double-precision instructions, as well as improved blending modes and mandatory support for 16-bit colour formats to improve the performance of entry-level GPUs such as Intel HD Graphics. WARP has been updated to support feature level 11_1. The Platform Update for Windows 7 includes a limited set of features from Direct3D 11.1, though components that depend on WDDM 1.2 - such as feature level 11_1 and its related APIs, or quad buffering for stereoscopic rendering - are not present. Direct3D 11.2 was shipped with Windows 8.1. New hardware features require DGXI 1.3 with WDDM 1.3 drivers and include runtime shader modification and linking, Function linking graph(FLG), inbox HLSL compiler, option to annotate graphics commands.https://msdn.microsoft.com/en-us/library/windows/apps/bg182880.aspx Feature levels 11_0 and 11_1 introduce optional support for tiled resources with shader level of detail clamp (Tier2). The latter feature effectively provides control over the hardware page tables present in many current GPUs. WARP was updated to fully support the new features. There is no feature level 11_2 however; the new features are dispersed across existing feature levels. Those that are hardware-dependent can be checked individually via CheckFeatureSupport. Some of the "new" features in Direct3D 11.2 actually expose some old hardware features in a more granular way; for example D3D11_FEATURE_D3D9_SIMPLE_INSTANCING_SUPPORT exposes partial support for instancing on feature level 9_1 and 9_2 hardware, otherwise fully supported from feature level 9_3 onward. Direct3D 11.X is a superset of DirectX 11.2 running on the Xbox One. It includes some features, such as draw bundles, that were later announced as part of DirectX 12.Chris Tector's segment of http://channel9.msdn.com/Blogs/DirectX-Developer-Blog/DirectX-Evolving-Microsoft-s-Graphics-Platform (starting approx. 18 minute in.) Direct3D 11.3https://msdn.microsoft.com/en-us/library/windows/desktop/dn903943(v=vs.85).aspx is expected to ship with Windows 10; it should include some minor rendering features from Direct3D 12, while keeping the overall structure of the Direct3D 11.x API. Direct3D 11.3 introduces Shader Model 5.1,https://msdn.microsoft.com/en-us/library/windows/desktop/dn933277(v=vs.85).aspx optional Shader Specified Stencil Reference Value, Typed Unordered Access View Loads,  Rasterizer Ordered Views (ROVs), optional Standard Swizzle, optional Default Texture Mapping, Conservative Rasterization(out of three tiers), optional Unified Memory Access (UMA) support, and additional Tiled Resources(tier 2)(Volume tiled resources). Direct3D 12https://msdn.microsoft.com/en-us/library/windows/desktop/dn903943(v=vs.85).aspx allows a lower level of hardware abstraction than earlier versions, enabling future games to significantly improve multithreaded scaling and (decrease) CPU utilization. This is achieved by better matching the Direct3D abstraction layer with the underlying hardware, by means of new features such as Indirect Drawing, descriptor tables, concise pipeline state objects, and draw call bundles. Reducing driver overhead is in fact the main attraction of Direct3D 12, similarly to AMD's Mantle; in the words of its lead developer Max McMullen, the main goal of Direct3D 12 is to achieve "console-level efficiency" and improved CPU parallelism.first two minutes of https://channel9.msdn.com/Events/Build/2014/3-564 Although Nvidia has announced broad support for Direct3D 12, they were also somewhat reserved about the universal appeal of the new API, noting that while game engine developers may be enthusiastic about directly managing GPU resources from their application code, "a lot of [other] folks wouldn't" be happy to have to do that. Some new hardware features are also in Direct3D 12,http://static.gamespot.com/uploads/original/823/8237367/2484602-pixel+ordered+uav.jpg including Shader Model 5.1,https://msdn.microsoft.com/en-us/library/windows/desktop/dn933277(v=vs.85).aspx Volume Tiled Resources(Tier 2),https://msdn.microsoft.com/en-us/library/windows/desktop/dn933277(v=vs.85).aspx Shader Specified Stencil Reference Value, Typed UAV Load, Conservative Rasterization(Tier 1), better collision and culling with Conservative Rasterization, Rasterizer Ordered Views (ROVs), Standard Swizzles, Default Texture Mapping, Swap Chains, swizzled resources and compressed resources, additional blend modes, programmable blend and efficient Order-independent transparency(OIT) with pixel ordered UAV. Pipeline state objects have evolved from Direct3D 11, and the new concise pipeline states mean that the process has been simplified. DirectX 11 offered flexibility in how its states could be altered, to the detriment of performance. Simplifying the process and unifying the pipelines (e.g. pixel shader states) lead to a more streamlined process, significantly reducing the overheads and allowing the graphics card to draw more calls for each frame. Direct3D 12 also learned from AMD Mantle in command lists and bundles, aiming to ensure the CPU and GPU working together in a more balanced manner. Within Direct3D 11, the commands are sent from the CPU to the GPU one by one, and the GPU works through these commands sequentially. This means that commands are bottlenecked by the speed at which the CPU could send these commands in a linear fashion. Within DirectX 12 these commands are sent as command lists, containing all the required information within a single package. The GPU is then capable of computing and executing this command in one single process, without having to wait on any additional information from the CPU. Within these command lists are bundles. Where previously commands were just taken, used, and then forgotten by the GPU, bundles can be reused. This decreases the workload of the GPU and means repeated assets can be used much faster. While resource binding is fairly convenient in Direct3D 11 for developers at the moment, its inefficiency means several modern hardware capabilities are being drastically underused.  When a game engine needed resources in DX11, it had to draw the data from scratch every time, meaning repeat processes and unnecessary uses. In Direct3D 12, descriptor heaps and tables mean the most often used resources can be allocated by developers in tables, which the GPU can quickly and easily access.  This can contribute to better performance than Direct3D 11 on equivalent hardware, but it also entails more work for the developer. Dynamic Heaps are also a feature of Direct3D 12. In Late February 2015 Gamespot.com released a news video on YouTube claiming - among other things - support in Direct3D 12 for vendor agnostic GPU and VRAM pooling for increased performance presenting the sum of a systems graphics processing resources as one rendering unit to an application.  Details were light and it is unclear how something like this is accomplished, especially since a large part of Direct 3D 12's stated goal is to reduce the abstraction layer for decreased overhead and resulting performance improvements, and achieving the goals above would seem to need a larger abstraction layer, not a smaller one.   Direct3D is a Microsoft DirectX API subsystem component. The aim of Direct3D is to abstract the communication between a graphics application and the graphics hardware drivers. It is presented like a thin abstract layer at a level comparable to GDI (see attached diagram). Direct3D contains numerous features that GDI lacks. Direct3D is an Immediate mode graphics API. It provides a low-level interface to every video card 3D function (transformations, clipping, lighting, materials, textures, depth buffering and so on). It also had a higher level Retained mode component, that has now been officially discontinued. Direct3D immediate mode presents three main abstractions: devices, resources and Swap Chains (see attached diagram). Devices are responsible for rendering the 3D scene. They provide an interface with different rendering capabilities. For example, the mono device provides white and black rendering, while the RGB device renders in colour. There are four types of devices: Every device contains at least one swap chain. A swap chain is made up of one or more back buffer surfaces. Rendering occurs in the back buffer. Moreover, devices contain a collection of resources; specific data used during rendering. Each resource has four attributes: Direct3D implements two display modes:  The Microsoft Direct3D 11 API defines a process to convert a group of vertices, textures, buffers, and state into an image on the screen. This process is described as a rendering pipeline with several distinct stages. The different stages of the Direct3D 11 pipeline are: The pipeline stages illustrated with a round box are fully programmable. The application provides a shader program that describes the exact operations to be completed for that stage. Many stages are optional and can be disabled altogether.    In Direct3D 5 to 9, when new versions of the API introduced support for new hardware capabilities, most of them were optional - each graphics vendor maintained their own set of supported features in addition to the basic required functionality. Support for individual features had to be determined using "capability bits" or "caps", making cross-vendor graphics programming a complex task. Direct3D 10 introduced a much simplified set of mandatory hardware requirements based on most popular Direct3D 9 capabilities which all supporting graphics cards had to adhere to, with only a few optional capabilities for supported texture formats and operations. Direct3D 10.1 added a few new mandatory hardware requirements, and to remain compatible with 10.0 hardware and drivers, these features were encapsulated in two sets called "feature levels", with 10.1 level forming a superset of 10.0 level. As Direct3D 11.0 and 11.1 added support for new hardware, new mandatory capabilities were further grouped in upper levels. Direct3D 11 also introduced "10level9", a subset of the Direct3D 10 API with feature levels encapsulating various Direct3D 9 cards with WDDM drivers, and Direct3D 11.1 introduced a few optional features for all levels.https://msdn.microsoft.com/en-us/library/windows/desktop/hh404562#check_support_of_new_direct3d_11.1_features_and_formats This approach allows developers to unify the rendering pipeline and use a single version of the API on both newer and older hardware, taking advantage of performance and usability improvements in the newer runtime. New feature levels are introduced with updated versions of the API and typically encapsulate: Each upper level is a strict superset of a lower level, with only a few new or previously optional features that move to the core functionality on an upper level. More advanced features in a major revision of the Direct3D API such as new shader models and rendering stages are only exposed on up-level hardware. Separate capabilities exist to indicate support for specific texture operations and resource formats; these are specified per each texture format using a combination of capability flags. In Direct3D 11.x, there are nine feature levels provided by  structure; levels 9_1, 9_2 and 9_3 (collectively known as Direct3D 10 Level 9) re-encapsulate various features of popular Direct3D 9 cards, while levels 10_0, 10_1, 11_0 and 11_1 refer to respective versions of the Direct3D API. Direct3D 11.1 for Windows 8 introduced feature level 11_1 and optional capabilities for levels 10_0, 10_1 and 11_0, however these are not available in Direct3D 11.1 for Windows 7 platform update.https://msdn.microsoft.com/en-us/library/windows/desktop/jj863687.aspx Direct3D 11.2 for Windows 8.1 adds optional tiled resources for levels 11_0 and 11_1, and Direct3D 11.3 for Windows 10 adds more optional features and requires WDDM 2.0 drivers. Direct3D 12 for Windows 10 requires graphics hardware conforming to feature levels 11_0 and 11_1 which support virtual memory address translations and requires WDDM 2.0 drivers. There are two new feature levels, 12_0 and 12_1, which include some new features exposed by Direct3D 12 that are optional on levels 11_0 and 11_1.https://msdn.microsoft.com/en-us/library/dn899127.aspx Some previously optional features are realigned as baseline on levels 11_0 and 11_1. Direct3D 12 introduces a revamped resource binding model which allows explicit control of memory. Abstract "resource view" objectshttps://msdn.microsoft.com/en-us/library/windows/desktop/ff476900(v=vs.85).aspx are now represented with resource descriptors, which are allocated using memory heaps and tables.Wolfgang Engel. Introduction to Resource Binding in Microsoft DirectX 12 Resource Binding tiers define maximum number of resources that can be addressed using CBV (constant buffer view), SRV (shader resource view) and UAV (unordered access view), as well as texture sampler units. Tier 3 hardware allows fully bindless resources only restricted by the size of the descriptor heap, while Tier 1 and Tier 2 hardware impose some limits on the number of descriptors ("views") that can be used simultaneously.GVCS005 - Microsoft Direct3D 12: New API Details and Intel OptimizationsBuild 2015: Advanced DirectX12 Graphics and Performance WDDM driver model in Windows Vista and higher supports arbitrarily large number of execution contexts (or threads) in hardware or in software. Windows XP only supported multitasked access to Direct3D, where separate applications could execute in different windows and be hardware accelerated, and the OS had limited control about what the GPU could do and the driver could switch execution threads arbitrarily. The ability to execute the runtime in a multi-threaded mode has been introduced with Direct3D 11 runtime. Each execution context is presented with a resource view of the GPU. Execution contexts are protected from each other, however a rogue or badly written app can take control of the execution in the user-mode driver and could potentially access data from another process within GPU memory by sending modified commands. Though protected from access by another app, a well-written app still needs to protect itself against failures and device loss caused by other applications. The OS manages the threads all by itself, allowing the hardware to switch from one thread to the other when appropriate, and also handles memory management and paging (to system memory and to disk) via integrated OS-kernel memory management. Finer-grained context switching, i.e. being able to switch two execution threads at the shader-instruction level instead of the single-command level or even batch of commands, was introduced in WDDM/DXGI 1.2 which shipped with Windows 8.  This overcomes a potential scheduling problem when application would have very long execution of a single command/batch of commands and will have to be terminated by the OS watchdog timer.http://www.microsoft.com/whdc/device/display/wddm_timeout.mspx WDDM 2.0 and DirectX 12 have been reengineered to allow fully multithreaded draw calls. This was achieved by making all resources immutable (i.e. read-only), serializing the rendering states and using draw call bundles. This avoids complex resource management in the kernel-mode driver, making possible multiple reentrant calls to the user-mode driver via concurrent executions contexts supplied by separate rendering threads in the same application. Direct3D Mobile is derived from Direct3D but has a smaller memory footprint. Windows CE provides Direct3D Mobile support.Direct3D Mobile, Microsoft, 6 January 2010. The Wine project has working implementations of the Direct3D 8, 9 and 10 APIs (they are, as of 20 May 2014, 100%, 78% and 82% complete respectively). Wine's implementation can also be run on Windows under certain conditions. Work on implementing Direct3D 10 began in Wine 1.1.7, using OpenGL via WGL.  Direct3D comes with D3DX, a library of tools designed to perform common mathematical calculations on vectors, matrices and colours, calculating look-at and projection matrices, spline interpolations, and several more complicated tasks, such as compiling or assembling shaders used for 3D graphic programming, compressed skeletal animation storage and matrix stacks. There are several functions that provide complex operations over 3D meshes like tangent-space computation, mesh simplification, precomputed radiance transfer, optimizing for vertex cache friendliness and stripification, and generators for 3D text meshes. 2D features include classes for drawing screen-space lines, text and sprite based particle systems. Spatial functions include various intersection routines, conversion from/to barycentric coordinates and bounding box/sphere generators. D3DX is provided as a dynamic link library (DLL). D3DX is deprecated from Windows 8 onward and can't be used in Windows Store apps. Some features present in previous versions of D3DX were removed in Direct3D 11 and now provided as separate sources: DXUT (also called the sample framework) is a layer built on top of the Direct3D API. The framework is designed to help the programmer spend less time with mundane tasks, such as creating a window, creating a device, processing Windows messages and handling device events. DXUT have been removed with the Windows SDK 8.0 and now distributed as source via CodePlex. Feature level !!  Mandatory hardware features !! Optional features 9_1 Shader Model 2.0 (/), 2K textures, volume textures, event queries, BC1-3 (aka DXTn), a few other specific capabilities. rowspan="3"  9_2 Occlusion queries, floating-point formats (no blending), extended caps, all 9_1 features. 9_3 / with instancing and additional shader caps, 4K textures, multiple render targets (4 MRTs), floating-point blending (limited), all 9_2 features. 10_0 Shader Model 4.0, geometry shader, stream out, alpha-to-coverage, 8K textures, MSAA textures, 2-sided stencil, general render target views, texture arrays, BC4/BC5, full floating-point format support, all 9_3 features. Logical blend operations, DirectCompute (CS 4.0/4.1), extended pixel formats. 10_1 Shader Model 4.1, cubemap arrays, extended MSAA, all 10_0 features. 11_0 Shader Model 5.0/5.1, hull & domain shaders, DirectCompute (CS 5.0/5.1), 16K textures, BC6H/BC7, extended pixel formats, all 10_1 features. UAV only rendering with force sample count, constant buffer offsetting and partial updates, double precision (64-bit) floating point operations,  minimum floating point precision (10 or 16 bit), min/max filtering. 11_1 Logical blend operations, target-independent rasterization, UAVs at every pipeline stage with increased slot count, UAV only rendering with force sample count, constant buffer offsetting and partial updates, all 11_0 features. Tiled resources (three tiers), conservative rasterization (three tiers), stencil reference value from Pixel Shader, rasterizer ordered views, typed UAV loads for additional formats 12_0 Tiled Resources Tier 2 (Texture2D), Typed UAV Loads (additional formats). 12_1 Conservative Rasterization Tier 1, Rasterizer Ordered Views. Mandatory features !!  Optional features 11_0 All mandatory 11_0 features from Direct3D 11, Shader Model 5.1, Resource binding Tier 1. Logical blend operations, double precision (64-bit) floating point operations, minimum floating point precision (10 or 16 bit). Resource binding (three tiers), tiled resources (three tiers), conservative rasterization (three tiers), stencil reference value from Pixel Shader, rasterizer ordered views, typed UAV loads for additional formats. UAVs at every pipeline stage, UAV only rendering with force sample count, constant buffer offsetting and partial updates. 11_1 Logical blend operations, target-independent rasterization, increased UAV slot count. 12_0 Resource Binding Tier 2, Tiled Resources Tier 2 (Texture2D), Typed UAV Loads (additional formats). 12_1 Conservative Rasterization Tier 1, Rasterizer Ordered Views. Resource limits !! Tier 1 !! Tier 2 !! Tier 3 Descriptors in CBV/SRV/UAV heap 1M 1M 1M CBVs per shader stage 14 14 full heap SRVs per shader stage 128 full heap UAVs across all stages 8, 64† 64 full heap Samplers per shader stage 16 full heap † 64 slots on feature level 11_1 hardware Fixed pipelines are being done away with in favor of fully programmable pipelines (often referred to as unified pipeline architecture), which can be programmed to emulate the same. New state object to enable (mostly) the CPU to change states efficiently. Shader model 4.0 enhances the programmability of the graphics pipeline. It adds instructions for integer and bitwise calculations. The common shader core provides a full set of IEEE-compliant 32-bit integer and bitwise operations. These operations enable a new class of algorithms in graphics hardware—examples include compression and packing techniques, FFTs, and bitfield program-flow control. Geometry shaders, which work on adjacent triangles which form a mesh. Texture arrays enable swapping of textures in GPU without CPU intervention. Predicated Rendering allows drawing calls to be ignored based on some other conditions. This enables rapid occlusion culling, which prevents objects from being rendered if it is not visible or too far to be visible. Instancing 2.0 support, allowing multiple instances of similar meshes, such as armies, or grass or trees, to be rendered in a single draw call, reducing the processing time needed for multiple similar objects to that of a single one. Mandatory 32-bit floating point filtering. Floating Point Rules - Uses the same IEEE-754 rules for floating-point EXCEPT 32-bit floating point operations have been tightened to produce a result within 0.5 unit-last-place (0.5 ULP) of the infinitely precise result. This applies to addition, subtraction, and multiplication. (accuracy to 0.5 ULP for multiply, 1.0 ULP for reciprocal). Formats - The precision of float16 blending has increased to 0.5 ULP. Blending is also required for UNORM16/SNORM16/SNORM8 formats. Format Conversion while copying between certain 32/64/128 bit prestructured, typed resources and compressed representations of the same bit widths. Mandatory support for 4x MSAA for all render targets except R32G32B32A32 and R32G32B32. Shader model 4.1 Shader Model 5 Support for Tessellation and Tessellation Shaders to increase at runtime the number of visible polygons from a low detail polygonal model Multithreaded rendering — to render to the same Direct3D device object from different threads for multi core CPUs Compute shaders — which exposes the shader pipeline for non-graphical tasks such as stream processing and physics acceleration, similar in spirit to what OpenCL, Nvidia CUDA, ATI Stream, and HLSL Shader Model 5 achieve among others. Mandatory support for 4x MSAA for all render targets and 8x MSAA for all render target formats except R32G32B32A32 formats. HAL (hardware abstraction layer) device: For devices supporting hardware acceleration. Reference device: Simulates new functions not yet available in hardware. It is necessary to install the Direct3D SDK to use this device type. Null reference device: Does nothing. This device is used when the SDK is not installed and a reference device is requested. Pluggable software device: Performs software rendering. This device was introduced with DirectX 9.0. Type: Determines the type of resource: surface, volume, texture, cube texture, volume texture, surface texture, index buffer or vertex buffer. Pool: Describes how the resource is managed by the runtime and where it is stored. In the Default pool the resource will exist only in device memory. Resources in the managed pool will be stored in system memory, and will be sent to the device when required. Resources in system memory pool will only exist in system memory. Finally, the scratch pool is basically the same as the system memory pool, but resources are not bound by hardware restrictions. Format: Describes the layout of the resource data in memory. For example, D3DFMT_R8G8B8 format value means a 24 bits colour depth (8 bits for red, 8 bits for green and 8 bits for blue). Usage: Describes, with a collection of flag bits, how the resource will be used by the application. These flags dictate which resources are used in dynamic or static access patterns. Static resource values don’t change after being loaded, whereas dynamic resource values may be modified. Fullscreen mode: The Direct3D application generates all of the graphical output for a display device. In this mode Direct3D automatically captures Alt-Tab and sets/restores screen resolution and pixel format without the programmer intervention. This also provides plenty of problems for debugging due to the 'Exclusive Cooperative Mode'. Windowed mode: The result is shown inside the area of a window. Direct3D communicates with GDI to generate the graphical output in the display. Windowed mode can have the same level of performance as full-screen, depending on driver support. Input Assembler: Reads in vertex data from an application supplied vertex buffer and feeds them down the pipeline. Vertex Shader: Performs operations on a single vertex at a time, such as transformations, skinning, or lighting. Hull Shader: Performs operations on sets of patch control points, and generates additional data known as patch constants. Tesselation stage: Subdivides geometry to create higher-order representations of the hull. Domain Shader: Performs operations on vertices output by the tessellation stage, in much the same way as a vertex shader. Geometry Shader: Processes entire primitives such as triangles, points, or lines. Given a primitive, this stage discards it, or generates one or more new primitives. Stream Output: Can write out the previous stage's results to memory. This is useful to recirculate data back into the pipeline. Rasterizer: Converts primitives into pixels, feeding these pixels into the pixel shader. The Rasterizer may also perform other tasks such as clipping what is not visible, or interpolating vertex data into per-pixel data. Pixel Shader: Determines the final pixel colour to be written to the render target and can also calculate a depth value to be written to the depth buffer. Output Merger: Merges various types of output data (pixel shader values, alpha blending, depth/stencil...) to build the final result. major mandatory features (Direct3D 11.0, 12), a few minor features (Direct3D 10.1, 11.1, 12), or a common set of previously optional features (Direct3D 11.0 "10 level 9"). Windows SDK and Visual Studio A large part of the math library has been removed. Microsoft recommends use of the DirectX Math library instead. Spherical harmonics math has been removed and is now distributed as source. The Effect framework has been removed and is now distributed as source via CodePlex. The Mesh interface and geometry functions have been removed and are now distributed as source via CodePlex under DirectXMesh geometry processing library. Texture functions have been removed and are now distributed as source via CodePlex under DirectXTex texture processing library. General helpers have been removed and are now distributed as source via CodePlex under DirectX Tool Kit (DirectXTK) project. The isochart texture atlas has been removed and is now distributed as source via CodePlex under UVAtlas project. HLSL – High Level Shader Language DirectX – Collection of APIs in which Direct3D is implemented OpenGL – Main competitor of Direct3D Mantle (API) Vulkan (API) Metal (API) DirectDraw 3D computer graphics Shader Silverlight DirectX website MSDN: DirectX Graphics and Gaming DirectX 10: The Future of PC Gaming Technical article discussing the new features of DirectX 10 and their impact on computer games
