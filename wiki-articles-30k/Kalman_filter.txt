 Kalman filtering, also known as linear quadratic estimation (LQE), is an algorithm that uses a series of measurements observed over time, containing statistical noise and other inaccuracies, and produces estimates of unknown variables that tend to be more precise than those based on a single measurement alone. The filter is named after Rudolf E. Kálmán, one of the primary developers of its theory. The Kalman filter has numerous applications in technology. A common application is for guidance, navigation and control of vehicles, particularly aircraft and spacecraft. Furthermore, the Kalman filter is a widely applied concept in time series analysis used in fields such as signal processing and econometrics. Kalman filters also are one of the main topics in the field of robotic motion planning and control, and they are sometimes included in trajectory optimization. The algorithm works in a two-step process. In the prediction step, the Kalman filter produces estimates of the current state variables, along with their uncertainties. Once the outcome of the next measurement (necessarily corrupted with some amount of error, including random noise) is observed, these estimates are updated using a weighted average, with more weight being given to estimates with higher certainty. The algorithm is recursive. It can run in real time, using only the present input measurements and the previously calculated state and its uncertainty matrix; no additional past information is required. The Kalman filter does not require any assumption that the errors are Gaussian. However, the filter yields the exact conditional probability estimate in the special case that all errors are Gaussian-distributed. Extensions and generalizations to the method have also been developed, such as the extended Kalman filter and the unscented Kalman filter which work on nonlinear systems. The underlying model is a Bayesian model similar to a hidden Markov model but where the state space of the latent variables is continuous and where all latent and observed variables have Gaussian distributions. The filter is named after Hungarian émigré Rudolf E. Kálmán, although Thorvald Nicolai ThieleSteffen L. Lauritzen. "Time series analysis in 1880. A discussion of contributions made by T.N. Thiele". International Statistical Review 49, 1981, 319–333. Steffen L. Lauritzen, Thiele: Pioneer in Statistics, Oxford University Press, 2002. ISBN 0-19-850972-3. and Peter Swerling developed a similar algorithm earlier.  Richard S. Bucy of the University of Southern California contributed to the theory, leading to it often being called the Kalman–Bucy filter. Stanley F. Schmidt is generally credited with developing the first implementation of a Kalman filter. He realized that the filter could be divided into two distinct parts, with one part for time periods between sensor outputs and another part for incorporating measurements.Mohinder S. Grewal and Angus P. Andrews It was during a visit by Kálmán to the NASA Ames Research Center that he saw the applicability of his ideas to the problem of trajectory estimation for the Apollo program, leading to its incorporation in the Apollo navigation computer. This Kalman filter was first described and partially developed in technical papers by Swerling (1958), Kalman (1960) and Kalman and Bucy (1961). Kalman filters have been vital in the implementation of the navigation systems of U.S. Navy nuclear ballistic missile submarines, and in the guidance and navigation systems of cruise missiles such as the U.S. Navy's Tomahawk missile and the U.S. Air Force's Air Launched Cruise Missile. It is also used in the guidance and navigation systems of the NASA Space Shuttle and the attitude control  and navigation systems of the International Space Station. This digital filter is sometimes called the Stratonovich–Kalman–Bucy filter because it is a special case of a more general, non-linear filter developed somewhat earlier by the Soviet mathematician Ruslan Stratonovich.Stratonovich, R. L. (1959). Optimum nonlinear systems which bring about a separation of a signal with constant parameters from noise. Radiofizika, 2:6, pp.&nbsp;892–901.Stratonovich, R. L. (1959). On the theory of optimal non-linear filtering of random functions. Theory of Probability and its Applications, 4, pp.&nbsp;223–225.Stratonovich, R. L. (1960) Application of the Markov processes theory to optimal filtering. Radio Engineering and Electronic Physics, 5:11, pp.&nbsp;1–19.Stratonovich, R. L. (1960). Conditional Markov Processes. Theory of Probability and its Applications, 5, pp.&nbsp;156–178. In fact, some of the special case linear filter's equations appeared in these papers by Stratonovich that were published before summer 1960, when Kalman met with Stratonovich during a conference in Moscow. The Kalman filter uses a system's dynamics model (e.g., physical laws of motion), known control inputs to that system, and multiple sequential measurements (such as from sensors) to form an estimate of the system's varying quantities (its state) that is better than the estimate obtained by using any one measurement alone. As such, it is a common sensor fusion and data fusion algorithm. All measurements and calculations based on models are estimated to some degree. Noisy sensor data, approximations in the equations that describe how a system changes, and external factors that are not accounted for introduce some uncertainty about the inferred values for a system's state. The Kalman filter averages a prediction of a system's state with a new measurement using a weighted average. The purpose of the weights is that values with better (i.e., smaller) estimated uncertainty are "trusted" more.  The weights are calculated from the covariance, a measure of the estimated uncertainty of the prediction of the system's state. The result of the weighted average is a new state estimate that lies between the predicted and measured state, and has a better estimated uncertainty than either alone. This process is repeated every time step, with the new estimate and its covariance informing the prediction used in the following iteration. This means that the Kalman filter works recursively and requires only the last "best guess", rather than the entire history, of a system's state to calculate a new state. Because the certainty of the measurements is often difficult to measure precisely, it is common to discuss the filter's behavior in terms of gain.  The Kalman gain is a function of the relative certainty of the measurements and current state estimate, and can be "tuned" to achieve particular performance. With a high gain, the filter places more weight on the measurements, and thus follows them more closely. With a low gain, the filter follows the model predictions more closely, smoothing out noise but decreasing the responsiveness.  At the extremes, a gain of one causes the filter to ignore the state estimate entirely, while a gain of zero causes the measurements to be ignored. When performing the actual calculations for the filter (as discussed below), the state estimate and covariances are coded into matrices to handle the multiple dimensions involved in a single set of calculations. This allows for a representation of linear relationships between different state variables (such as position, velocity, and acceleration) in any of the transition models or covariances. As an example application, consider the problem of determining the precise location of a truck. The truck can be equipped with a GPS unit that provides an estimate of the position within a few meters. The GPS estimate is likely to be noisy; readings 'jump around' rapidly, though always remaining within a few meters of the real position. In addition, since the truck is expected to follow the laws of physics, its position can also be estimated by integrating its velocity over time, determined by keeping track of wheel revolutions and the angle of the steering wheel. This is a technique known as dead reckoning. Typically, the dead reckoning will provide a very smooth estimate of the truck's position, but it will drift over time as small errors accumulate. In this example, the Kalman filter can be thought of as operating in two distinct phases: predict and update. In the prediction phase, the truck's old position will be modified according to the physical laws of motion (the dynamic or "state transition" model) plus any changes produced by the accelerator pedal and steering wheel. Not only will a new position estimate be calculated, but a new covariance will be calculated as well. Perhaps the covariance is proportional to the speed of the truck because we are more uncertain about the accuracy of the dead reckoning position estimate at high speeds but very certain about the position estimate when moving slowly. Next, in the update phase, a measurement of the truck's position is taken from the GPS unit. Along with this measurement comes some amount of uncertainty, and its covariance relative to that of the prediction from the previous phase determines how much the new measurement will affect the updated prediction. Ideally, if the dead reckoning estimates tend to drift away from the real position, the GPS measurement should pull the position estimate back towards the real position but not disturb it to the point of becoming rapidly changing and noisy. The Kalman filter is an efficient recursive filter that estimates the internal state of a linear dynamic system from a series of noisy measurements.  It is used in a wide range of engineering and econometric applications from radar and computer vision to estimation of structural macroeconomic models, and is an important topic in control theory and control systems engineering.  Together with the linear-quadratic regulator (LQR), the Kalman filter solves the linear-quadratic-Gaussian control problem (LQG).  The Kalman filter, the linear-quadratic regulator and the linear-quadratic-Gaussian controller are solutions to what arguably are the most fundamental problems in control theory. In most applications, the internal state is much larger (more degrees of freedom) than the few "observable" parameters which are measured.  However, by combining a series of measurements, the Kalman filter can estimate the entire internal state. In Dempster–Shafer theory, each state equation or observation is considered a special case of a linear belief function and the Kalman filter is a special case of combining linear belief functions on a join-tree or Markov tree. Additional approaches include belief filters which use Bayes or evidential updates to the state equations. A wide variety of Kalman filters have now been developed, from Kalman's original formulation, now called the "simple" Kalman filter, the Kalman–Bucy filter, Schmidt's "extended" filter, the information filter, and a variety of "square-root" filters that were developed by Bierman, Thornton and many others. Perhaps the most commonly used type of very simple Kalman filter is the phase-locked loop, which is now ubiquitous in radios, especially frequency modulation (FM) radios, television sets, satellite communications receivers, outer space communications systems, and nearly any other electronic communications equipment. The Kalman filters are based on linear dynamic systems discretized in the time domain. They are modelled on a Markov chain built on linear operators perturbed by errors that may include Gaussian noise. The state of the system is represented as a vector of real numbers. At each discrete time increment, a linear operator is applied to the state to generate the new state, with some noise mixed in, and optionally some information from the controls on the system if they are known. Then, another linear operator mixed with more noise generates the observed outputs from the true ("hidden") state. The Kalman filter may be regarded as analogous to the hidden Markov model, with the key difference that the hidden state variables take values in a continuous space (as opposed to a discrete state space as in the hidden Markov model). There is a strong duality between the equations of the Kalman Filter and those of the hidden Markov model. A review of this and other models is given in Roweis and Ghahramani (1999) and Hamilton (1994), Chapter 13.Hamilton, J. (1994), Time Series Analysis, Princeton University Press. Chapter 13, 'The Kalman Filter'. In order to use the Kalman filter to estimate the internal state of a process given only a sequence of noisy observations, one must model the process in accordance with the framework of the Kalman filter. This means specifying the following matrices: Fk, the state-transition model; Hk, the observation model; Qk, the covariance of the process noise; Rk, the covariance of the observation noise; and sometimes Bk, the control-input model, for each time-step, k, as described below. The Kalman filter model assumes the true state at time k is evolved from the state at (k&nbsp;−&nbsp;1) according to  \mathbf{x}_{k} = \mathbf{F}_{k} \mathbf{x}_{k-1} + \mathbf{B}_{k} \mathbf{u}_{k} + \mathbf{w}_{k}  where \mathbf{w}_k \sim \mathcal{N}(0, \mathbf{Q}_k)  At time k an observation (or measurement) zk of the true state xk is made according to \mathbf{z}_k = \mathbf{H}_{k} \mathbf{x}_k + \mathbf{v}_k where Hk is the observation model which maps the true state space into the observed space and vk is the observation noise which is assumed to be zero mean Gaussian white noise with covariance Rk. \mathbf{v}_k \sim \mathcal{N}(0, \mathbf{R}_k)  The initial state, and the noise vectors at each step {x0, w1, …, wk,  v1 … vk} are all assumed to be mutually independent. Many real dynamical systems do not exactly fit this model. In fact, unmodelled dynamics can seriously degrade the filter performance, even when it was supposed to work with unknown stochastic signals as inputs. The reason for this is that the effect of unmodelled dynamics depends on the input, and, therefore, can bring the estimation algorithm to instability (it diverges). On the other hand, independent white noise signals will not make the algorithm diverge. The problem of separating between measurement noise and unmodelled dynamics is a difficult one and is treated in control theory under the framework of robust control. The Kalman filter is a recursive estimator. This means that only the estimated state from the previous time step and the current measurement are needed to compute the estimate for the current state. In contrast to batch estimation techniques, no history of observations and/or estimates is required. In what follows, the notation \hat{\mathbf{x}}_{n\mid m} represents the estimate of \mathbf{x} at time n given observations up to, and including at time m ≤ n. The state of the filter is represented by two variables: The Kalman filter can be written as a single equation, however it is most often conceptualized as two distinct phases: "Predict" and "Update". The predict phase uses the state estimate from the previous timestep to produce an estimate of the state at the current timestep. This predicted state estimate is also known as the a priori state estimate because, although it is an estimate of the state at the current timestep, it does not include observation information from the current timestep.  In the update phase, the current a priori prediction is combined with current observation information to refine the state estimate.  This improved estimate is termed the a posteriori state estimate. Typically, the two phases alternate, with the prediction advancing the state until the next scheduled observation, and the update incorporating the observation.  However, this is not necessary; if an observation is unavailable for some reason, the update may be skipped and multiple prediction steps performed.  Likewise, if multiple independent observations are available at the same time, multiple update steps may be performed (typically with different observation matrices Hk). 2006 Corrected Version The formula for the updated estimate covariance above is only valid for the optimal Kalman gain. Usage of other gain values requires a more complex formula found in the derivations section. If the model is accurate, and the values for \hat{\mathbf{x}}_{0\mid 0} and \mathbf{P}_{0\mid 0} accurately reflect the distribution of the initial state values, then the following invariants are preserved: (all estimates have a mean error of zero) where \textrm{E}[\xi] is the expected value of \xi, and covariance matrices accurately reflect the covariance of estimates It follows from theory that the Kalman filter is optimal in cases where a) the model perfectly matches the real system, b) the entering noise is white and c) the covariances of the noise are exactly known. Several methods for the noise covariance estimation have been proposed during past decades. After the covariances are estimated, it is useful to evaluate the performance of the filter, i.e. whether it is possible to improve the state estimation quality. If the Kalman filter works optimally, the innovation sequence (the output prediction error) is a white noise, therefore the whiteness property of the innovations measures filter performance. Several different methods can be used for this purpose.Three optimality tests with numerical examples are described in    Consider a truck on frictionless, straight rails. Initially, the truck is stationary at position 0, but it is buffeted this way and that by random uncontrolled forces. We measure the position of the truck every Δt seconds, but these measurements are imprecise; we want to maintain a model of where the truck is and what its velocity is. We show here how we derive the model from which we create our Kalman filter. Since \mathbf F, \mathbf H, \mathbf R, \mathbf Q are constant, their time indices are dropped. The position and velocity of the truck are described by the linear state space \mathbf{x}_{k} = \begin{bmatrix} x \\ \dot{x} \end{bmatrix}  where \dot{x} is the velocity, that is, the derivative of position with respect to time. We assume that between the (k&nbsp;−&nbsp;1) and k timestep uncontrolled forces cause a constant acceleration of ak that is normally distributed, with mean 0 and standard deviation σa. From Newton's laws of motion we conclude that \mathbf{x}_{k} = \mathbf{F} \mathbf{x}_{k-1} + \mathbf{G}a_{k} (note that there is no \mathbf{B}u term since we have no known control inputs. Instead, we assume that ak is the effect of an unknown input and \mathbf{G} applies that effect to the state vector) where \mathbf{F} = \begin{bmatrix} 1 & \Delta t \\ 0 & 1 \end{bmatrix} and \mathbf{G} = \begin{bmatrix} \frac{\Delta t^2}{2} \\[6pt] \Delta t \end{bmatrix}  so that \mathbf{x}_{k} = \mathbf{F} \mathbf{x}_{k-1} +  \mathbf{w}_{k} where \mathbf{w}_{k} \sim N(0,  \mathbf{Q}) and \mathbf{Q}=\mathbf{G}\mathbf{G}^{\text{T}}\sigma_a^2 =\begin{bmatrix} \frac{\Delta t^4}{4} & \frac{\Delta t^3}{2} \\[6pt] \frac{\Delta t^3}{2} & \Delta t^2 \end{bmatrix}\sigma_a^2. At each time step, a noisy measurement of the true position of the truck is made. Let us suppose the measurement noise vk is also normally distributed, with mean 0 and standard deviation σz. \mathbf{z}_{k} = \mathbf{H x}_{k} + \mathbf{v}_{k} where \mathbf{H} = \begin{bmatrix} 1 & 0 \end{bmatrix}  and \mathbf{R} = \textrm{E}[\mathbf{v}_k \mathbf{v}_k^{\text{T}}] = \begin{bmatrix} \sigma_z^2 \end{bmatrix}  We know the initial starting state of the truck with perfect precision, so we initialize \hat{\mathbf{x}}_{0\mid 0} = \begin{bmatrix} 0 \\ 0 \end{bmatrix}  and to tell the filter that we know the exact position and velocity, we give it a zero covariance matrix: \mathbf{P}_{0\mid 0} = \begin{bmatrix} 0 & 0 \\ 0 & 0 \end{bmatrix}  If the initial position and velocity are not known perfectly the covariance matrix should be initialized with a suitably large number, say L, on its diagonal. \mathbf{P}_{0\mid 0} = \begin{bmatrix} L & 0 \\ 0 & L \end{bmatrix}  The filter will then prefer the information from the first measurements over the information already in the model. Starting with our invariant on the error covariance Pk&nbsp;|&nbsp;k as above \mathbf{P}_{k\mid k}  = \mathrm{cov}(\mathbf{x}_{k} - \hat{\mathbf{x}}_{k\mid k}) substitute in the definition of \hat{\mathbf{x}}_{k\mid k} \mathbf{P}_{k\mid k} = \textrm{cov}(\mathbf{x}_{k} - (\hat{\mathbf{x}}_{k\mid k-1} + \mathbf{K}_k\tilde{\mathbf{y}}_{k})) and substitute  \tilde{\mathbf{y}}_k \mathbf{P}_{k\mid k} = \textrm{cov}(\mathbf{x}_{k} - (\hat{\mathbf{x}}_{k\mid k-1} + \mathbf{K}_k(\mathbf{z}_k - \mathbf{H}_k\hat{\mathbf{x}}_{k\mid k-1}))) and \mathbf{z}_{k} \mathbf{P}_{k\mid k} = \textrm{cov}(\mathbf{x}_{k} - (\hat{\mathbf{x}}_{k\mid k-1} + \mathbf{K}_k(\mathbf{H}_k\mathbf{x}_k + \mathbf{v}_k - \mathbf{H}_k\hat{\mathbf{x}}_{k\mid k-1}))) and by collecting the error vectors we get \mathbf{P}_{k|k} = \textrm{cov}((I - \mathbf{K}_k \mathbf{H}_{k})(\mathbf{x}_k - \hat{\mathbf{x}}_{k\mid k-1}) - \mathbf{K}_k \mathbf{v}_k ) Since the measurement error vk is uncorrelated with the other terms, this becomes \mathbf{P}_{k|k} = \textrm{cov}((I - \mathbf{K}_k \mathbf{H}_{k})(\mathbf{x}_k - \hat{\mathbf{x}}_{k\mid k-1}))  + \textrm{cov}(\mathbf{K}_k \mathbf{v}_k ) by the properties of vector covariance this becomes \mathbf{P}_{k\mid k} = (I - \mathbf{K}_k \mathbf{H}_{k})\textrm{cov}(\mathbf{x}_k - \hat{\mathbf{x}}_{k\mid k-1})(I - \mathbf{K}_k \mathbf{H}_{k})^{\text{T}}  + \mathbf{K}_k\textrm{cov}(\mathbf{v}_k )\mathbf{K}_k^{\text{T}} which, using our invariant on Pk&nbsp;|&nbsp;k−1 and the definition of Rk becomes \mathbf{P}_{k\mid k} = (I - \mathbf{K}_k \mathbf{H}_{k}) \mathbf{P}_{k\mid k-1} (I - \mathbf{K}_k \mathbf{H}_{k})^\text{T} + \mathbf{K}_k \mathbf{R}_k \mathbf{K}_k^\text{T}  This formula (sometimes known as the "Joseph form" of the covariance update equation) is valid for any value of Kk. It turns out that if Kk is the optimal Kalman gain, this can be simplified further as shown below. The Kalman filter is a minimum mean-square error estimator. The error in the a posteriori state estimation is \mathbf{x}_{k} - \hat{\mathbf{x}}_{k\mid k} We seek to minimize the expected value of the square of the magnitude of this vector, \textrm{E}[\|\mathbf{x}_{k} - \hat{\mathbf{x}}_{k|k}\|^2]. This is equivalent to minimizing the trace of the a posteriori estimate covariance matrix  \mathbf{P}_{k|k} . By expanding out the terms in the equation above and collecting, we get:  \begin{align} \mathbf{P}_{k\mid k} & = \mathbf{P}_{k\mid k-1} - \mathbf{K}_k \mathbf{H}_k \mathbf{P}_{k\mid k-1} - \mathbf{P}_{k\mid k-1} \mathbf{H}_k^\text{T} \mathbf{K}_k^\text{T} + \mathbf{K}_k (\mathbf{H}_k \mathbf{P}_{k\mid k-1} \mathbf{H}_k^\text{T} + \mathbf{R}_k) \mathbf{K}_k^\text{T} \\[6pt] & = \mathbf{P}_{k\mid k-1} - \mathbf{K}_k \mathbf{H}_k \mathbf{P}_{k\mid k-1} - \mathbf{P}_{k\mid k-1} \mathbf{H}_k^\text{T} \mathbf{K}_k^\text{T} + \mathbf{K}_k \mathbf{S}_k\mathbf{K}_k^\text{T} \end{align}  The trace is minimized when its matrix derivative with respect to the gain matrix is zero. Using the gradient matrix rules and the symmetry of the matrices involved we find that \frac{\partial \; \mathrm{tr}(\mathbf{P}_{k\mid k})}{\partial \;\mathbf{K}_k} = -2 (\mathbf{H}_k \mathbf{P}_{k\mid k-1})^\text{T} + 2 \mathbf{K}_k \mathbf{S}_k  = 0. Solving this for Kk yields the Kalman gain: \mathbf{K}_k \mathbf{S}_k = (\mathbf{H}_k \mathbf{P}_{k\mid k-1})^\text{T} = \mathbf{P}_{k\mid k-1} \mathbf{H}_k^\text{T}  \mathbf{K}_{k} = \mathbf{P}_{k\mid k-1} \mathbf{H}_k^\text{T} \mathbf{S}_k^{-1} This gain, which is known as the optimal Kalman gain, is the one that yields MMSE estimates when used. The formula used to calculate the a posteriori error covariance can be simplified when the Kalman gain equals the optimal value derived above. Multiplying both sides of our Kalman gain formula on the right by SkKkT, it follows that \mathbf{K}_k \mathbf{S}_k \mathbf{K}_k^\mathrm{T} = \mathbf{P}_{k\mid k-1} \mathbf{H}_k^\mathrm{T} \mathbf{K}_k^\mathrm{T} Referring back to our expanded formula for the a posteriori error covariance,  \mathbf{P}_{k\mid k} = \mathbf{P}_{k\mid k-1} - \mathbf{K}_k \mathbf{H}_k \mathbf{P}_{k\mid k-1}  - \mathbf{P}_{k\mid k-1} \mathbf{H}_k^\mathrm{T} \mathbf{K}_k^\mathrm{T} + \mathbf{K}_k \mathbf{S}_k \mathbf{K}_k^\mathrm{T} we find the last two terms cancel out, giving  \mathbf{P}_{k\mid k} = \mathbf{P}_{k\mid k-1} - \mathbf{K}_k \mathbf{H}_k \mathbf{P}_{k\mid k-1} = (I - \mathbf{K}_{k} \mathbf{H}_{k}) \mathbf{P}_{k\mid k-1}. This formula is computationally cheaper and thus nearly always used in practice, but is only correct for the optimal gain. If arithmetic precision is unusually low causing problems with numerical stability, or if a non-optimal Kalman gain is deliberately used, this simplification cannot be applied; the a posteriori error covariance formula as derived above (Joseph form) must be used. The Kalman filtering equations provide an estimate of the state \hat{\mathbf{x}}_{k\mid k} and its error covariance \mathbf{P}_{k\mid k} recursively. The estimate and its quality depend on the system parameters and the noise statistics fed as inputs to the estimator. This section analyzes the effect of uncertainties in the statistical inputs to the filter. In the absence of reliable statistics or the true values of noise covariance matrices \mathbf{Q}_{k} and \mathbf{R}_{k}, the expression \mathbf{P}_{k\mid k} = (\mathbf{I} - \mathbf{K}_k\mathbf{H}_k)\mathbf{P}_{k\mid k-1}(\mathbf{I} - \mathbf{K}_k\mathbf{H}_k)^\mathrm{T} + \mathbf{K}_k\mathbf{R}_k\mathbf{K}_k^\mathrm{T}  no longer provides the actual error covariance. In other words, \mathbf{P}_{k\mid k} \neq E[(\mathbf{x}_k - \hat{\mathbf{x}}_{k\mid k})(\mathbf{x}_k - \hat{\mathbf{x}}_{k\mid k})^\mathrm{T}].  In most real-time applications, the covariance matrices that are used in designing the Kalman filter are different from the actual (true) noise covariances matrices. This sensitivity analysis describes the behavior of the estimation error covariance when the noise covariances as well as the system matrices \mathbf{F}_{k} and \mathbf{H}_{k} that are fed as inputs to the filter are incorrect. Thus, the sensitivity analysis describes the robustness (or sensitivity) of the estimator to misspecified statistical and parametric inputs to the estimator. This discussion is limited to the error sensitivity analysis for the case of statistical uncertainties. Here the actual noise covariances are denoted by \mathbf{Q}^{a}_k and \mathbf{R}^{a}_k respectively, whereas the design values used in the estimator are \mathbf{Q}_k and \mathbf{R}_k respectively. The actual error covariance is denoted by \mathbf{P}_{k\mid k}^a and \mathbf{P}_{k\mid k} as computed by the Kalman filter is referred to as the Riccati variable. When \mathbf{Q}_k \equiv \mathbf{Q}^{a}_k and \mathbf{R}_k \equiv \mathbf{R}^{a}_k, this means that \mathbf{P}_{k\mid k} = \mathbf{P}_{k\mid k}^a. While computing the actual error covariance using \mathbf{P}_{k\mid k}^a = E[(\mathbf{x}_k - \hat{\mathbf{x}}_{k\mid k})(\mathbf{x}_k - \hat{\mathbf{x}}_{k\mid k})^\mathrm{T}] , substituting for \widehat{\mathbf{x}}_{k\mid k} and using the fact that E[\mathbf{w}_k\mathbf{w}_k^\mathrm{T}] = \mathbf{Q}_{k}^a and E[\mathbf{v}_k\mathbf{v}_k^\mathrm{T}] = \mathbf{R}_{k}^a, results in the following recursive equations for \mathbf{P}_{k\mid k}^a : \mathbf{P}_{k\mid k-1}^a = \mathbf{F}_k\mathbf{P}_{k-1\mid k-1}^a\mathbf{F}_k^\mathrm{T} + \mathbf{Q}_k^a  and \mathbf{P}_{k\mid k}^a = (\mathbf{I} - \mathbf{K}_k\mathbf{H}_k)\mathbf{P}_{k\mid k-1}^a(\mathbf{I} - \mathbf{K}_k\mathbf{H}_k)^\mathrm{T} + \mathbf{K}_k\mathbf{R}_k^a\mathbf{K}_k^\mathrm{T}  While computing \mathbf{P}_{k\mid k}, by design the filter implicitly assumes that E[\mathbf{w}_k\mathbf{w}_k^\mathrm{T}] = \mathbf{Q}_{k} and E[\mathbf{v}_k\mathbf{v}_k^\mathrm{T}] = \mathbf{R}_{k}. Note that the recursive expressions for \mathbf{P}_{k\mid k}^a and \mathbf{P}_{k\mid k} are identical except for the presence of \mathbf{Q}_{k}^a and \mathbf{R}_{k}^a in place of the design values \mathbf{Q}_{k} and \mathbf{R}_{k} respectively. One problem with the Kalman filter is its numerical stability.  If the process noise covariance Qk is small, round-off error often causes a small positive eigenvalue to be computed as a negative number.  This renders the numerical representation of the state covariance matrix P indefinite, while its true form is positive-definite. Positive definite matrices have the property that they have a triangular matrix square root P&nbsp;=&nbsp;S·ST.  This can be computed efficiently using the Cholesky factorization algorithm, but more importantly, if the covariance is kept in this form, it can never have a negative diagonal or become asymmetric. An equivalent form, which avoids many of the square root operations required by the matrix square root yet preserves the desirable numerical properties, is the U-D decomposition form, P&nbsp;=&nbsp;U·D·UT, where U is a unit triangular matrix (with unit diagonal), and D is a diagonal matrix. Between the two, the U-D factorization uses the same amount of storage, and somewhat less computation, and is the most commonly used square root form.  (Early literature on the relative efficiency is somewhat misleading, as it assumed that square roots were much more time-consuming than divisions, while on 21-st century computers they are only slightly more expensive.) Efficient algorithms for the Kalman prediction and update steps in the square root form were developed by G. J. Bierman and C. L. Thornton. The L·D·LT decomposition of the innovation covariance matrix Sk is the basis for another type of numerically efficient and robust square root filter. The algorithm starts with the LU decomposition as implemented in the Linear Algebra PACKage (LAPACK). These results are further factored into the L·D·LT structure with methods given by Golub and Van Loan (algorithm 4.1.2) for a symmetric nonsingular matrix. Any singular covariance matrix is pivoted so that the first diagonal partition is nonsingular and well-conditioned. The pivoting algorithm must retain any portion of the innovation covariance matrix directly corresponding to observed state-variables Hk·xk|k-1 that are associated with auxiliary observations in yk. the l·d·lt square-root filter requires orthogonalization of the observation vector. This may be done with the inverse square-root of the covariance matrix for the auxiliary variables using Method 2 in Higham (2002, p.&nbsp;263). The Kalman filter can be presented as one of the simplest dynamic Bayesian networks. The Kalman filter calculates estimates of the true values of states recursively over time using incoming measurements and a mathematical process model. Similarly, recursive Bayesian estimation calculates estimates of an unknown probability density function (PDF) recursively over time using incoming measurements and a mathematical process model. In recursive Bayesian estimation, the true state is assumed to be an unobserved Markov process, and the measurements are the observed states of a hidden Markov model (HMM). because of the Markov assumption, the true state is conditionally independent of all earlier states given the immediately previous state. p(\textbf{x}_k\mid \textbf{x}_0,\dots,\textbf{x}_{k-1}) = p(\textbf{x}_k\mid \textbf{x}_{k-1}) Similarly, the measurement at the k-th timestep is dependent only upon the current state and is conditionally independent of all other states given the current state. p(\textbf{z}_k\mid\textbf{x}_0,\dots,\textbf{x}_{k}) = p(\textbf{z}_k\mid \textbf{x}_{k} ) Using these assumptions the probability distribution over all states of the hidden Markov model can be written simply as: p(\textbf{x}_0,\dots,\textbf{x}_k, \textbf{z}_1,\dots,\textbf{z}_k) = p(\textbf{x}_0)\prod_{i=1}^k p(\textbf{z}_i\mid \textbf{x}_i)p(\textbf{x}_i\mid \textbf{x}_{i-1}) However, when the Kalman filter is used to estimate the state x, the probability distribution of interest is that associated with the current states conditioned on the measurements up to the current timestep. This is achieved by marginalizing out the previous states and dividing by the probability of the measurement set. This leads to the predict and update steps of the Kalman filter written probabilistically. The probability distribution associated with the predicted state is the sum (integral) of the products of the probability distribution associated with the transition from the (k&nbsp;−&nbsp;1)-th timestep to the k-th and the probability distribution associated with the previous state, over all possible x_{k-1}.  p(\textbf{x}_k\mid \textbf{Z}_{k-1}) = \int p(\textbf{x}_k \mid  \textbf{x}_{k-1}) p(\textbf{x}_{k-1} \mid  \textbf{Z}_{k-1} )  \, d\textbf{x}_{k-1}  The measurement set up to time t is  \textbf{Z}_{t} = \left \{ \textbf{z}_{1},\dots,\textbf{z}_{t} \right \}  The probability distribution of the update is proportional to the product of the measurement likelihood and the predicted state.  p(\textbf{x}_k\mid \textbf{Z}_{k}) = \frac{p(\textbf{z}_k\mid \textbf{x}_k) p(\textbf{x}_k\mid \textbf{Z}_{k-1})}{p(\textbf{z}_k\mid \textbf{Z}_{k-1})}  The denominator p(\textbf{z}_k\mid \textbf{Z}_{k-1}) = \int p(\textbf{z}_k\mid \textbf{x}_k) p(\textbf{x}_k\mid \textbf{Z}_{k-1}) d\textbf{x}_k is a normalization term. The remaining probability density functions are  p(\textbf{x}_k \mid  \textbf{x}_{k-1}) = \mathcal{N}(\textbf{F}_k\textbf{x}_{k-1}, \textbf{Q}_k)  p(\textbf{z}_k\mid \textbf{x}_k) = \mathcal{N}(\textbf{H}_{k}\textbf{x}_k, \textbf{R}_k)   p(\textbf{x}_{k-1}\mid \textbf{Z}_{k-1}) = \mathcal{N}(\hat{\textbf{x}}_{k-1},\textbf{P}_{k-1} ) Note that the PDF at the previous timestep is inductively assumed to be the estimated state and covariance. This is justified because, as an optimal estimator, the Kalman filter makes best use of the measurements, therefore the PDF for \mathbf{x}_k  given the measurements \mathbf{Z}_k is the Kalman filter estimate. Related to the recursive Bayesian interpretation described above, the Kalman filter can be viewed as a generative model, i.e., a process for generating a stream of random observations z = (z0, z1, z2, …). Specifically, the process is Note that this process has identical structure to the hidden Markov model, except that the discrete state and observations are replaced with continuous variables sampled from Gaussian distributions. In some applications, it is useful to compute the probability that a Kalman filter with a given set of parameters (prior distribution, transition and observation models, and control inputs) would generate a particular observed signal. This probability is known as the marginal likelihood because it integrates over ("marginalizes out") the values of the hidden state variables, so it can be computed using only the observed signal. The marginal likelihood can be useful to evaluate different parameter choices, or to compare the Kalman filter against other models using Bayesian model comparison. It is straightforward to compute the marginal likelihood as a side effect of the recursive filtering computation. By the chain rule, the likelihood can be factored as the product of the probability of each observation given previous observations, p(\mathbf{z}) = \prod_{k=0}^T p(\mathbf{z}_k \mid \mathbf{z}_{k-1}, \ldots,\mathbf{z}_0), and because the Kalman filter describes a Markov process, all relevant information from previous observations is contained in the current state estimate \hat{\mathbf{x}}_{k\mid k-1}, \mathbf{P}_{k\mid k-1}. Thus the marginal likelihood is given by \begin{align} p(\mathbf{z}) &= \prod_{k=0}^T \int p(\mathbf{z}_k \mid \mathbf{x}_k ) p(\mathbf{x}_k \mid \mathbf{z}_{k-1}, \ldots,\mathbf{z}_0 ) d \mathbf{x}_k\\ &= \prod_{k=0}^T \int \mathcal{N}(\mathbf{z}_k;  \mathbf{H}_k\mathbf{x}_k, \mathbf{R}_k) \mathcal{N}(\mathbf{x}_k;  \hat{\mathbf{x}}_{k\mid k-1}, \mathbf{P}_{k\mid k-1})  d \mathbf{x}_k\\ &= \prod_{k=0}^T \mathcal{N}(\mathbf{z}_k;  \mathbf{H}_k\hat{\mathbf{x}}_{k\mid k-1}, \mathbf{R}_k + \mathbf{H}_k \mathbf{P}_{k\mid k-1} \mathbf{H}_k^T )\\ &= \prod_{k=0}^T \mathcal{N}(\mathbf{z}_k;  \mathbf{H}_k\hat{\mathbf{x}}_{k\mid k-1}, \mathbf{S}_k), \end{align} i.e., a product of Gaussian densities, each corresponding to the density of one observation zk under the current filtering distribution \mathbf{H}_k\hat{\mathbf{x}}_{k\mid k-1}, \mathbf{S}_k. This can easily be computed as a simple recursive update; however, to avoid numeric underflow, in a practical implementation it is usually desirable to compute the log marginal likelihood \ell = \log p(\mathbf{z}) instead. Adopting the convention \ell^{(-1)} = 0, this can be done via the recursive update rule \ell^{(k)} = \ell^{(k-1)} - \frac{1}{2} \left(\tilde{\mathbf{y}}_k^T \mathbf{S}^{-1}_k \tilde{\mathbf{y}}_k + \log \left|\mathbf{S}_k\right| + d_{y}\log 2\pi \right), where d_y is the dimension of the measurement vector.  An important application where such a (log) likelihood of the observations (given the filter parameters) is used is multi-target tracking. For example, consider an object tracking scenario where a stream of observations is the input, however, it is unknown how many objects are in the scene (or, the number of objects is known but is greater than one). In such a scenario, it can be unknown apriori which observations/measurements were generated by which object. A multiple hypothesis tracker (MHT) typically will form different track association hypotheses, where each hypothesis can be viewed as a Kalman filter (in the linear Gaussian case) with a specific set of parameters associated with the hypothesized object. Thus, it is important to compute the likelihood of the observations for the different hypotheses under consideration, such that the most-likely one can be found. In the information filter, or inverse covariance filter, the estimated covariance and estimated state are replaced by the information matrix and information vector respectively. These are defined as: \textbf{Y}_{k\mid k} =  \textbf{P}_{k\mid k}^{-1}  \hat{\textbf{y}}_{k\mid k} =  \textbf{P}_{k\mid k}^{-1}\hat{\textbf{x}}_{k\mid k}  Similarly the predicted covariance and state have equivalent information forms, defined as: \textbf{Y}_{k\mid k-1} =  \textbf{P}_{k\mid k-1}^{-1}  \hat{\textbf{y}}_{k\mid k-1} =  \textbf{P}_{k\mid k-1}^{-1}\hat{\textbf{x}}_{k\mid k-1}  as have the measurement covariance and measurement vector, which are defined as: \textbf{I}_{k} = \textbf{H}_{k}^{\text{T}} \textbf{R}_{k}^{-1} \textbf{H}_{k}  \textbf{i}_{k} = \textbf{H}_{k}^{\text{T}} \textbf{R}_{k}^{-1} \textbf{z}_{k}  The information update now becomes a trivial sum. \textbf{Y}_{k\mid k} = \textbf{Y}_{k\mid k-1} + \textbf{I}_{k} \hat{\textbf{y}}_{k\mid k} = \hat{\textbf{y}}_{k\mid k-1} + \textbf{i}_{k} The main advantage of the information filter is that N measurements can be filtered at each timestep simply by summing their information matrices and vectors. \textbf{Y}_{k\mid k} = \textbf{Y}_{k\mid k-1} + \sum_{j=1}^N \textbf{I}_{k,j} \hat{\textbf{y}}_{k\mid k} = \hat{\textbf{y}}_{k\mid k-1} + \sum_{j=1}^N \textbf{i}_{k,j} To predict the information filter the information matrix and vector can be converted back to their state space equivalents, or alternatively the information space prediction can be used. \textbf{M}_{k} =   [\textbf{F}_{k}^{-1}]^{\text{T}} \textbf{Y}_{k-1\mid k-1} \textbf{F}_{k}^{-1}  \textbf{C}_{k} =   \textbf{M}_{k} [\textbf{M}_{k}+\textbf{Q}_{k}^{-1}]^{-1} \textbf{L}_{k} =   I - \textbf{C}_{k}  \textbf{Y}_{k\mid k-1} =   \textbf{L}_{k} \textbf{M}_{k} \textbf{L}_{k}^{\text{T}} +   \textbf{C}_{k} \textbf{Q}_{k}^{-1} \textbf{C}_{k}^{\text{T}} \hat{\textbf{y}}_{k\mid k-1} =   \textbf{L}_{k} [\textbf{F}_{k}^{-1}]^{\text{T}}\hat{\textbf{y}}_{k-1\mid k-1}  Note that if F and Q are time invariant these values can be cached. Note also that F and Q need to be invertible. The optimal fixed-lag smoother provides the optimal estimate of \hat{\textbf{x}}_{k-N \mid  k} for a given fixed-lag N using the measurements from \textbf{z}_{1} to \textbf{z}_{k}. It can be derived using the previous theory via an augmented state, and the main equation of the filter is the following:   \begin{bmatrix}   \hat{\textbf{x}}_{t\mid t} \\   \hat{\textbf{x}}_{t-1\mid t} \\   \vdots \\   \hat{\textbf{x}}_{t-N+1\mid t} \\  \end{bmatrix}  =  \begin{bmatrix}   \textbf{I} \\   0 \\   \vdots \\   0 \\  \end{bmatrix}  \hat{\textbf{x}}_{t\mid t-1}  +  \begin{bmatrix}   0  & \ldots & 0 \\   \textbf{I} & 0  & \vdots \\   \vdots  & \ddots & \vdots \\   0  & \ldots & I \\  \end{bmatrix}  \begin{bmatrix}   \hat{\textbf{x}}_{t-1\mid t-1} \\   \hat{\textbf{x}}_{t-2\mid t-1} \\   \vdots \\   \hat{\textbf{x}}_{t-N+1\mid t-1} \\  \end{bmatrix}  +  \begin{bmatrix}   \textbf{K}^{(0)} \\   \textbf{K}^{(1)} \\   \vdots \\   \textbf{K}^{(N-1)} \\  \end{bmatrix}  \textbf{y}_{t\mid t-1}  where: : \textbf{K}^{(i)} = \textbf{P}^{(i)} \textbf{H}^{T} \left[  \textbf{H} \textbf{P} \textbf{H}^\mathrm{T} + \textbf{R} \right]^{-1}  and : \textbf{P}^{(i)} = \textbf{P} \left[  \left[   \textbf{F} - \textbf{K} \textbf{H}  \right]^{T} \right]^{i}  where  \textbf{P}  and  \textbf{K}  are the prediction error covariance and the gains of the standard Kalman filter (i.e.,  \textbf{P}_{t\mid t-1} ). If the estimation error covariance is defined so that  \textbf{P}_{i} := E \left[  \left(   \textbf{x}_{t-i} - \hat{\textbf{x}}_{t-i\mid t}  \right)^{*}  \left(   \textbf{x}_{t-i} - \hat{\textbf{x}}_{t-i\mid t}  \right)  \mid  z_{1} \ldots z_{t} \right],  then we have that the improvement on the estimation of  \textbf{x}_{t-i}  is given by:  \textbf{P}-\textbf{P}_{i} = \sum_{j = 0}^{i} \left[  \textbf{P}^{(j)} \textbf{H}^{T}  \left[  \textbf{H} \textbf{P} \textbf{H}^\mathrm{T} + \textbf{R}  \right]^{-1}  \textbf{H} \left( \textbf{P}^{(i)} \right)^\mathrm{T} \right]  The optimal fixed-interval smoother provides the optimal estimate of \hat{\textbf{x}}_{k \mid  n} (k < n</math>) using the measurements from a fixed interval <math>\textbf{z}_{1} to \textbf{z}_{n}. This is also called "Kalman Smoothing". There are several smoothing algorithms in common use. The Rauch–Tung–Striebel (RTS) smoother is an efficient two-pass algorithm for fixed interval smoothing. The forward pass is the same as the regular Kalman filter algorithm. These filtered a-priori and a-posteriori state estimates \hat{\textbf{x}}_{k\mid k-1}, \hat{\textbf{x}}_{k\mid k} and covariances \textbf{P}_{k\mid k-1}, \textbf{P}_{k\mid k} are saved for use in the backwards pass. In the backwards pass, we compute the smoothed state estimates \hat{\textbf{x}}_{k\mid n} and covariances \textbf{P}_{k\mid n}. We start at the last time step and proceed backwards in time using the following recursive equations: \hat{\textbf{x}}_{k\mid n} = \hat{\textbf{x}}_{k\mid k} + \textbf{C}_k ( \hat{\textbf{x}}_{k+1\mid n} - \hat{\textbf{x}}_{k+1\mid k} )  \textbf{P}_{k\mid n} = \textbf{P}_{k\mid k} + \textbf{C}_k ( \textbf{P}_{k+1\mid n} - \textbf{P}_{k+1\mid k} ) \textbf{C}_k^\mathrm{T}  where  \textbf{C}_k = \textbf{P}_{k\mid k} \textbf{F}_{k+1}^\mathrm{T} \textbf{P}_{k+1\mid k}^{-1} . Note that  \textbf{x}_{k\mid k} is the a-posteriori state estimate of timestep k and \mathbf{x}_{k+1\mid k} is the a-priori state estimate of timestep k+1. The same notation applies to the covariance. An alternative to the RTS algorithm is the modified Bryson–Frazier (MBF) fixed interval smoother developed by Bierman. This also uses a backward pass that processes data saved from the Kalman filter forward pass. The equations for the backward pass involve the recursive computation of data which are used at each observation time to compute the smoothed state and covariance. The recursive equations are \tilde{\Lambda}_k =  \textbf{H}_k^T \textbf{S}_k^{-1} \textbf{H}_k + \hat{\textbf{C}}_k^T \hat{\Lambda}_k \hat{\textbf{C}}_k \hat{\Lambda}_{k-1} = \textbf{F}_k^T\tilde{\Lambda}_{k}\textbf{F}_k \hat{\Lambda}_n = 0 \tilde{\lambda}_k =  -\textbf{H}_k^T \textbf{S}_k^{-1} \textbf{y}_k + \hat{\textbf{C}}_k^T \hat{\lambda}_k \hat{\lambda}_{k-1} = \textbf{F}_k^T\tilde{\lambda}_{k} \hat{\lambda}_n = 0 where \textbf{S}_k is the residual covariance and \hat{\textbf{C}}_k = \textbf{I} - \textbf{K}_k\textbf{H}_k. The smoothed state and covariance can then be found by substitution in the equations \textbf{P}_{k\mid n} = \textbf{P}_{k\mid k} - \textbf{P}_{k\mid k}\hat{\Lambda}_k\textbf{P}_{k\mid k} \textbf{x}_{k\mid n} = \textbf{x}_{k\mid k} - \textbf{P}_{k\mid k}\hat{\lambda}_k or \textbf{P}_{k\mid n} = \textbf{P}_{k\mid k-1} - \textbf{P}_{k\mid k-1}\tilde{\Lambda}_k\textbf{P}_{k\mid k-1} \textbf{x}_{k\mid n} = \textbf{x}_{k\mid k-1} - \textbf{P}_{k\mid k-1}\tilde{\lambda}_k. An important advantage of the MBF is that it does not require finding the inverse of the covariance matrix. The minimum-variance smoother can attain the best-possible error performance, provided that the models are linear, their parameters and the noise statistics are known precisely. This smoother is a time-varying state-space generalization of the optimal non-causal Wiener filter. The smoother calculations are done in two passes. The forward calculations involve a one-step-ahead predictor and are given by \hat{\textbf{x}}_{k+1\mid k} = \textbf{(F}_{k}-\textbf{K}_{k}\textbf{H}_{k})\hat{\textbf{x}}_{k\mid k-1} + \textbf{K}_{k} \textbf{z}_{k}   {\alpha}_{k} = -\textbf{S}_k^{-1/2} \textbf{H}_{k}\hat{\textbf{x}}_{k\mid k-1} + \textbf{S}_k^{-1/2} \textbf{z}_{k}  The above system is known as the inverse Wiener-Hopf factor. The backward recursion is the adjoint of the above forward system. The result of the backward pass \beta_{k}  may be calculated by operating the forward equations on the time-reversed \alpha_{k}  and time reversing the result. In the case of output estimation, the smoothed estimate is given by \hat{\textbf{y}}_{k\mid N} = \textbf{z}_{k} - \textbf{R}_{k}\beta_{k}    Taking the causal part of this minimum-variance smoother yields \hat{\textbf{y}}_{k\mid k} = \textbf{z}_{k} - \textbf{R}_{k} \textbf{S}_k^{-1/2} \alpha_{k}    which is identical to the minimum-variance Kalman filter. The above solutions minimize the variance of the output estimation error. Note that the Rauch–Tung–Striebel smoother derivation assumes that the underlying distributions are Gaussian, whereas the minimum-variance solutions do not. Optimal smoothers for state estimation and input estimation can be constructed similarly. A continuous-time version of the above smoother is described in. Expectation-maximization algorithms may be employed to calculate approximate maximum likelihood estimates of unknown state-space parameters within minimum-variance filters and smoothers. Often uncertainties remain within problem assumptions. A smoother that accommodates uncertainties can be designed by adding a positive definite term to the Riccati equation. In cases where the models are nonlinear, step-wise linearizations may be within the minimum-variance filter and smoother recursions (extended Kalman filtering). The Kalman filter is the optimum estimator from the set of all causal linear estimators when the underlying noise processes are zero-mean white processes. In some applications, the measurement noise may be Poisson-distributed. The filter recursions may be generalized to include a Poisson measurement noise component by adding the Poisson intensity {\Gamma}  to the innovation (or residual) covariance: \mathbf{S}_k = \mathbf{H}_k \mathbf{P}_{k\mid k-1} \mathbf{H}_k^T + \mathbf{R}_k + {\Gamma}  An expectation-maximization algorithm may be employed to iteratively estimate an unknown Poisson noise intensity. Pioneering research on the perception of sounds at different frequencies was conducted by Fletcher and Munson in the 1930s. Their work led to a standard way of weighting measured sound levels within investigations of industrial noise and hearing loss. Frequency weightings have since been used within filter and controller designs to manage performance within bands of interest. Typically, a frequency shaping function is used to weight the average power of the error spectral density in a specified frequency band. Let \textbf{y} - \hat{\textbf{y}} denote the output estimation error exhibited by a conventional Kalman filter. Also, let \textbf{W} denote a causal frequency weighting transfer function. The optimum solution which minimizes the variance of \textbf{W} (  \textbf{y} - \hat{\textbf{y}}  ) arises by simply constructing \textbf{W}^{-1} \hat{\textbf{y}}. The design of \textbf{W} remains an open question. One way of proceeding is to identify a system which generates the estimation error and setting \textbf{W} equal to the inverse of that system. This procedure may be iterated to obtain mean-square error improvement at the cost of increased filter order. The same technique can be applied to smoothers. The basic Kalman filter is limited to a linear assumption. More complex systems, however, can be nonlinear. The non-linearity can be associated either with the process model or with the observation model or with both. In the extended Kalman filter (EKF), the state transition and observation models need not be linear functions of the state but may instead be non-linear functions. These functions are of differentiable type. \textbf{x}_{k} = f(\textbf{x}_{k-1}, \textbf{u}_{k}) + \textbf{w}_{k} \textbf{z}_{k} = h(\textbf{x}_{k}) + \textbf{v}_{k} The function f can be used to compute the predicted state from the previous estimate and similarly the function h can be used to compute the predicted measurement from the predicted state. However, f and h cannot be applied to the covariance directly. Instead a matrix of partial derivatives (the Jacobian) is computed. At each timestep the Jacobian is evaluated with current predicted states. These matrices can be used in the Kalman filter equations. This process essentially linearizes the non-linear function around the current estimate. When the state transition and observation models—that is, the predict and update functions f and h—are highly non-linear, the extended Kalman filter can give particularly poor performance. This is because the covariance is propagated through linearization of the underlying non-linear model. The unscented Kalman filter (UKF)&nbsp; uses a deterministic sampling technique known as the unscented transform to pick a minimal set of sample points (called sigma points) around the mean. These sigma points are then propagated through the non-linear functions, from which the mean and covariance of the estimate are then recovered. The result is a filter which more accurately captures the true mean and covariance. (This can be verified using Monte Carlo sampling or through a Taylor series expansion of the posterior statistics.) In addition, this technique removes the requirement to explicitly calculate Jacobians, which for complex functions can be a difficult task in itself (i.e., requiring complicated derivatives if done analytically or being computationally costly if done numerically). As with the EKF, the UKF prediction can be used independently from the UKF update, in combination with a linear (or indeed EKF) update, or vice versa. The estimated state and covariance are augmented with the mean and covariance of the process noise.  \textbf{x}_{k-1\mid k-1}^{a} = [ \hat{\textbf{x}}_{k-1\mid k-1}^\mathrm{T} \quad E[\textbf{w}_{k}^\mathrm{T}] \ ]^\mathrm{T}   \textbf{P}_{k-1\mid k-1}^{a} = \begin{bmatrix} & \textbf{P}_{k-1\mid k-1} & & 0 & \\ & 0 & &\textbf{Q}_{k} & \end{bmatrix}  A set of 2L&nbsp;+&nbsp;1 sigma points is derived from the augmented state and covariance where L is the dimension of the augmented state. \chi_{k-1\mid k-1}^{0} = \textbf{x}_{k-1\mid k-1}^{a} \chi_{k-1\mid k-1}^{i} =\textbf{x}_{k-1\mid k-1}^{a} + \left ( \sqrt{ (L + \lambda) \textbf{P}_{k-1\mid k-1}^{a} } \right )_{i}, \qquad i = 1,\ldots,L \chi_{k-1\mid k-1}^{i} = \textbf{x}_{k-1\mid k-1}^{a} - \left ( \sqrt{ (L + \lambda) \textbf{P}_{k-1\mid k-1}^{a} } \right )_{i-L}, \qquad i = L+1,\dots{},2L where \left ( \sqrt{ (L + \lambda) \textbf{P}_{k-1\mid k-1}^{a} } \right )_{i} is the ith column of the matrix square root of (L + \lambda) \textbf{P}_{k-1\mid k-1}^{a} using the definition: square root \textbf{A} of matrix \textbf{B} satisfies \textbf{B} \triangleq \textbf{A} \textbf{A}^\mathrm{T}. \,  The matrix square root should be calculated using numerically efficient and stable methods such as the Cholesky decomposition. The sigma points are propagated through the transition function f. \chi_{k\mid k-1}^{i} = f(\chi_{k-1\mid k-1}^{i}) \quad i = 0,\dots,2L  where f : R^{L} \rightarrow R^{|\textbf{x}|} . The weighted sigma points are recombined to produce the predicted state and covariance. \hat{\textbf{x}}_{k\mid k-1} = \sum_{i=0}^{2L} W_{s}^{i} \chi_{k\mid k-1}^{i}  \textbf{P}_{k\mid k-1} = \sum_{i=0}^{2L} W_{c}^{i}\ [\chi_{k\mid k-1}^{i} - \hat{\textbf{x}}_{k\mid k-1}] [\chi_{k\mid k-1}^{i} - \hat{\textbf{x}}_{k\mid k-1}]^\mathrm{T}  where the weights for the state and covariance are given by: W_{s}^{0} = \frac{\lambda}{L+\lambda} W_{c}^{0} = \frac{\lambda}{L+\lambda} + (1 - \alpha^2 + \beta) W_{s}^{i} = W_{c}^{i} = \frac{1}{2(L+\lambda)} \lambda = \alpha^2 (L+\kappa) - L\,\!  \alpha and \kappa control the spread of the sigma points.  \beta is related to the distribution of x. Normal values are \alpha=10^{-3}, \kappa=0 and \beta=2. If the true distribution of x is Gaussian, \beta=2 is optimal. The predicted state and covariance are augmented as before, except now with the mean and covariance of the measurement noise.  \textbf{x}_{k\mid k-1}^{a} = [ \hat{\textbf{x}}_{k\mid k-1}^\mathrm{T} \quad E[\textbf{v}_{k}^\mathrm{T}] \ ]^\mathrm{T}   \textbf{P}_{k\mid k-1}^{a} = \begin{bmatrix} & \textbf{P}_{k\mid k-1} & & 0 & \\ & 0 & &\textbf{R}_{k} & \end{bmatrix}  As before, a set of 2L&nbsp;+&nbsp;1 sigma points is derived from the augmented state and covariance where L is the dimension of the augmented state.  \begin{align} \chi_{k\mid k-1}^{0} & = \textbf{x}_{k\mid k-1}^{a} \\[6pt] \chi_{k\mid k-1}^{i} & = \textbf{x}_{k\mid k-1}^{a} + \left ( \sqrt{ (L + \lambda) \textbf{P}_{k\mid k-1}^{a} } \right )_{i}, \qquad i = 1,\dots,L \\[6pt] \chi_{k\mid k-1}^{i} & = \textbf{x}_{k\mid k-1}^{a} - \left ( \sqrt{ (L + \lambda) \textbf{P}_{k\mid k-1}^{a} } \right )_{i-L}, \qquad i = L+1,\dots,2L \end{align}  Alternatively if the UKF prediction has been used the sigma points themselves can be augmented along the following lines  \chi_{k\mid k-1} := [ \chi_{k\mid k-1}^\mathrm{T} \quad E[\textbf{v}_{k}^\mathrm{T}] \ ]^\mathrm{T} \pm \sqrt{ (L + \lambda) \textbf{R}_{k}^{a} } where  \textbf{R}_{k}^{a} = \begin{bmatrix} & 0 & & 0 & \\ & 0 & &\textbf{R}_{k} & \end{bmatrix}  The sigma points are projected through the observation function h. \gamma_{k}^{i} = h(\chi_{k\mid k-1}^{i}) \quad i = 0..2L  The weighted sigma points are recombined to produce the predicted measurement and predicted measurement covariance. \hat{\textbf{z}}_{k} = \sum_{i=0}^{2L} W_{s}^{i} \gamma_{k}^{i}  \textbf{P}_{z_{k}z_{k}} = \sum_{i=0}^{2L} W_{c}^{i}\ [\gamma_{k}^{i} - \hat{\textbf{z}}_{k}] [\gamma_{k}^{i} - \hat{\textbf{z}}_{k}]^\mathrm{T}  The state-measurement cross-covariance matrix, \textbf{P}_{x_{k}z_{k}} = \sum_{i=0}^{2L} W_{c}^{i}\ [\chi_{k\mid k-1}^{i} - \hat{\textbf{x}}_{k\mid k-1}] [\gamma_{k}^{i} - \hat{\textbf{z}}_{k}]^\mathrm{T}  is used to compute the UKF Kalman gain. K_{k} = \textbf{P}_{x_{k}z_{k}} \textbf{P}_{z_{k}z_{k}}^{-1} As with the Kalman filter, the updated state is the predicted state plus the innovation weighted by the Kalman gain, \hat{\textbf{x}}_{k\mid k} = \hat{\textbf{x}}_{k\mid k-1} + K_{k}( \textbf{z}_{k} - \hat{\textbf{z}}_{k} ) And the updated covariance is the predicted covariance, minus the predicted measurement covariance, weighted by the Kalman gain. \textbf{P}_{k\mid k} = \textbf{P}_{k\mid k-1} - K_{k} \textbf{P}_{z_{k}z_{k}} K_{k}^\mathrm{T}  The Kalman–Bucy filter (named after Richard Snowden Bucy) is a continuous time version of the Kalman filter.Bucy, R.S. and Joseph, P.D., Filtering for Stochastic Processes with Applications to Guidance, John Wiley & Sons, 1968; 2nd Edition, AMS Chelsea Publ., 2005. ISBN 0-8218-3782-6Jazwinski, Andrew H., Stochastic processes and filtering theory, Academic Press, New York, 1970. ISBN 0-12-381550-9 It is based on the state space model \frac{d}{dt}\mathbf{x}(t) = \mathbf{F}(t)\mathbf{x}(t) + \mathbf{B}(t)\mathbf{u}(t) + \mathbf{w}(t) \mathbf{z}(t) = \mathbf{H}(t) \mathbf{x}(t) + \mathbf{v}(t) where \mathbf{Q}(t) and \mathbf{R}(t) represent the intensities of the two white noise terms \mathbf{w}(t) and \mathbf{v}(t), respectively. The filter consists of two differential equations, one for the state estimate and one for the covariance: \frac{d}{dt}\hat{\mathbf{x}}(t) = \mathbf{F}(t)\hat{\mathbf{x}}(t) + \mathbf{B}(t)\mathbf{u}(t) + \mathbf{K}(t) (\mathbf{z}(t)-\mathbf{H}(t)\hat{\mathbf{x}}(t)) \frac{d}{dt}\mathbf{P}(t) = \mathbf{F}(t)\mathbf{P}(t) + \mathbf{P}(t)\mathbf{F}^{T}(t) + \mathbf{Q}(t) - \mathbf{K}(t)\mathbf{R}(t)\mathbf{K}^{T}(t) where the Kalman gain is given by \mathbf{K}(t)=\mathbf{P}(t)\mathbf{H}^{T}(t)\mathbf{R}^{-1}(t) Note that in this expression for \mathbf{K}(t) the covariance of the observation noise \mathbf{R}(t) represents at the same time the covariance of the prediction error (or innovation) \tilde{\mathbf{y}}(t)=\mathbf{z}(t)-\mathbf{H}(t)\hat{\mathbf{x}}(t); these covariances are equal only in the case of continuous time. The distinction between the prediction and update steps of discrete-time Kalman filtering does not exist in continuous time. The second differential equation, for the covariance, is an example of a Riccati equation. Most physical systems are represented as continuous-time models while discrete-time measurements are frequently taken for state estimation via a digital processor. Therefore, the system model and measurement model are given by  \begin{align} \dot{\mathbf{x}}(t) &= \mathbf{F}(t)\mathbf{x}(t)+\mathbf{B}(t)\mathbf{u}(t)+\mathbf{w}(t), &\mathbf{w}(t) &\sim N\bigl(\mathbf{0},\mathbf{Q}(t)\bigr) \\ \mathbf{z}_k &= \mathbf{H}_k\mathbf{x}_k+\mathbf{v}_k,   &\mathbf{v}_k &\sim N(\mathbf{0},\mathbf{R}_k) \end{align}  where \mathbf{x}_k=\mathbf{x}(t_k). The prediction equations are derived from those of continuous-time Kalman filter without update from measurements, i.e.,  \mathbf{K}(t)=0 . The predicted state and covariance are calculated respectively by solving a set of differential equations with the initial value equal to the estimate at the previous step. The update equations are identical to those of the discrete-time Kalman filter. The traditional Kalman filter has also been employed for the recovery of sparse, possibly dynamic, signals from noisy observations. Recent works utilize notions from the theory of compressed sensing/sampling, such as the restricted isometry property and related probabilistic recovery arguments, for sequentially estimating the sparse state in intrinsically low-dimensional systems.     Predicted (a priori) state estimate \hat{\mathbf{x}}_{k\mid k-1} = \mathbf{F}_{k}\hat{\mathbf{x}}_{k-1\mid k-1} + \mathbf{B}_{k} \mathbf{u}_{k}   Predicted (a priori) estimate covariance \mathbf{P}_{k\mid k-1} =  \mathbf{F}_{k} \mathbf{P}_{k-1\mid k-1} \mathbf{F}_{k}^{\text{T}} + \mathbf{Q}_{k}  Innovation or measurement residual  \tilde{\mathbf{y}}_k = \mathbf{z}_k - \mathbf{H}_k\hat{\mathbf{x}}_{k\mid k-1}  Innovation (or residual) covariance \mathbf{S}_k = \mathbf{H}_k \mathbf{P}_{k\mid k-1} \mathbf{H}_k^T + \mathbf{R}_k  Optimal Kalman gain \mathbf{K}_k = \mathbf{P}_{k\mid k-1}\mathbf{H}_k^T \mathbf{S}_k^{-1} Updated (a posteriori) state estimate \hat{\mathbf{x}}_{k\mid k} = \hat{\mathbf{x}}_{k\mid k-1} + \mathbf{K}_k\tilde{\mathbf{y}}_k Updated (a posteriori) estimate covariance \mathbf{P}_{k|k} = (I - \mathbf{K}_k \mathbf{H}_k) \mathbf{P}_{k|k-1}  \hat{\mathbf{x}}_{0\mid 0}=E\bigl[\mathbf{x}(t_0)\bigr], \mathbf{P}_{0\mid 0}=Var\bigl[\mathbf{x}(t_0)\bigr]   \begin{align} &\dot{\hat{\mathbf{x}}}(t) = \mathbf{F}(t) \hat{\mathbf{x}}(t) + \mathbf{B}(t) \mathbf{u}(t) \text{, with } \hat{\mathbf{x}}(t_{k-1}) = \hat{\mathbf{x}}_{k-1\mid k-1} \\ \Rightarrow &\hat{\mathbf{x}}_{k\mid k-1} = \hat{\mathbf{x}}(t_k)\\ &\dot{\mathbf{P}}(t) = \mathbf{F}(t)\mathbf{P}(t)+\mathbf{P}(t)\mathbf{F}(t)^T+\mathbf{Q}(t) \text{, with } \mathbf{P}(t_{k-1}) = \mathbf{P}_{k-1\mid k-1}\\ \Rightarrow &\mathbf{P}_{k\mid k-1} = \mathbf{P}(t_k) \end{align}  \mathbf{K}_{k} = \mathbf{P}_{k\mid k-1}\mathbf{H}_{k}^T\bigl(\mathbf{H}_{k}\mathbf{P}_{k\mid k-1}\mathbf{H}_{k}^T+\mathbf{R}_{k}\bigr)^{-1}  \hat{\mathbf{x}}_{k\mid k} = \hat{\mathbf{x}}_{k\mid k-1} + \mathbf{K}_k(\mathbf{z}_k-\mathbf{H}_k\hat{\mathbf{x}}_{k\mid k-1}) \mathbf{P}_{k\mid k} = (\mathbf{I} - \mathbf{K}_{k}\mathbf{H}_{k})\mathbf{P}_{k\mid k-1}  Fk is the state transition model which is applied to the previous state xk−1; Bk is the control-input model which is applied to the control vector uk; wk is the process noise which is assumed to be drawn from a zero mean multivariate normal distribution with covariance  Qk. \hat{\mathbf{x}}_{k\mid k}, the a posteriori state estimate at time k given observations up to and including at time k; \mathbf{P}_{k\mid k}, the a posteriori error covariance matrix (a measure of the estimated accuracy of the state estimate). \mathbf{E}[\mathbf{x}_k - \hat{\mathbf{x}}_{k\mid k}] = \textrm{E}[\mathbf{x}_k - \hat{\mathbf{x}}_{k\mid k-1}] = 0 \textrm{E}[\tilde{\mathbf{y}}_k] = 0 \mathbf{P}_{k\mid k} = \mathrm{cov}(\mathbf{x}_k - \hat{\mathbf{x}}_{k\mid k}) \mathbf{P}_{k\mid k-1} = \mathrm{cov}(\mathbf{x}_k - \hat{\mathbf{x}}_{k\mid k-1}) \mathbf{S}_{k} = \mathrm{cov}(\tilde{\mathbf{y}}_k) Sample a hidden state \mathbf{x}_0 from the Gaussian prior distribution p(\mathbf{x}_0) = \mathcal{N}(\hat{\mathbf{x}}_{0\mid 0}, \mathbf{P}_{0\mid 0}). Sample an observation \mathbf{z}_0 from the observation model p(\mathbf{z}_0\mid \mathbf{x}_0) = \mathcal{N}(\mathbf{H}_0\mathbf{x}_0, \mathbf{R}_0). For k = 1,2,3,... \ldots, do Sample the next hidden state \mathbf{x}_k from the transition model p(\mathbf{x}_{k} \mid \mathbf{x}_{k-1}) = \mathcal{N}(\mathbf{F}_{k} \mathbf{x}_{k-1} + \mathbf{B}_k\mathbf{u}_k, \mathbf{Q}_k). Sample an observation \mathbf{z}_k from the observation model p(\mathbf{z}_k\mid \mathbf{x}_k) = \mathcal{N}(\mathbf{H}_k\mathbf{x}_k, \mathbf{R}_k).  \hat{\textbf{x}}_{t\mid t-1}  is estimated via a standard Kalman filter;  \textbf{y}_{t\mid t-1} = \textbf{z}_t - \textbf{H}\hat{\textbf{x}}_{t\mid t-1}  is the innovation produced considering the estimate of the standard Kalman filter; the various  \hat{\textbf{x}}_{t-i\mid t}  with  i = 1,\ldots,N-1  are new variables, i.e. they do not appear in the standard Kalman filter; the gains are computed via the following scheme: Attitude and heading reference systems Autopilot Battery state of charge (SoC) estimation Brain-computer interface Chaotic signals Tracking and vertex fitting of charged particles in particle detectors Tracking of objects in computer vision Dynamic positioning Economics, in particular macroeconomics, time series analysis, and econometrics Inertial guidance system Nuclear medicine – single photon emission computed tomography image restorationD. Boulfelfel, R.M. Rangayyan, L.J. Hahn, R. Kloiber, and G.R. Kuduvalli (1994). "Restoration of single photon emission computed tomography images by the Kalman filter". IEEE Transactions on Medical Imaging 13(1): 102–109 Orbit Determination Power system state estimation Radar tracker Satellite navigation systems Seismology Sensorless control of AC motor variable-frequency drives Simultaneous localization and mapping Speech enhancement Visual odometry Weather forecasting Navigation system 3D modeling Structural health monitoring Human sensorimotor processing Alpha beta filter Bayesian MMSE estimator Covariance intersection Data assimilation Ensemble Kalman filter Extended Kalman filter Fast Kalman filter Filtering problem (stochastic processes) Generalized filtering Invariant extended Kalman filter Kernel adaptive filter Linear-quadratic-Gaussian control Moving horizon estimation Non-linear filter Particle filter estimator Predictor corrector Recursive least squares Schmidt–Kalman filter Separation principle Sliding mode control Stochastic differential equations Volterra series Wiener filter Zakai equation A New Approach to Linear Filtering and Prediction Problems, by R. E. Kalman, 1960 Kalman–Bucy Filter, a good derivation of the Kalman–Bucy Filter An Introduction to the Kalman Filter, SIGGRAPH 2001 Course, Greg Welch and Gary Bishop Kalman filtering chapter from Stochastic Models, Estimation, and Control, vol. 1, by Peter S. Maybeck Kalman Filter webpage, with lots of links Kalman Filters, thorough introduction to several types, together with applications to Robot Localization Kalman filters used in Weather models, SIAM News, Volume 36, Number 8, October 2003. Critical Evaluation of Extended Kalman Filtering and Moving-Horizon Estimation, Ind. Eng. Chem. Res., 44 (8), 2451–2460, 2005. Kalman and Bayesian Filters in Python Free book on Kalman Filtering implemented in IPython Notebook. Source code for the propeller microprocessor: Well documented source code written for the Parallax propeller processor. Gerald J. Bierman's Estimation Subroutine Library: Corresponds to the code in the research monograph "Factorization Methods for Discrete Sequential Estimation" originally published by Academic Press in 1977. Republished by Dover. Matlab Toolbox implementing parts of Gerald J. Bierman's Estimation Subroutine Library: UD / UDU' and LD / LDL' factorization with associated time and measurement updates making up the Kalman filter. Matlab Toolbox of Kalman Filtering applied to Simultaneous Localization and Mapping: Vehicle moving in 1D, 2D and 3D Derivation of a 6D EKF solution to Simultaneous Localization and Mapping (In old version PDF). See also the tutorial on implementing a Kalman Filter with the MRPT C++ libraries. The Kalman Filter Explained A very simple tutorial. The Kalman Filter in Reproducing Kernel Hilbert Spaces A comprehensive introduction. Matlab code to estimate Cox–Ingersoll–Ross interest rate model with Kalman Filter: Corresponds to the paper "estimating and testing exponential-affine term structure models by kalman filter" published by Review of Quantitative Finance and Accounting in 1999. Extended Kalman Filters explained in the context of Simulation, Estimation, Control, and Optimization Online demo of the Kalman Filter. Demonstration of Kalman Filter (and other data assimilation methods) using twin experiments. Hookes Law and the Kalman Filter A little "spring theory" emphasizing the connection between statistics and physics. Examples and how-to on using Kalman Filters with MATLAB A Tutorial on Filtering and Estimation Explaining Filtering (Estimation) in One Hour, Ten Minutes, One Minute, and One Sentence  by Yu-Chi Ho
