   The IBM 1620 was announced by IBM on October 21, 1959, and marketed as an inexpensive "scientific computer". After a total production of about two thousand machines, it was withdrawn on November 19, 1970. Modified versions of the 1620 were used as the CPU of the IBM 1710 and IBM 1720 Industrial Process Control Systems (making it the first digital computer considered reliable enough for real-time process control of factory equipment). Being variable word length decimal, as opposed to fixed-word-length pure binary, made it an especially attractive first computer to learn on — and hundreds of thousands of students had their first experiences with a computer on the IBM 1620. Oklahoma State University had an IBM 1620 for engineering students in the 1960s. Core memory cycle times were 20 microseconds for the Model I, 10 microseconds for the Model II (about a thousand times slower than typical computer main memory in 2006). Many in the user community recall the 1620 being referred to as CADET, jokingly meaning "Can't Add, Doesn't Even Try", referring to the use of addition tables in memory rather than dedicated addition circuitry.  For an explanation of all three known interpretations of the machine's code name see the section on the machine's development history. It was a variable "word" length decimal (BCD) computer with a memory that could hold anything from 20,000 to 60,000 decimal digits increasing in 20,000 decimal digit increments. (While the 5-digit addresses could have addressed 100,000 decimal digits, no machine larger than 60,000 decimal digits was ever built.) Memory was accessed two decimal digits at the same time (even-odd digit pair for numeric data or one alphameric character for text data). Each decimal digit was 6 bits, composed of an odd parity Check bit, a Flag bit, and four BCD bits for the value of the digit in the following format: C F 8 4 2 1 The Flag bit had several uses: In addition to the valid BCD digit values there were three special digit values (these could NOT be used in calculations): C F 8 4 2 1        1 0 1 0  -  Record Mark (right most end of record)        1 1 0 0  -  Numeric Blank (blank for punched card output formatting)        1 1 1 1  -  Group Mark (right most end of a group of records for disk I/O)  Instructions were fixed length (12 decimal digits), consisting of a 2-digit "op code", a 5-digit "P Address" (usually the destination address), and a 5-digit "Q Address" (usually the source address or the source immediate value). Some instructions, such as the B (branch) instruction, only used the P Address, and later smart assemblers included a "B7" instruction that generated an 7-digit branch instruction (op code, P address, and one extra digit because the next instruction had to start on an even-numbered digit). Fixed-point data "words" could be any size from two decimal digits up to all of memory not used for other purposes. Floating-point data "words" (using the hardware floating point option) could be any size from 4 decimal digits up to 102 decimal digits (2 to 100 digits for the mantissa and 2 digits for the exponent). The machine had no programmer-accessible registers: all operations were memory to memory (including the index registers of the 1620 II).  The table below lists Alphameric mode Characters (and Op codes). The table below lists Numeric mode Characters. The Model I used the Cyrillic character Ж (pronounced zh) on the typewriter as a general purpose invalid character with correct parity (invalid parity being indicated with an overstrike "&ndash;"). In some 1620 installations it was called a SMERSH, as used in the James Bond novels that had become popular in the late 1960s. The Model II used a new character ❚ (called "pillow") as a general purpose invalid character with correct parity. Although the IBM 1620's architecture was very popular in the scientific and engineering community, computer scientist Edsger Dijkstra pointed out several flaws in its design in EWD37, "A review of the IBM 1620 data processing system".E.W. Dijkstra Archive: A review of the IBM 1620 Data Processing System (EWD 37) Among these are that the machine's Branch and Transmit instruction together with Branch Back allow a grand total of one level of nested subroutine call, forcing the programmer of any code with more than one level to decide where the use of this "feature" would be most effective.  He also showed how the machine's paper tape reading support could not properly read tapes containing record marks, since record marks are used to terminate the characters read in storage. (One effect of this is that the 1620 cannot duplicate a tape with record marks in a straightforward way: when the record mark is encountered, the punch instruction punches an EOL character instead and terminates. However this is not a crippling problem, as the data can be copied to the end of memory and punched verbatim with a DN instruction instead of WN. Besides, tapes were usually duplicated offline.) Most 1620 installations used the more convenient punched card input/output,http://www.textfiles.com/bitsavers/pdf/ibm/1620/Basic_Programming_Concepts_and_the_IBM_1620_Computer_1962.pdf "The punched card is the most widely used media for communication with machines" rather than paper tape. The successor to the 1620, the IBM 1130 was based on a totally different, 16-bit binary architecture. (The 1130 line retained one 1620 peripheral, the 1627 drum plotter.)  IBM supplied the following software for the 1620: The Monitors provided disk based versions of 1620 SPS IId, FORTRAN IId as well as a DUP (Disk Utility Program).  Both Monitor systems required 20,000 digits or more of memory and 1 or more 1311 disk drives. A collection of IBM 1620 related manuals in PDF format exists at Index of /pdf/ibm/1620 The "operating system" for the computer constituted the operator, who would use controls on the computer console, which consisted of a front panel and typewriter, to load programs from the available bulk storage media such as decks of punched cards or rolls of paper tape that were kept in cabinets nearby. Later, the model 1311 disc storage device attached to the computer enabled a reduction in the fetch and carry of card decks or paper tape rolls, and a simple "Monitor" operating system could be loaded to help in selecting what to load from disc. A standard preliminary was to clear the computer memory of any previous user's detritus - being magnetic cores, the memory retained its last state even if the power had been switched off. This was effected by using the console facilities to load a simple computer program via typing its machine code at the console typewriter, running it, and stopping it. This was not challenging as only one instruction was needed such as 160001000000, loaded at address zero and following. This meant transmit field immediate (the 16: two digit op-codes) to address 00010 the immediate constant field having the value 00000 (five digit operand fields, the second being from address 11 back to 7), decrementing source and destination addresses until such time as a digit with a "flag" was copied. This was the normal machine code means of copying a constant of up to five digits. The digit string was addressed at its low-order end and extended through lower addresses until a digit with a flag marked its end. But for this instruction, no flag would ever be found because the source digits had shortly before been overwritten by digits lacking a flag. Thus the operation would roll around memory (even overwriting itself) filling it with all zeroes until the operator grew tired of watching the roiling of the indicator lights and pressed the Instant Stop - Single Cycle Execute button. Each 20,000 digit module of memory took just under one second to clear.  On the 1620 II this instruction would NOT work (due to certain optimizations in the implementation). Instead there was a button on the console called Modify which when pressed together with the Check Reset button, when the computer was in Manual mode, would set the computer in a mode that would clear all of memory in a tenth of one second regardless of how much memory you had; when you pressed Start. It also stopped automatically when memory was cleared, instead of requiring the operator to stop it. Other than typing machine code at the console, a program could be loaded via either the paper tape reader, the card reader, or any disk drive. Loading from either tape or disk required first typing a "bootstrap" routine on the console typewriter. The card reader made things easier because it had a special Load button to signify that the first card was to be read into the computer's memory (starting at address 00000) and executed (as opposed to just starting the card reader, which then awaits commands from the computer to read cards) - this is the "bootstrap" process that gets into the computer just enough code to read in the rest of the code (from the card reader, or disc, or...) that constitutes the loader that will read in and execute the desired program. Programs were prepared ahead of time, offline, on paper tape or punched cards.  But usually the programmers were allowed to run the programs personally, hands-on, instead of submitting them to operators as was the case with mainframe computers at that time.  And the console typewriter allowed entering data and getting output in an interactive fashion, instead of just getting the normal printed output from a blind batch run on a pre-packaged data set. As well, there were four program switches on the console whose state a running program could test and so have its behavior directed by its user. The computer operator could also stop a running program (or it may come to a deliberately programmed stop) then investigate or modify the contents of memory: being decimal-based, this was quite easy; even floating-point numbers could be read at a glance. Execution could then be resumed, from any desired point. Aside from debugging, scientific programming is typically exploratory, by contrast to commercial data processing where the same work is repeated on a regular schedule. For details of console lights, switches, and procedures see the respective articles on the IBM 1620 Model I or IBM 1620 Model II. The most important items on the 1620's console were a pair of buttons labeled Insert & Release, and the electric typewriter. The typewriter is used for operator input/output, both as the main console control of the computer and for program controlled input/output. Later models of the typewriter had a special key marked R-S that combined the functions of the console Release & Start buttons (this would be considered equivalent to an Enter key on a modern keyboard). Note: several keys on the typewriter did not generate input characters, these included Tab and Return (the 1620's alphameric and numeric BCD character sets lacked character codes for these keys). The next most important items on the 1620's console were the buttons labeled Start, Stop-SIE, and Instant Stop-SCE. For program debugging there were the buttons labeled Save & Display MAR. When a Branch Back instruction was executed in Save mode, it copied the saved value back to the program counter (instead of copying the return address register as it normally did) and deactivated Save mode. This was used during debugging to remember where the program had been stopped to allow it to be resumed after the debugging instructions that the operator had typed on the typewriter had finished. Note: the MARS register used to save the program counter in was also used by the Multiply instruction, so this instruction and the Save mode were incompatible! However there was no need to use multiply in debugging code, so this was not considered to be a problem. The 1621 Tape reader and 1624 Tape punch controls. The 1622 Card reader/punch controls were divided into three groups: 3 punch control rocker switches, 6 buttons, and 2 reader control rocker switches. Punch Rocker switches: Buttons: Reader Rocker switches:  The 1311 Disk drive controls. The FORTRAN II compiler and SPS assembler were somewhat cumbersome to useIBM Systems Reference Library – 1620 FORTRAN (with FORMAT) pp. 51-56 (PDF)IBM Systems Reference Library – IBM 1620 FORTRAN II Programming System Reference Manual pp. 22-28 (PDF) by modern standards, however, with repetition, the procedure soon became automatic and you no longer thought about the details involved. GOTRAN was much simpler to use, as it directly produced an executable in memory. However it was not a complete FORTRAN implementation. To improve this various third-party FORTRAN compilers were developed. One of these was developed by Bob Richardson, a programmer at Rice University, the FLAG (FORTRAN Load-and-Go) compiler. Once the FLAG deck had been loaded, all that was needed was to load the source deck to get directly to the output deck; FLAG stayed in memory, so it was immediately ready to accept the next source deck. This was particularly convenient for dealing with many small jobs. For instance, at Auckland University a batch job processor for student assignments (typically, many small programs not requiring much memory) chugged through a class lot rather faster than the later IBM 1130 did with its disk-based system. The compiler remained in memory, and the student's program had its chance in the remaining memory to succeed or fail, though a bad failure might disrupt the resident compiler. Later, disk storage devices were introduced, removing the need for working storage on card decks. The various decks of cards constituting the compiler and loader no longer need be fetched from their cabinets but could be stored on disk and loaded under the control of a simple disk-based operating system: a lot of activity becomes less visible, but still goes on. Since the punch side of the card reader-punch didn't edge-print the characters across the top of the cards, one had to take any output decks over to a separate machine, typically an IBM 557 Alphabetic Interpreter, that read each card and printed its contents along the top. Listings were usually generated by punching a listing deck and using an IBM 407 accounting machine to print the deck.  Most of the logic circuitry of the 1620 was a type of resistor-transistor logic (RTL) using "drift" transistors (a type of transistor invented by Herbert Kroemer in 1953) for their speed, that IBM referred to as Saturated Drift Transistor Resistor Logic (SDTRL). Other IBM circuit types used were referred to as: Alloy (some logic, but mostly various non-logic functions, named for the kind of transistors used), CTRL (another type of RTL, but slower than SDTRL), CTDL (a type of diode-transistor logic (DTL)), and DL (another type of RTL, named for the kind of transistor used, "drift" transistors). Typical logic levels of all these circuits (S Level) were high: 0&nbsp;V to -0.5&nbsp;V, low: -6&nbsp;V to -12&nbsp;V. Transmission line logic levels of SDTRL circuits (C Level) were high: 1&nbsp;V, low: -1&nbsp;V. Relay circuits used either of two logic levels (T Level) high: 51&nbsp;V to 46&nbsp;V, low: 16&nbsp;V to 0&nbsp;V or (W Level) high: 24&nbsp;V, low: 0&nbsp;V. These circuits were constructed of individual discrete components mounted on single sided paper-epoxy printed circuit boards  with a 16-pin gold plated edge connector, that IBM referred to as SMS cards (Standard Modular System). The amount of logic on one card was similar to that in one 7400 series SSI or simpler MSI package (e.g., 3 to 5 logic gates or a couple of flip-flops). These boards were inserted into sockets mounted in door-like racks which IBM referred to as gates. The machine had the following "gates" in its basic configuration: There were two different types of core memory used in the 1620: The address decoding logic of the Main memory also used two planes of 100 pulse transformer cores per module to generate the X-Y Line half-current pulses. There were two models of the 1620, each having totally different hardware implementations: In 1958 IBM assembled a team at the Poughkeepsie, New York development laboratory to study the "small scientific market". Initially the team consisted of Wayne Winger (Manager), Robert C. Jackson, and William H. Rhodes. The competing computers in this market were the Librascope LGP-30 and the Bendix G-15; both were drum memory machines. IBM's smallest computer at the time was the popular IBM 650, a fixed word length decimal machine that also used drum memory. All three used vacuum tubes. It was concluded that IBM could offer nothing really new in that area. To compete effectively would require use of technologies that IBM had developed for larger computers, yet the machine would have to be produced at the least possible cost. To meet this objective, the team set the following requirements: The internal code name CADET was selected for the machine. One of the developers says that this stood for "Computer with ADvanced Economic Technology", however others recall it as simply being one half of "SPACE - CADET", where SPACE was the internal code name of the IBM 1401 machine, also then under development. The team expanded with the addition of Anne Deckman, Kelly B. Day, William Florac, and James Brenza. They completed the CADET prototype in the spring of 1959. Meanwhile the San Jose, California facility was working on a proposal of its own. IBM could only build one of the two and the Poughkeepsie proposal won because "the San Jose version is top of the line and not expandable, while your proposal has all kinds of expansion capability - never offer a machine that cannot be expanded". Management was not entirely convinced that core memory could be made to work in small machines, so Gerry Ottaway was loaned to the team to design a drum memory as a backup. During acceptance testing by the Product Test Lab, repeated core memory failures were encountered and it looked likely that management's predictions would come true. However, at the last minute it was found that the muffin fan used to blow hot air through the core stack was malfunctioning, causing the core to pick up noise pulses and fail to read correctly. After the fan problem was fixed, there were no further problems with the core memory and the drum memory design effort was discontinued as unnecessary. Following announcement of the IBM 1620 on October 21, 1959, due to an internal reorganization of IBM, it was decided to transfer the computer from the Data Processing Division at Poughkeepsie (large scale mainframe computers only) to the General Products Division at San Jose (small computers and support products only) for manufacturing. Following transfer to San Jose, someone there jokingly suggested that the code name CADET actually stood for "Can't Add, Doesn't Even Try", referring to the use of addition tables in memory rather than dedicated addition circuitry. This stuck and became very well known among the user community. :The 1620 Model II introduced basic ALU hardware for addition and subtraction (making "Can't Add, Doesn't Even Try" no longer applicable) and index registers. Available peripherals were: An IBM 1620 model II was used by Vearl N. Huff, NASA Headquarters (FOB 10B, Washington DC) to program a three-dimensional simulation in Fortran of the tethered Gemini capsule - Agena rocket module two-body problem at a time when it was not completely understood if it was safe to tether two objects together in space due to possible elastic tether induced collisions. The same computer was also used to simulate the orbits of the Gemini flights, producing printer-art charts of each orbit. These simulation were run over-night and the data examined the next day.Personal recollections of Donald N. Huff, son of Vearl N. Huff In 1966 the ITU produced an explanatory film on a 1963 system for typesetting by computer at the Washington Evening Star, using an IBM 1620 and a Linofilm phototypesetter. A radio program was developed by DJ Rege Cordic for KDKA Pittsburgh, based on a baseball game simulator developed by John Burgeson of IBM and his brother, Paul, then an ensign in the U.S. Navy. This program was used in numerous demonstration events in the years 1960 to 1963 as an example of the power of computers to perform simulation exercises.  The fictional computer Colossus of Colossus: The Forbin Project used about a dozen scrapped 1620 front panels purchased on the surplus market, in various orientations. A similar arrangement was used in a late episode  of The Man from U.N.C.L.E. to portray a THRUSH supercomputer. BCD Character Typewriter Printer Tape &nbsp;Card&nbsp; Core MNEMONIC & Operation Definition & Notes In Out Out In Out In Out Even Odd Blank &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;&nbsp;C&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;C&nbsp;&nbsp;&nbsp;&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp; &nbsp; invalid &nbsp; Ж ❚ &nbsp; &nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;1 FADD Floating Add Optional special feature. invalid &nbsp; Ж ❚ &nbsp; &nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;2&nbsp; FSUB Floating Subtract Optional special feature. . . . . &nbsp;X0&nbsp;8&nbsp;21 &nbsp;X0&nbsp;8&nbsp;21 12-3-812-1-2-8 12-3-8 &nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;21 FMUL Floating Multiply Optional special feature. ) ) ) ) &nbsp;X0C84&nbsp;&nbsp; &nbsp;X0C84&nbsp;&nbsp; 12-4-8 12-4-8 &nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;4&nbsp;&nbsp; &nbsp; &nbsp; invalid &nbsp; Ж ❚ &nbsp; &nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;4&nbsp;1 FSL Floating Shift Left Optional special feature. invalid &nbsp; Ж ❚ &nbsp; &nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;42&nbsp; TFL Transmit Floating Optional special feature. invalid &nbsp; Ж ❚ &nbsp; &nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;421 BTFL Branch and Transmit Floating Optional special feature. invalid &nbsp; Ж ❚ &nbsp; &nbsp;&nbsp;&nbsp;&nbsp; &nbsp;8&nbsp;&nbsp;&nbsp; FSR Floating Shift Right Optional special feature. invalid &nbsp; Ж ❚ &nbsp; &nbsp;&nbsp;&nbsp;&nbsp; &nbsp;8&nbsp;&nbsp;1 FDIV Floating Divide Optional special feature. + + + + &nbsp;X0C&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;X0C&nbsp;&nbsp;&nbsp;&nbsp; 12 12 &nbsp;&nbsp;&nbsp;1 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp; &nbsp; invalid &nbsp; Ж ❚ &nbsp; &nbsp;&nbsp;&nbsp;1 &nbsp;&nbsp;&nbsp;&nbsp;1 AM Add Immediate &nbsp; invalid &nbsp; Ж ❚ &nbsp; &nbsp;&nbsp;&nbsp;1 &nbsp;&nbsp;&nbsp;2&nbsp; SM Subtract Immediate &nbsp; $ $ $ $ &nbsp;X&nbsp;C8&nbsp;21 &nbsp;X&nbsp;C8&nbsp;21 11-3-811-1-2-8 11-3-8 &nbsp;&nbsp;&nbsp;1 &nbsp;&nbsp;&nbsp;21 MM Multiply Immediate &nbsp; &nbsp;X&nbsp;&nbsp;84&nbsp;&nbsp; &nbsp;X&nbsp;&nbsp;84&nbsp;&nbsp; 11-4-8 11-4-8 &nbsp;&nbsp;&nbsp;1 &nbsp;&nbsp;4&nbsp;&nbsp; CM Compare Immediate &nbsp; invalid &nbsp; Ж ❚ &nbsp; &nbsp;&nbsp;&nbsp;1 &nbsp;&nbsp;4&nbsp;1 TDM Transmit Digit Immediate &nbsp; invalid &nbsp; Ж ❚ &nbsp; &nbsp;&nbsp;&nbsp;1 &nbsp;&nbsp;42&nbsp; TFM Transmit Field Immediate &nbsp; invalid &nbsp; Ж ❚ &nbsp; &nbsp;&nbsp;&nbsp;1 &nbsp;&nbsp;421 BTM Branch and Transmit Immediate &nbsp; invalid &nbsp; Ж ❚ &nbsp; &nbsp;&nbsp;&nbsp;1 &nbsp;8&nbsp;&nbsp;&nbsp; LDM Load Dividend Immediate Optional special feature (Model I).Standard (Model II). invalid &nbsp; Ж ❚ &nbsp; &nbsp;&nbsp;&nbsp;1 &nbsp;8&nbsp;&nbsp;1 DM Divide Immediate Optional special feature (Model I).Standard (Model II). - - - - &nbsp;X&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;X&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 11 11 &nbsp;&nbsp;2&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp; &nbsp; / / / / &nbsp;&nbsp;0C&nbsp;&nbsp;&nbsp;1 &nbsp;&nbsp;0C&nbsp;&nbsp;&nbsp;1 0-1 0-1 &nbsp;&nbsp;2&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;1 A Add &nbsp; invalid &nbsp; Ж ❚ &nbsp; &nbsp;&nbsp;2&nbsp; &nbsp;&nbsp;&nbsp;2&nbsp; S Subtract &nbsp; , , , , &nbsp;&nbsp;0C8&nbsp;21 &nbsp;&nbsp;0C8&nbsp;21 0-3-80-1-2-8 0-3-8 &nbsp;&nbsp;2&nbsp; &nbsp;&nbsp;&nbsp;21 M Multiply &nbsp; ( ( ( ( &nbsp;&nbsp;0&nbsp;84&nbsp;&nbsp; &nbsp;&nbsp;0&nbsp;84&nbsp;&nbsp; 0-4-8 0-4-8 &nbsp;&nbsp;2&nbsp; &nbsp;&nbsp;4&nbsp;&nbsp; C Compare &nbsp; invalid &nbsp; Ж ❚ &nbsp; &nbsp;&nbsp;2&nbsp; &nbsp;&nbsp;4&nbsp;1 TD Transmit Digit &nbsp; invalid &nbsp; Ж ❚ &nbsp; &nbsp;&nbsp;2&nbsp; &nbsp;&nbsp;42&nbsp; TF Transmit Field &nbsp; invalid &nbsp; Ж ❚ &nbsp; &nbsp;&nbsp;2&nbsp; &nbsp;&nbsp;421 BT Branch and Transmit &nbsp; invalid &nbsp; Ж ❚ &nbsp; &nbsp;&nbsp;2&nbsp; &nbsp;8&nbsp;&nbsp;&nbsp; LD Load Dividend Optional special feature (Model I).Standard (Model II). invalid &nbsp; Ж ❚ &nbsp; &nbsp;&nbsp;2&nbsp; &nbsp;8&nbsp;&nbsp;1 D Divide Optional special feature (Model I).Standard (Model II). invalid &nbsp; Ж ❚ &nbsp; &nbsp;&nbsp;21 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; TRNM Transmit Record No RM (Model II) invalid &nbsp; Ж ❚ &nbsp; &nbsp;&nbsp;21 &nbsp;&nbsp;&nbsp;&nbsp;1 TR Transmit Record &nbsp; invalid &nbsp; Ж ❚ &nbsp; &nbsp;&nbsp;21 &nbsp;&nbsp;&nbsp;2&nbsp; SF Set Flag &nbsp; = = = = &nbsp;&nbsp;&nbsp;&nbsp;8&nbsp;21 &nbsp;&nbsp;&nbsp;&nbsp;8&nbsp;21 3-81-2-8 3-8 &nbsp;&nbsp;21 &nbsp;&nbsp;&nbsp;21 CF Clear Flag &nbsp; @ @ @ @ &nbsp;&nbsp;&nbsp;C84&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;C84&nbsp;&nbsp; 4-8 4-8 &nbsp;&nbsp;21 &nbsp;&nbsp;4&nbsp;&nbsp; K Control (I/O device) &nbsp; invalid &nbsp; Ж ❚ &nbsp; &nbsp;&nbsp;21 &nbsp;&nbsp;4&nbsp;1 DN Dump Numeric &nbsp; invalid &nbsp; Ж ❚ &nbsp; &nbsp;&nbsp;21 &nbsp;&nbsp;42&nbsp; RN Read Numeric &nbsp; invalid &nbsp; Ж ❚ &nbsp; &nbsp;&nbsp;21 &nbsp;&nbsp;421 RA Read Alphameric &nbsp; invalid &nbsp; Ж ❚ &nbsp; &nbsp;&nbsp;21 &nbsp;8&nbsp;&nbsp;&nbsp; WN Write Numeric &nbsp; invalid &nbsp; Ж ❚ &nbsp; &nbsp;&nbsp;21 &nbsp;8&nbsp;&nbsp;1 WA Write Alphameric &nbsp; A A A A &nbsp;X0&nbsp;&nbsp;&nbsp;&nbsp;1 &nbsp;X0&nbsp;&nbsp;&nbsp;&nbsp;1 12-1 12-1 &nbsp;4&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;1 NOP No Operation &nbsp; B B B B &nbsp;X0&nbsp;&nbsp;&nbsp;2&nbsp; &nbsp;X0&nbsp;&nbsp;&nbsp;2&nbsp; 12-2 12-2 &nbsp;4&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;2&nbsp; BB Branch Back &nbsp; C C C C &nbsp;X0C&nbsp;&nbsp;21 &nbsp;X0C&nbsp;&nbsp;21 12-312-1-2 12-3 &nbsp;4&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;21 BD Branch On Digit &nbsp; D D D D &nbsp;X0&nbsp;&nbsp;4&nbsp;&nbsp; &nbsp;X0&nbsp;&nbsp;4&nbsp;&nbsp; 12-4 12-4 &nbsp;4&nbsp;&nbsp; &nbsp;&nbsp;4&nbsp;&nbsp; BNF Branch No Flag &nbsp; E E E E &nbsp;X0C&nbsp;4&nbsp;1 &nbsp;X0C&nbsp;4&nbsp;1 12-512-1-4 12-5 &nbsp;4&nbsp;&nbsp; &nbsp;&nbsp;4&nbsp;1 BNR Branch No Record Mark &nbsp; F F F F &nbsp;X0C&nbsp;42&nbsp; &nbsp;X0C&nbsp;42&nbsp; 12-612-2-4 12-6 &nbsp;4&nbsp;&nbsp; &nbsp;&nbsp;42&nbsp; BI Branch Indicator &nbsp; UMK UnmaskMK Mask 1710 interrupt feature. Modifiers in Q field. G G G G &nbsp;X0&nbsp;&nbsp;421 &nbsp;X0&nbsp;&nbsp;421 12-712-1-2-4 12-7 &nbsp;4&nbsp;&nbsp; &nbsp;&nbsp;421 BNI Branch No Indicator &nbsp; BO Branch OutBOLD Branch Out and Load 1710 interrupt feature. Modifiers in Q field. H H H H &nbsp;X0&nbsp;8&nbsp;&nbsp;&nbsp; &nbsp;X0&nbsp;8&nbsp;&nbsp;&nbsp; 12-8 12-8 &nbsp;4&nbsp;&nbsp; &nbsp;8&nbsp;&nbsp;&nbsp; H Halt &nbsp; I I I I &nbsp;X0C8&nbsp;&nbsp;1 &nbsp;X0C8&nbsp;&nbsp;1 12-912-1-8 12-9 &nbsp;4&nbsp;&nbsp; &nbsp;8&nbsp;&nbsp;1 B Branch &nbsp; -0 N/A - - N/A &nbsp;X&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 11-0 11-0 &nbsp;4&nbsp;1 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp; &nbsp; J-1 J J J &nbsp;X&nbsp;C&nbsp;&nbsp;&nbsp;1 &nbsp;X&nbsp;C&nbsp;&nbsp;&nbsp;1 11-1 11-1 &nbsp;4&nbsp;1 &nbsp;&nbsp;&nbsp;&nbsp;1 &nbsp; &nbsp; K-2 K K K &nbsp;X&nbsp;C&nbsp;&nbsp;2&nbsp; &nbsp;X&nbsp;C&nbsp;&nbsp;2&nbsp; 11-2 11-2 &nbsp;4&nbsp;1 &nbsp;&nbsp;&nbsp;2&nbsp; &nbsp; &nbsp; L-3 L L L &nbsp;X&nbsp;&nbsp;&nbsp;&nbsp;21 &nbsp;X&nbsp;&nbsp;&nbsp;&nbsp;21 11-311-1-2 11-3 &nbsp;4&nbsp;1 &nbsp;&nbsp;&nbsp;21 &nbsp; &nbsp; M-4 M M M &nbsp;X&nbsp;C&nbsp;4&nbsp;&nbsp; &nbsp;X&nbsp;C&nbsp;4&nbsp;&nbsp; 11-4 11-4 &nbsp;4&nbsp;1 &nbsp;&nbsp;4&nbsp;&nbsp; &nbsp; &nbsp; N-5 N N N &nbsp;X&nbsp;&nbsp;&nbsp;4&nbsp;1 &nbsp;X&nbsp;&nbsp;&nbsp;4&nbsp;1 11-511-1-4 11-5 &nbsp;4&nbsp;1 &nbsp;&nbsp;4&nbsp;1 BNG Branch No Group Mark Optional special feature. O-6 O O O &nbsp;X&nbsp;&nbsp;&nbsp;42&nbsp; &nbsp;X&nbsp;&nbsp;&nbsp;42&nbsp; 11-611-2-4 11-6 &nbsp;4&nbsp;1 &nbsp;&nbsp;42&nbsp; &nbsp; &nbsp; P-7 P P P &nbsp;X&nbsp;C&nbsp;421 &nbsp;X&nbsp;C&nbsp;421 11-711-1-2-4 11-7 &nbsp;4&nbsp;1 &nbsp;&nbsp;421 &nbsp; &nbsp; Q-8 Q Q Q &nbsp;X&nbsp;C8&nbsp;&nbsp;&nbsp; &nbsp;X&nbsp;C8&nbsp;&nbsp;&nbsp; 11-8 11-8 &nbsp;4&nbsp;1 &nbsp;8&nbsp;&nbsp;&nbsp; &nbsp; &nbsp; R-9 R R R &nbsp;X&nbsp;&nbsp;8&nbsp;&nbsp;1 &nbsp;X&nbsp;&nbsp;8&nbsp;&nbsp;1 11-911-1-8 11-9 &nbsp;4&nbsp;1 &nbsp;8&nbsp;&nbsp;1 &nbsp; &nbsp; invalid &nbsp; Ж ❚ &nbsp; &nbsp;42&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; BS Branch and Select (Model II) invalid &nbsp; Ж ❚ &nbsp; &nbsp;42&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;1 BX Branch and Modify Index Register Optional special feature (Model II). S S S S &nbsp;&nbsp;0C&nbsp;&nbsp;2&nbsp; &nbsp;&nbsp;0C&nbsp;&nbsp;2&nbsp; 0-2 0-2 &nbsp;42&nbsp; &nbsp;&nbsp;&nbsp;2&nbsp; BXM Branch and Modify Index Register Immediate Optional special feature (Model II). T T T T &nbsp;&nbsp;0&nbsp;&nbsp;&nbsp;21 &nbsp;&nbsp;0&nbsp;&nbsp;&nbsp;21 0-30-1-2 0-3 &nbsp;42&nbsp; &nbsp;&nbsp;&nbsp;21 BCX Branch Conditionally and Modify Index Register Optional special feature (Model II). U U U U &nbsp;&nbsp;0C&nbsp;4&nbsp;&nbsp; &nbsp;&nbsp;0C&nbsp;4&nbsp;&nbsp; 0-4 0-4 &nbsp;42&nbsp; &nbsp;&nbsp;4&nbsp;&nbsp; BCXM Branch Conditionally and Modify Index Register Immediate Optional special feature (Model II). V V V V &nbsp;&nbsp;0&nbsp;&nbsp;4&nbsp;1 &nbsp;&nbsp;0&nbsp;&nbsp;4&nbsp;1 0-50-1-4 0-5 &nbsp;42&nbsp; &nbsp;&nbsp;4&nbsp;1 BLX Branch and Load Index Register Optional special feature (Model II). W W W W &nbsp;&nbsp;0&nbsp;&nbsp;42&nbsp; &nbsp;&nbsp;0&nbsp;&nbsp;42&nbsp; 0-60-2-4 0-6 &nbsp;42&nbsp; &nbsp;&nbsp;42&nbsp; BLXM Branch and Load Index Register Immediate Optional special feature (Model II). X X X X &nbsp;&nbsp;0C&nbsp;421 &nbsp;&nbsp;0C&nbsp;421 0-70-1-2-4 0-7 &nbsp;42&nbsp; &nbsp;&nbsp;421 BSX Branch and Store Index Register Optional special feature (Model II). Y Y Y Y &nbsp;&nbsp;0C8&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;0C8&nbsp;&nbsp;&nbsp; 0-8 0-8 &nbsp;42&nbsp; &nbsp;8&nbsp;&nbsp;&nbsp; &nbsp; &nbsp; Z Z Z Z &nbsp;&nbsp;0&nbsp;8&nbsp;&nbsp;1 &nbsp;&nbsp;0&nbsp;8&nbsp;&nbsp;1 0-90-1-8 0-9 &nbsp;42&nbsp; &nbsp;8&nbsp;&nbsp;1 &nbsp; &nbsp; 0 0 0 0 &nbsp;&nbsp;0&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;0&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 012-0 0 &nbsp;421 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; MA Move Address Optional special feature (Model II). 1 1 1 1 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1 1 1 &nbsp;421 &nbsp;&nbsp;&nbsp;&nbsp;1 MF Move Flag Optional special feature (Model I).Standard (Model II). 2 2 2 2 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2&nbsp; 2 2 &nbsp;421 &nbsp;&nbsp;&nbsp;2&nbsp; TNS Transmit Numeric Strip Optional special feature (Model I).Standard (Model II). 3 3 3 3 &nbsp;&nbsp;&nbsp;C&nbsp;&nbsp;21 &nbsp;&nbsp;&nbsp;C&nbsp;&nbsp;21 3 3 &nbsp;421 &nbsp;&nbsp;&nbsp;21 TNF Transmit Numeric Fill Optional special feature (Model I).Standard (Model II). 4 4 4 4 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;4&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;4&nbsp;&nbsp; 4 4 &nbsp;421 &nbsp;&nbsp;4&nbsp;&nbsp; &nbsp; &nbsp; 5 5 5 5 &nbsp;&nbsp;&nbsp;C&nbsp;4&nbsp;1 &nbsp;&nbsp;&nbsp;C&nbsp;4&nbsp;1 5 5 &nbsp;421 &nbsp;&nbsp;4&nbsp;1 &nbsp; &nbsp; 6 6 6 6 &nbsp;&nbsp;&nbsp;C&nbsp;42&nbsp; &nbsp;&nbsp;&nbsp;C&nbsp;42&nbsp; 6 6 &nbsp;421 &nbsp;&nbsp;42&nbsp; &nbsp; &nbsp; 7 7 7 7 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;421 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;421 7 7 &nbsp;421 &nbsp;&nbsp;421 &nbsp; &nbsp; 8 8 8 8 &nbsp;&nbsp;&nbsp;&nbsp;8&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;8&nbsp;&nbsp;&nbsp; 8 8 &nbsp;421 &nbsp;8&nbsp;&nbsp;&nbsp; &nbsp; &nbsp; 9 9 9 9 &nbsp;&nbsp;&nbsp;C8&nbsp;&nbsp;1 &nbsp;&nbsp;&nbsp;C8&nbsp;&nbsp;1 9 9 &nbsp;421 &nbsp;8&nbsp;&nbsp;1 &nbsp; &nbsp; invalid &nbsp; Ж ❚ &nbsp; 8&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;4&nbsp;&nbsp; SA Select AddressSACO Select Address, Contact OperateSAOS Select Analog Output Signal 1710 feature. Modifiers in Q field invalid &nbsp; Ж ❚ &nbsp; 8&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;42&nbsp; SLTA Select TASSLAR Select ADC RegisterSLTC Select Real-Time ClockSLIC Select Input ChannelSLCB Select Contact BlockSLME Select Manual Entry 1710 feature. Modifiers in Q field invalid &nbsp; Ж ❚ &nbsp; 8&nbsp;&nbsp;&nbsp; F&nbsp;42&nbsp; RNIC Read Numeric Input Channel 1710 feature. Modifiers in Q field invalid &nbsp; Ж ❚ &nbsp; 8&nbsp;&nbsp;&nbsp; F&nbsp;421 RAIC Read Alphameric Input Channel 1710 feature. Modifiers in Q field invalid &nbsp; Ж ❚ &nbsp; 8&nbsp;&nbsp;&nbsp; &nbsp;8&nbsp;&nbsp;&nbsp; WNOC Write Numeric Output Channel 1710 feature. Modifiers in Q field invalid &nbsp; Ж ❚ &nbsp; 8&nbsp;&nbsp;&nbsp; &nbsp;8&nbsp;&nbsp;1 WAOC Write Alphameric Output Channel 1710 feature. Modifiers in Q field invalid &nbsp; Ж ❚ &nbsp; 8&nbsp;&nbsp;1 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; BBT Branch on Bit Optional special feature (Model II). invalid &nbsp; Ж ❚ &nbsp; 8&nbsp;&nbsp;1 &nbsp;&nbsp;&nbsp;&nbsp;1 BMK Branch on Mask Optional special feature (Model II). invalid &nbsp; Ж ❚ &nbsp; 8&nbsp;&nbsp;1 &nbsp;&nbsp;&nbsp;2&nbsp; ORF OR to Field Optional special feature (Model II). invalid &nbsp; Ж ❚ &nbsp; 8&nbsp;&nbsp;1 &nbsp;&nbsp;&nbsp;21 ANDF AND to Field Optional special feature (Model II). invalid &nbsp; Ж ❚ &nbsp; 8&nbsp;&nbsp;1 &nbsp;&nbsp;4&nbsp;&nbsp; CPLF Complement Octal Field Optional special feature (Model II). invalid &nbsp; Ж ❚ &nbsp; 8&nbsp;&nbsp;1 &nbsp;&nbsp;4&nbsp;1 EORF Exclusive OR to Field Optional special feature (Model II). invalid &nbsp; Ж ❚ &nbsp; 8&nbsp;&nbsp;1 &nbsp;&nbsp;42&nbsp; OTD Octal to Decimal Conversion Optional special feature (Model II). invalid &nbsp; Ж ❚ &nbsp; 8&nbsp;&nbsp;1 &nbsp;&nbsp;421 DTO Decimal to Octal Conversion Optional special feature (Model II). RM ‡ (Stop) (Stop) &nbsp;&nbsp;0&nbsp;8&nbsp;2&nbsp; E&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(Stop) 0-2-8 0-2-8 &nbsp;&nbsp;&nbsp;&nbsp; &nbsp;8&nbsp;2&nbsp; &nbsp; Record Mark GM (Stop) (Stop) &nbsp;&nbsp;0&nbsp;8421 E&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(Stop) 0-7-8 1-2-4-8 &nbsp;&nbsp;&nbsp;&nbsp; &nbsp;8421 &nbsp; Group Mark Character Typewriter Printer Tape &nbsp;Card&nbsp; Core Definition & Notes In Out Out Dump In Out In Out Blank &nbsp; 0 0 0 &nbsp;&nbsp;&nbsp;C&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;0&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp; 0 C&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp; 0 0 0 0 0 &nbsp;&nbsp;0&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;0&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 012-012 0 C&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp; 1 1 1 1 1 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1 112-1 1 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1 &nbsp; 2 2 2 2 2 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2&nbsp; 212-1 2 &nbsp;&nbsp;&nbsp;&nbsp;2&nbsp; &nbsp; 3 3 3 3 3 &nbsp;&nbsp;&nbsp;C&nbsp;&nbsp;21 &nbsp;&nbsp;&nbsp;C&nbsp;&nbsp;21 312-31-212-1-2 3 C&nbsp;&nbsp;&nbsp;21 &nbsp; 4 4 4 4 4 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;4&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;4&nbsp;&nbsp; 412-4 4 &nbsp;&nbsp;&nbsp;4&nbsp;&nbsp; &nbsp; 5 5 5 5 5 &nbsp;&nbsp;&nbsp;C&nbsp;4&nbsp;1 &nbsp;&nbsp;&nbsp;C&nbsp;4&nbsp;1 512-51-412-1-4 5 C&nbsp;&nbsp;4&nbsp;1 &nbsp; 6 6 6 6 6 &nbsp;&nbsp;&nbsp;C&nbsp;42&nbsp; &nbsp;&nbsp;&nbsp;C&nbsp;42&nbsp; 612-62-412-2-4 6 C&nbsp;&nbsp;42&nbsp; &nbsp; 7 7 7 7 7 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;421 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;421 712-71-2-412-1-2-4 7 &nbsp;&nbsp;&nbsp;421 &nbsp; 8 8 8 8 8 &nbsp;&nbsp;&nbsp;&nbsp;8&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;8&nbsp;&nbsp;&nbsp; 812-8 8 &nbsp;&nbsp;8&nbsp;&nbsp;&nbsp; &nbsp; 9 9 9 9 9 &nbsp;&nbsp;&nbsp;C8&nbsp;&nbsp;1 &nbsp;&nbsp;&nbsp;C8&nbsp;&nbsp;1 912-91-812-1-8 9 C&nbsp;8&nbsp;&nbsp;1 &nbsp; -0 0 0 - - &nbsp;X&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;X0C&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;X&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 11-0 11-0 &nbsp;F&nbsp;&nbsp;&nbsp;&nbsp; &nbsp; -1 1 1 J J &nbsp;X&nbsp;C&nbsp;&nbsp;&nbsp;1 &nbsp;X&nbsp;C&nbsp;&nbsp;&nbsp;1 11-1 11-1 CF&nbsp;&nbsp;&nbsp;1 &nbsp; -2 2 2 K K &nbsp;X&nbsp;C&nbsp;&nbsp;2&nbsp; &nbsp;X&nbsp;C&nbsp;&nbsp;2&nbsp; 11-2 11-2 CF&nbsp;&nbsp;2&nbsp; &nbsp; -3 3 3 L L &nbsp;X&nbsp;&nbsp;&nbsp;&nbsp;21 &nbsp;X&nbsp;&nbsp;&nbsp;&nbsp;21 11-311-1-2 11-3 &nbsp;F&nbsp;&nbsp;21 &nbsp; -4 4 4 M M &nbsp;X&nbsp;C&nbsp;4&nbsp;&nbsp; &nbsp;X&nbsp;C&nbsp;4&nbsp;&nbsp; 11-4 11-4 CF&nbsp;4&nbsp;&nbsp; &nbsp; -5 5 5 N N &nbsp;X&nbsp;&nbsp;&nbsp;4&nbsp;1 &nbsp;X&nbsp;&nbsp;&nbsp;4&nbsp;1 11-511-1-4 11-5 &nbsp;F&nbsp;4&nbsp;1 &nbsp; -6 6 6 O O &nbsp;X&nbsp;&nbsp;&nbsp;42&nbsp; &nbsp;X&nbsp;&nbsp;&nbsp;42&nbsp; 11-611-2-4 11-6 &nbsp;F&nbsp;42&nbsp; &nbsp; -7 7 7 P P &nbsp;X&nbsp;C&nbsp;421 &nbsp;X&nbsp;C&nbsp;421 11-711-1-2-4 11-7 CF&nbsp;421 &nbsp; -8 8 8 Q Q &nbsp;X&nbsp;C8&nbsp;&nbsp;&nbsp; &nbsp;X&nbsp;C8&nbsp;&nbsp;&nbsp; 11-8 11-8 CF8&nbsp;&nbsp;&nbsp; &nbsp; -9 9 9 R R &nbsp;X&nbsp;&nbsp;8&nbsp;&nbsp;1 &nbsp;X&nbsp;&nbsp;8&nbsp;&nbsp;1 11-911-1-8 11-9 &nbsp;F8&nbsp;&nbsp;1 &nbsp; RM ‡ (Stop, WN)‡(DN) (Stop) ‡ &nbsp;&nbsp;0&nbsp;8&nbsp;2&nbsp; E&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(Stop, WN)&nbsp;&nbsp;0&nbsp;8&nbsp;2&nbsp;(DN) 0-2-8 0-2-8 C&nbsp;8&nbsp;2&nbsp; Record MarkOn tape a WN punches EOL instead! flag RM ‡ (Stop, WN)‡(DN) (Stop) W &nbsp;X&nbsp;&nbsp;8&nbsp;2&nbsp; E&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(Stop, WN)&nbsp;X&nbsp;&nbsp;8&nbsp;2&nbsp;(DN) 11-2-812-2-8 11-2-8 &nbsp;F8&nbsp;2&nbsp; Flagged Record MarkOn tape a WN punches EOL instead! EOL ‡ (Stop, WN)‡(DN) (Stop) ‡ E&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; E&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(WN)&nbsp;&nbsp;0&nbsp;8&nbsp;2&nbsp;(DN) 0-2-8 0-2-8 C&nbsp;8&nbsp;2&nbsp; End of line Tape only.Note: In memory is a Record Mark! GM (Stop, WN)(DN) (Stop) G &nbsp;&nbsp;0&nbsp;8421 &nbsp;&nbsp;0&nbsp;8421 0-7-8 0-7-8 C&nbsp;8421 Group Mark flag GM (Stop, WN)(DN) (Stop) X &nbsp;X&nbsp;&nbsp;8421 &nbsp;X&nbsp;&nbsp;8421 12-7-8 12-7-8 &nbsp;F8421 Flagged Group Mark NB @ @ @ &nbsp;&nbsp;&nbsp;C84&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;C84&nbsp;&nbsp; 4-8 C&nbsp;84&nbsp;&nbsp; Numeric Blank flag NB @ @ &nbsp;X&nbsp;&nbsp;84&nbsp;&nbsp; &nbsp;X&nbsp;&nbsp;84&nbsp;&nbsp; 11-4-8 &nbsp;F84&nbsp;&nbsp; Flagged Numeric Blank "Breakpoint" procedure Notes Press Stop-SIE Stop the computer at the end of the current instruction. Press Save Save the address to resume execution at. Press Insert Unlocks typewriter keyboard and shifts into numeric mode. Type 35xxxxx0010036xxxxx0010042&nbsp; xxxxx is the address that you plan to set the breakpoint at. Press Release Locks typewriter keyboard. Press Start Begin execution. Allow the 12 digit instruction to print out. Press Release Stops the Dump Numeric. Press Start Begin execution. Type 48 Replace the opcode of the instruction to "break" at with a Halt opcode. Press Release Locks typewriter keyboard. Press Start Resume execution. Wait until the computer halts at the "breakpoint". Press Insert Unlocks typewriter keyboard and shifts into numeric mode. Type 36xxxxx0010049xxxxx&nbsp; xxxxx is the address that you previously set the breakpoint at, you are now going to clear it. Press Release Locks typewriter keyboard. Press Start Begin execution. Type oo oo is the 2 digit opcode the original 12 digit instruction previously printed out. Press Release Locks typewriter keyboard. Press Stop-SIE The machine is now ready to resume execution from the location of the (now cleared) "breakpoint". You can perform any required debugging actions now, before continuing. Bootstrap procedure Notes Press Insert Unlocks typewriter keyboard and shifts into numeric mode. Type 36xxxxx0030049yyyyy&nbsp; xxxxx is the address to load the tape into.yyyyy is the address to begin execution. Press Release Locks typewriter keyboard. Press Start Begin execution. Bootstrap procedure Notes Press Load Bootstrap procedure Notes Press Insert Unlocks typewriter keyboard and shifts into numeric mode. Type 3400032007013600032007024902402xy1963611300102 x - Specifies source of Monitor control cards: 1=typewriter, 3=paper tape, 5=cardsy - Specifies disk drive on which Monitor resides: 1, 3, 5, 702402 is the address of the entry point of the Monitor program. Press Release Locks typewriter keyboard. Press Start Begin execution. Restart procedure Notes Press Insert Unlocks typewriter keyboard and shifts into numeric mode. Type 490225FLG6&nbsp; 02256̅ is the address of the location containing the address of the restart point of the Monitor program.Note: this procedure assumes the Monitor is already loaded in memory Press Release Locks typewriter keyboard. Press Start Begin execution. FORTRAN II compilation procedure Notes Set the Program Switches as follows: Pass I options Set Overflow Check switch to Program and all others to Stop Press Reset Load blank cards (face down 12-edge first) into the Punch hopper then press Punch Start Load Pass I of the compiler (face down 9-edge first) into the Read hopper then press Load Wait for Pass I to load and print on the typewriter "ENTER SOURCE PROGRAM, PRESS START" Remove Pass I of the compiler from the Read stacker Load the program source deck (face down 9-edge first) into the Read hopper then press Start Wait for Pass I to complete and print on the typewriter "TURN SW 1 ON FOR SYMBOL TABLE, PRESS START" Turn Program Switch 1 OFF then press Start If a symbol table listing is desired for debugging, turn Program Switch 1 ON instead. The symbol table listing will be printed on the typewriter.Wait for Pass I to print on the typewriter "END OF PASS 1" Set the Program Switches as follows: Pass II options Set Overflow Check switch to Program and all others to Stop Press Reset Load blank cards (face down 12-edge first) into the Punch hopper then press Punch Start Load Pass II of the compiler (face down 9-edge first) into the Read hopper then press Load Wait for Pass II to load Remove Pass II of the compiler from the Read stacker Remove the intermediate output of Pass I from the Punch stacker, then load it (face down 9-edge first) into the Read hopper and press Reader Start then Start Wait for Pass II to complete and print on the typewriter "SW 1 ON TO PUNCH SUBROUTINES, PRESS START" Remove the intermediate output from the Reader stacker Turn Program Switch 1 ON, load the Subroutine deck (face down 9-edge first) into the Read hopper, then press Reader Start then Start Wait for Pass II to print on the typewriter "END OF PASS II" Remove the Subroutine deck from the Reader stacker and the completed Object deck from the Punch stacker IBM 1620 Model I Level A (prototype), as it appeared in the IBM announcement of the machine. In the least significant digit it was set to indicate a negative number (signed magnitude). It was set to mark the most significant digit of a number (wordmark). In the least significant digit of 5-digit addresses it was set for indirect addressing (an option on the 1620 I, standard on the 1620 II). Multi-level indirection could be used (you could even put the machine in an infinite indirect addressing loop). In the middle 3 digits of 5-digit addresses (on the 1620 II) they were set to select one of 7 index registers. 1620 Symbolic Programming System (SPS) (assembly language) FORTRAN FORTRAN II - required 40,000 digits or more of memory GOTRAN - simplified, interpreted version of FORTRAN for "load and go" operation http://hissa.nist.gov/mlists/ibm1620/199901/19990128-2.html Monitor I and Monitor II - disk operating systems. Insert – Pressing this key with the computer in Manual mode reset the program counter (in the MARS core memory) to zero, switched the computer into Automatic and Insert modes, and simulated the execution of a Read Numeric from Typewriter to address zero (unlocked the typewriter keyboard, shifted the typewriter into numeric mode). Note: unlike a real Read Numeric from Typewriter, Insert mode would force a Release after 100 digits had been typed to prevent overwriting the arithmetic tables. Release – Pressing this key while doing a Read from the Typewriter terminated the Read, switched the computer into Manual mode, and locked the typewriter keyboard. Start – Pressing this key with the computer in Manual mode switched the computer to Automatic mode (causing the computer to begin executing at the address in the program counter). Stop-SIE – Pressing this key with the computer in Automatic mode switched the computer to Manual mode when the currently executing instruction completes. Pressing this key with the computer in Manual mode switched the computer into Automatic mode for one instruction. Instant Stop-SCE – Pressing this key with the computer in Automatic mode switched the computer into Automatic/Manual mode at the end of the current memory cycle. Pressing this key with the computer in Manual or Automatic/Manual mode switched the computer into Automatic/Manual mode and executed one memory cycle. Save – Pressing this key with the computer in Manual mode saved the program counter into another register in the MARS core memory and activated Save mode. Display MAR – Pressing this key with the computer in Manual mode displayed the selected MARS register and the contents of the memory at that address on the console lamps. Power switch – With this switch on the reader is powered anytime the 1620 is powered. Reel-Strip switch – This switch selects whether Reels or Strips of paper tape are used. Reel power key – Applies power to the supply and takeup Reels to position the tape for reading and places the reader in ready state. Non-process runout key – Feeds tape until the reader is empty and takes the reader out of ready state. Punch Off/Punch On – This rocker turned the punch mechanism off or on. Select No-Stop/Select Stop – This rocker selected if mispunched cards (deposited in the punch error select stacker instead of the normal punch stacker) let the punch continue or caused a check stop. Non-Process Runout – This rocker with the punch hopper empty, "ranout" remaining cards from the punch mechanism. Start punch – Pressing this key with the punch idle and on, started the punch. The computer could now punch cards. Stop punch – Pressing this key with the punch active, stopped the punch. Check Reset – Pressing this key reset all "error check" conditions in the reader and punch. Load – Pressing this key with the reader idle and on and the computer in Manual mode started the reader, reset the program counter (in the MARS core memory) to zero, read one card into the reader's buffer and checked the card for errors, and simulated the execution of a Read Numeric from Card Reader to address zero (reading the 80 characters of the reader's buffer into memory addresses 00000 to 00079), then switched the computer into Automatic mode (starting execution at the address in the program counter). Stop reader – Pressing this key with the reader active, stopped the reader. Start reader – Pressing this key with the reader idle and on, started the reader and read one card into the reader's buffer and checked the card for errors. The computer could now read cards. Non-Process Runout – This rocker with the read hopper empty, "ranout" remaining cards from the reader mechanism. Reader Off/Reader On – This rocker turned the reader mechanism off or on. Module light – This light shows the drive number. When it lights the drive is ready for access. Compare-Disable key-switch – When this (Master only) switch is in the ON position and the Write Address button is pressed a full track write may be performed without comparing addresses. Used to format disk packs. Select Lock light – When this (Master only) lights one or more of the drives has malfunctioned. No disk access can be performed. Write Address button/light – This (Master only) key controls writing sector addresses. Pressing it toggles this enable and turns its light on/off. Enable-Disable toggle-switch – This switch enables or disables access to the drive. If this switch is disabled on the Master, all drives are disabled regardless of the state of their own switches. Also controls the disk usage time meter(s). Start Stop button – Pressing this key starts or stops the disk drive motor. The motor must be stopped to open the lid and change disk packs. "Gate A" - Forward hinged gate that swings out the back for access, after "Gate B". "Gate B" - Rear hinged gate that swings out the back for access. "Gate C" - Slides out back for access. Console Typewriter interface. Mostly relay logic. "Gate D" - Slides out back for access. Standard I/O interface. Main memory Coincident Current X-Y Line addressing 20,000, 40,000, or 60,000 Digits 12-bit, even-odd Digit Pair 12 one bit planes in each module, 1 to 3 modules 10,000 cores per plane Memory Address Register Storage (MARS) memory Word Line addressing 16 Words, minimum of 8 used in basic configuration Single Word read, multiple Word clear/write 24-bit, 5 Digit decimal Memory Address (no 8 - Ten Thousand bit stored) 1 plane 384 cores IBM 1620 I IBM 1620 II Core memory Restricted instruction set No divide or floating point instructions, use subroutines in the "general program package" Wherever possible replace hardware with existing logical machine functions No arithmetic circuits, use tables in core memory Least expensive Input/Output possible No punch cards, use paper tape No printer, use operator's console typewriter Model I Level A; prototype. All flip-flops in the design were transistorized versions of the original Eccles-Jordan trigger circuit. While this machine was fully functional, it was found that the capacitor coupling used in these proved troublesome in the noisy signal environment of relays and timing cam driven switches used to drive the console typewriter. This necessitated a complete redesign of the machine to use S-R flip-flops instead (except for two triggers used to generate clocks for the S-R flip-flops). However usage of the term Trigger was retained in all the documentation when referring to a flip-flop, as it was IBM's conventional term (as alphamerics was their term for alphanumerics). This is the only level using a one piece vertical control panel, when the design was transferred from Poughkeepsie to San Jose it was redesigned to the two piece angled control panel used on all production models. Level B; first production. This is the only level using a burnished aluminum lower control panel, later levels finished this panel with white. Level C; introduction of 1622 card reader/punch. Level D; introduction of 1311 disk drives and addition of optional "Gate J" containing disk control logic. Level E; introduction of Floating Point option. Level F Level G; introduction of Interrupt option (needed for IBM 1710). Did not support BT & BB subroutines in interrupt code! Disk control logic on "Gate J" logic merged into "Gate A" & "Gate B". Made possible because much of logic was compacted using cards designed for the Model II. Level H; improved Interrupt option that supported BT & BB subroutines in interrupt code. Final version of the Model I. Model II (no information on "Levels" available at this time) Model III Work was begun on a 1620 Model III but the project was quickly canceled as IBM wanted to promote sales of their new System/360 and discontinue the old lines. IBM 1621 - Paper tape reader IBM 1622 - Punch card reader/punch IBM 1624 - Paper tape punch (sat inside the 1621 on a shelf) IBM 1626 - Plotter controller IBM 1627 - Plotter IBM 1311 - Disk drive: Model 3 master drive controlling up to 3&ndash;Model 2 slave drives. IBM 1443 - Printer, flying type bar IBM 1405 - Disk Drive available as RPQ (request price quotation) IBM 1620 restoration project 1620 Data Processing System IBM 1620 documents from bitsavers.org IBM 1620 Simulator Applet (part of the IBM 1620 restoration project)
