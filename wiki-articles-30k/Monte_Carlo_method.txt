 Monte Carlo methods (or Monte Carlo experiments) are a broad class of computational algorithms that rely on repeated random sampling to obtain numerical results. They are often used in physical and mathematical problems and are most useful when it is difficult or impossible to use other mathematical methods. Monte Carlo methods are mainly used in three distinct problem classes: optimization, numerical integration, and generating draws from a probability distribution. In physics-related problems, Monte Carlo methods are quite useful for simulating systems with many coupled degrees of freedom, such as fluids, disordered materials, strongly coupled solids, and cellular structures (see cellular Potts model, interacting particle systems, McKean-Vlasov processes, kinetic models of gases). Other examples include modeling phenomena with significant uncertainty in inputs such as the calculation of risk in business and, in math, evaluation of multidimensional definite integrals  with complicated boundary conditions.  In application to space and oil exploration problems, Monte Carlo&ndash;based predictions of failure, cost overruns and schedule overruns are routinely better than human intuition or alternative "soft" methods. In principle, Monte Carlo methods can be used to solve any problem having a probabilistic interpretation. By the law of large numbers, integrals described by the expected value of some random variable can be approximated by taking the empirical mean (a.k.a. the sample mean) of independent samples of the variable. When the probability distribution of the variable is parameterized, mathematicians often use a Markov Chain Monte Carlo (MCMC) sampler. The central idea is to design a judicious Markov chain model with a prescribed stationary probability distribution. By the ergodic theorem, the stationary distribution is approximated by the empirical measures of the random states of the MCMC sampler. In other important problems we are interested in generating draws from a sequence of probability distributions satisfying a nonlinear evolution equation. These flows of probability distributions can always be interpreted as the distributions of the random states of a Markov process whose transition probabilities depends on the distributions of the current random states (see McKean-Vlasov processes, nonlinear filtering equation). In other instances we are given a flow of probability distributions with an increasing level of sampling complexity (path spaces models with an increasing time horizon, Boltzmann-Gibbs measures associated with decreasing temperature parameters, and many others). These models can also be seen as the evolution of the law of the random states of a nonlinear Markov chain.  A natural way to simulate these sophisticated nonlinear Markov processes is to sample a large number of copies of the process, replacing in the evolution equation the unknown distributions of the random states by the sampled empirical measures. In contrast with traditional Monte Carlo and Markov chain Monte Carlo methodologies these mean field particle techniques rely on sequential interacting samples. The terminology mean field reflects the fact that each of the samples (a.k.a. particles, individuals, walkers, agents, creatures, or phenotypes) interacts with the empirical measures of the process. When the size of the system tends to infinity, these random empirical measures converge to the deterministic distribution of the random states of the nonlinear Markov chain, so that the statistical interaction between particles vanishes.  Monte Carlo methods vary, but tend to follow a particular pattern: For example, consider a circle inscribed in a unit square. Given that the circle and the square have a ratio of areas that is /4, the value of  can be approximated using a Monte Carlo method: In this procedure the domain of inputs is the square that circumscribes our circle.  We generate random inputs by scattering grains over the square then perform a computation on each input (test whether it falls within the circle).  Finally, we aggregate the results to obtain our final result, the approximation of . There are two important points to consider here: Firstly, if the grains are not uniformly distributed, then our approximation will be poor. Secondly, there should be a large number of inputs. The approximation is generally poor if only a few grains are randomly dropped into the whole square. On average, the approximation improves as more grains are dropped. Uses of Monte Carlo methods require large amounts of random numbers, and it was their use that spurred the development of pseudorandom number generators, which were far quicker to use than the tables of random numbers that had been previously used for statistical sampling. Before the Monte Carlo method was developed, simulations tested a previously understood deterministic problem and statistical sampling was used to estimate uncertainties in the simulations. Monte Carlo simulations invert this approach, solving deterministic problems using a probabilistic analog (see Simulated annealing). An early variant of the Monte Carlo method can be seen in the Buffon's needle experiment, in which  can be estimated by dropping needles on a floor made of parallel and equidistant strips. In the 1930s, Enrico Fermi first experimented with the Monte Carlo method while studying neutron diffusion, but did not publish anything on it. The modern version of the Markov Chain Monte Carlo method was invented in the late 1940s by  Stanislaw Ulam, while he was working on nuclear weapons projects at the Los Alamos National Laboratory. Immediately after Ulam's breakthrough, John von Neumann understood its importance and programmed the ENIAC computer to carry out Monte Carlo calculations. In 1946, physicists at Los Alamos Scientific Laboratory were investigating radiation shielding and the distance that neutrons would likely travel through various materials. Despite having most of the necessary data, such as the average distance a neutron would travel in a substance before it collided with an atomic nucleus, and how much energy the neutron was likely to give off following a collision, the Los Alamos physicists were unable to solve the problem using conventional, deterministic mathematical methods. Stanislaw Ulam had the idea of using random experiments. He recounts his inspiration as follows: :The first thoughts and attempts I made to practice [the Monte Carlo Method] were suggested by a question which occurred to me in 1946 as I was convalescing from an illness and playing solitaires. The question was what are the chances that a Canfield solitaire laid out with 52 cards will come out successfully? After spending a lot of time trying to estimate them by pure combinatorial calculations, I wondered whether a more practical method than "abstract thinking" might not be to lay it out say one hundred times and simply observe and count the number of successful plays. This was already possible to envisage with the beginning of the new era of fast computers, and I immediately thought of problems of neutron diffusion and other questions of mathematical physics, and more generally how to change processes described by certain differential equations into an equivalent form interpretable as a succession of random operations. Later [in 1946], I described the idea to John von Neumann, and we began to plan actual calculations. ::–Stanislaw Ulam Being secret, the work of von Neumann and Ulam required a code name. A colleague of von Neumann and Ulam, Nicholas Metropolis, suggested using the name Monte Carlo, which refers to the Monte Carlo Casino in Monaco where Ulam's uncle would borrow money from relatives to gamble. Using lists of "truly random" random numbers was extremely slow, but von Neumann developed a way to calculate pseudorandom numbers, using the middle-square method. Though this method has been criticized as crude, von Neumann was aware of this: he justified it as being faster than any other method at his disposal, and also noted that when it went awry it did so obviously, unlike methods that could be subtly incorrect. Monte Carlo methods were central to the simulations required for the Manhattan Project, though severely limited by the computational tools at the time. In the 1950s they were used at Los Alamos for early work relating to the development of the hydrogen bomb, and became popularized in the fields of physics, physical chemistry, and operations research. The Rand Corporation and the U.S. Air Force were two of the major organizations responsible for funding and disseminating information on Monte Carlo methods during this time, and they began to find a wide application in many different fields. The theory of more sophisticated mean field type particle Monte Carlo methods had certainly started by the mid-1960s, with the work of  Henry P. McKean Jr. on Markov interpretations of a class of nonlinear parabolic partial differential equations arising in fluid mechanics. We also quote an earlier pioneering article by Theodore E. Harris and Herman Kahn, published in 1951, using mean field genetic-type Monte Carlo methods for estimating particle transmission energies. Mean field genetic type Monte Carlo methodologies are also used as heuristic natural search algorithms (a.k.a. Metaheuristic) in evolutionary computing. The origins of these mean field computational techniques can be traced to 1950 and 1954 with the work of Alan Turing on genetic type mutation-selection learning machines  and the articles by Nils Aall Barricelli at the Institute for Advanced Study in Princeton, New Jersey. Quantum Monte Carlo, and more specifically Diffusion Monte Carlo methods can also be interpreted as a mean field particle Monte Carlo approximation of Feynman-Kac path integrals. The origins of Quantum Monte Carlo methods are often attributed to Enrico Fermi and Robert Richtmyer who developed in 1948 a mean field particle interpretation of neutron-chain reactions, but the first heuristic-like and genetic type particle algorithm (a.k.a. Resampled or Reconfiguration Monte Carlo methods) for estimating ground state energies of quantum systems (in reduced matrix models) is due to Jack H. Hetherington in 1984 In molecular chemistry, the use of genetic heuristic-like particle methodologies (a.k.a. pruning and enrichment strategies) can be traced back to 1955 with the seminal work of Marshall. N. Rosenbluth and Arianna. W. Rosenbluth. The use of Sequential Monte Carlo in advanced Signal processing and Bayesian inference is more recent. It was in 1993, that Gordon et al., published in their seminal work the first application of a Monte Carlo resampling algorithm in Bayesian statistical inference. The authors named their algorithm 'the bootstrap filter', and demonstrated that compared to other filtering methods, their bootstrap algorithm does not require any assumption about that state-space or the noise of the system. We also quote another pioneering article in this field of Genshiro Kitagawa on a related "Monte Carlo filter",  and the ones by Pierre Del Moral and Himilcon Carvalho, Pierre Del Moral, André Monin and Gérard Salut on particle filters published in the mid-1990s. Particle filters were also developed in signal processing in the early 1989-1992 by P. Del Moral, J.C. Noyer, G. Rigal, and G. Salut in the LAAS-CNRS in a series of restricted and classified research reports with STCAN (Service Technique des Constructions et Armes Navales), the IT company DIGILOG, and the LAAS-CNRS (the Laboratory for Analysis and Architecture of Systems) on RADAR/SONAR and GPS signal processing problems.P. Del Moral, G. Rigal, and G. Salut. Estimation and nonlinear optimal control : An unified framework for particle solutions  LAAS-CNRS, Toulouse, Research Report no. 91137, DRET-DIGILOG- LAAS/CNRS contract, April (1991).P. Del Moral, G. Rigal, and G. Salut. Nonlinear and non Gaussian particle filters applied to inertial platform repositioning. LAAS-CNRS, Toulouse, Research Report no. 92207, STCAN/DIGILOG-LAAS/CNRS Convention STCAN no. A.91.77.013, (94p.) September (1991).P. Del Moral, G. Rigal, and G. Salut. Estimation and nonlinear optimal control : Particle resolution in filtering and estimation. Experimental results. Convention DRET no. 89.34.553.00.470.75.01, Research report no.2 (54p.), January (1992).P. Del Moral, G. Rigal, and G. Salut. Estimation and nonlinear optimal control : Particle resolution in filtering and estimation. Theoretical results  Convention DRET no. 89.34.553.00.470.75.01, Research report no.3 (123p.), October (1992).P. Del Moral, J.-Ch. Noyer, G. Rigal, and G. Salut. Particle filters in radar signal processing : detection, estimation and air targets recognition. LAAS-CNRS, Toulouse, Research report no. 92495, December (1992).P. Del Moral, G. Rigal, and G. Salut. Estimation and nonlinear optimal control : Particle resolution in filtering and estimation.  Studies on: Filtering, optimal control, and maximum likelihood estimation. Convention DRET no. 89.34.553.00.470.75.01. Research report no.4 (210p.), January (1993). These Sequential Monte Carlo methodologies can be interpreted as an acceptance-rejection sampler equipped with an interacting recycling mechanism. From 1950 to 1996, all the publications on Sequential Monte Carlo methodologies including the pruning and resample Monte Carlo methods introduced in computational physics and molecular chemistry, present natural and heuristic-like algorithms applied to different situations without a single proof of their consistency, nor a discussion on the bias of the estimates and on genealogical and ancestral tree based algorithms. The mathematical foundations and the first rigorous analysis of these particle algorithms are due to Pierre Del Moral in 1996. Branching type particle methodologies with varying population sizes were also developed in the end of the 1990s by Dan Crisan, Jessica Gaines and Terry Lyons, and by Dan Crisan, Pierre Del Moral and Terry Lyons. Further developments in this field were developed in 2000 by P. Del Moral, A. Guionnet and L. Miclo. There is no consensus on how Monte Carlo should be defined. For example, Ripley defines most probabilistic modeling as stochastic simulation, with Monte Carlo being reserved for Monte Carlo integration and Monte Carlo statistical tests. Sawilowsky distinguishes between a simulation, a Monte Carlo method, and a Monte Carlo simulation: a simulation is a fictitious representation of reality, a Monte Carlo method is a technique that can be used to solve a mathematical or statistical problem, and a Monte Carlo simulation uses repeated sampling to determine the properties of some phenomenon (or behavior). Examples: Kalos and Whitlock point out that such distinctions are not always easy to maintain. For example, the emission of radiation from atoms is a natural stochastic process. It can be simulated directly, or its average behavior can be described by stochastic equations that can themselves be solved using Monte Carlo methods. "Indeed, the same computer code can be viewed simultaneously as a 'natural simulation' or as a solution of the equations by natural sampling." Monte Carlo simulation methods do not always require truly random numbers to be useful — while for some applications, such as primality testing, unpredictability is vital. Many of the most useful techniques use deterministic, pseudorandom sequences, making it easy to test and re-run simulations. The only quality usually necessary to make good simulations is for the pseudo-random sequence to appear "random enough" in a certain sense. What this means depends on the application, but typically they should pass a series of statistical tests. Testing that the numbers are uniformly distributed or follow another desired distribution when a large enough number of elements of the sequence are considered is one of the simplest, and most common ones. Weak correlations between successive samples is also often desirable/necessary. Sawilowsky lists the characteristics of a high quality Monte Carlo simulation: Pseudo-random number sampling algorithms are used to transform uniformly distributed pseudo-random numbers into numbers that are distributed according to a given probability distribution. Low-discrepancy sequences are often used instead of random sampling from a space as they ensure even coverage and normally have a faster order of convergence than Monte Carlo simulations using random or pseudorandom sequences. Methods based on their use are called quasi-Monte Carlo methods. There are ways of using probabilities that are definitely not Monte Carlo simulations &mdash; for example, deterministic modeling using single-point estimates. Each uncertain variable within a model is assigned a “best guess” estimate.  Scenarios (such as best, worst, or most likely case) for each input variable are chosen and the results recorded. By contrast, Monte Carlo simulations sample from a probability distribution for each variable to produce hundreds or thousands of possible outcomes. The results are analyzed to get probabilities of different outcomes occurring. For example, a comparison of a spreadsheet cost construction model run using traditional “what if” scenarios, and then running the comparison again with Monte Carlo simulation and triangular probability distributions shows that the Monte Carlo analysis has a narrower range than the “what if” analysis.  This is because the “what if” analysis gives equal weight to all scenarios (see quantifying uncertainty in corporate finance), while the Monte Carlo method hardly samples in the very low probability regions. The samples in such regions are called "rare events". Monte Carlo methods are especially useful for simulating phenomena with significant uncertainty in inputs and systems with a large number of coupled degrees of freedom. Areas of application include:  Monte Carlo methods are very important in computational physics, physical chemistry, and related applied fields, and have diverse applications from complicated quantum chromodynamics calculations to designing heat shields and aerodynamic forms as well as in modeling radiation transport for radiation dosimetry calculations.  In statistical physics Monte Carlo molecular modeling is an alternative to computational molecular dynamics, and Monte Carlo methods are used to compute statistical field theories of simple particle and polymer systems.  Quantum Monte Carlo methods solve the many-body problem for quantum systems. In experimental particle physics, Monte Carlo methods are used for designing detectors, understanding their behavior and comparing experimental data to theory. In astrophysics, they are used in such diverse manners as to model both galaxy evolution and microwave radiation transmission through a rough planetary surface. Monte Carlo methods are also used in the ensemble models that form the basis of modern weather forecasting. Monte Carlo methods are widely used in engineering for sensitivity analysis and quantitative probabilistic analysis in process design. The need arises from the interactive, co-linear and non-linear behavior of typical process simulations. For example, Define a domain of possible inputs. Generate inputs randomly from a probability distribution over the domain. Perform a deterministic computation on the inputs. Aggregate the results. Draw a square on the ground, then inscribe a circle within it. Uniformly scatter some objects of uniform size (grains of rice or sand) over the square. Count the number of objects inside the circle and the total number of objects. The ratio of the two counts is an estimate of the ratio of the two areas, which is /4. Multiply the result by 4 to estimate . Simulation: Drawing one pseudo-random uniform variable from the interval [0,1] can be used to simulate the tossing of a coin: If the value is less than or equal to 0.50 designate the outcome as heads, but if the value is greater than 0.50 designate the outcome as tails. This is a simulation, but not a Monte Carlo simulation. Monte Carlo method: Pouring out a box of coins on a table, and then computing the ratio of coins that land heads versus tails is a Monte Carlo method of determining the behavior of repeated coin tosses, but it is not a simulation. Monte Carlo simulation: Drawing a large number of pseudo-random uniform variables from the interval [0,1], and assigning values less than or equal to 0.50 as heads and greater than 0.50 as tails, is a Monte Carlo simulation of the behavior of repeatedly tossing a coin. the (pseudo-random) number generator has certain characteristics (e.g., a long "period" before the sequence repeats) the (pseudo-random) number generator produces values that pass tests for randomness there are enough samples to ensure accurate results the proper sampling technique is used the algorithm used is valid for what is being modeled it simulates the phenomenon in question. In microelectronics engineering, Monte Carlo methods are applied to analyze correlated and uncorrelated variations in analog and digital integrated circuits. In geostatistics and geometallurgy, Monte Carlo methods underpin the design of mineral processing flowsheets and contribute to quantitative risk analysis. In wind energy yield analysis, the predicted energy output of a wind farm during its lifetime is calculated giving different levels of uncertainty (P90, P50, etc.) impacts of pollution are simulated and diesel compared with petrol. In Fluid Dynamics, in particular Rarefied Gas Dynamics, where the Boltzmann equation is solved for finite Knudsen number fluid flows using the Direct Simulation Monte Carlo G. A. Bird, Molecular Gas Dynamics, Clarendon, Oxford (1976) method in combination with highly efficient computational algorithms. In autonomous robotics, Monte Carlo localization can determine the position of a robot. It is often applied to stochastic filters such as the Kalman filter or Particle filter that forms the heart of the SLAM (Simultaneous Localization and Mapping) algorithm. In telecommunications, when planning a wireless network, design must be proved to work for a wide variety of scenarios that depend mainly on the number of users, their locations and the services they want to use. Monte Carlo methods are typically used to generate these users and their states. The network performance is then evaluated and, if results are not satisfactory, the network design goes through an optimization process. In reliability engineering, one can use Monte Carlo simulation to generate mean time between failures and mean time to repair for components. In signal processing and Bayesian inference, particle filters and sequential Monte Carlo techniques are a class of mean field particle methods for sampling and computing the posterior distribution of a signal process given some noisy and partial observations using interacting empirical measures.  ===Computational biology===  Monte Carlo methods are used in various fields of computational biology, for example for [[Bayesian inference in phylogeny]], or for studying biological systems such as genomes, proteins,<ref>{{harvnb|Ojeda|et al.|2009}},</ref> or membranes.<ref>{{harvnb|Milik|Skolnick|1993}}</ref> The systems can be studied in the coarse-grained or ''ab initio'' frameworks depending on the desired accuracy.  Computer simulations allow us to monitor the local environment of a particular molecule to see if some chemical reaction is happening for instance. In cases where it is not feasible to conduct a physical experiment, [[thought experiment]]s can be conducted (for instance: breaking bonds, introducing impurities at specific sites, changing the local/global structure, or introducing external fields).  ===Computer graphics=== [[Path Tracing]], occasionally referred to as Monte Carlo Ray Tracing, renders a 3D scene by randomly tracing samples of possible light paths. Repeated sampling of any given pixel will eventually cause the average of the samples to converge on the correct solution of the [[rendering equation]], making it one of the most physically accurate 3D graphics rendering methods in existence.  ===Applied statistics=== In applied statistics, Monte Carlo methods are generally used for two purposes: #To compare competing statistics for small samples under realistic data conditions. Although [[Type I error]] and power properties of statistics can be calculated for data drawn from classical theoretical distributions (''e.g.'', [[normal curve]], [[Cauchy distribution]]) for [[asymptotic]] conditions (''i. e'', infinite sample size and infinitesimally small treatment effect), real data often do not have such distributions.<ref>{{harvnb|Sawilowsky|Fahoome|2003}}</ref> #To provide implementations of [[Statistical hypothesis testing|hypothesis tests]] that are more efficient than exact tests such as [[permutation tests]] (which are often impossible to compute) while being more accurate than critical values for [[asymptotic distribution]]s.  Monte Carlo methods are also a compromise between approximate randomization and permutation tests. An approximate [[randomization test]] is based on a specified subset of all permutations (which entails potentially enormous housekeeping of which permutations have been considered). The Monte Carlo approach is based on a specified number of randomly drawn permutations (exchanging a minor loss in precision if a permutation is drawn twice – or more frequently—for the efficiency of not having to track which permutations have already been selected).  {{anchor|Monte Carlo tree search}}  ===Artificial intelligence for games=== {{Main|Monte Carlo tree search}} Monte Carlo methods have been developed into a technique called [[Monte-Carlo tree search]] that is useful for searching for the best move in a game.  Possible moves are organized in a [[search tree]] and a large number of random simulations are used to estimate the long-term potential of each move. A black box simulator represents the opponent's moves.<ref>http://sander.landofsand.com/publications/Monte-Carlo_Tree_Search_-_A_New_Framework_for_Game_AI.pdf</ref>  The Monte Carlo Tree Search (MCTS) method has four steps:<ref>{{cite web|url=http://mcts.ai/about/index.html|title=Monte Carlo Tree Search - About|publisher=}}</ref> #Starting at root node of the tree, select optimal child nodes until a leaf node is reached. #Expand the leaf node and choose one of its children. #Play a simulated game starting with that node. #Use the results of that simulated game to update the node and its ancestors.  The net effect, over the course of many simulated games, is that the value of a node representing a move will go up or down, hopefully corresponding to whether or not that node represents a good move.  Monte Carlo Tree Search has been used successfully to play games such as [[Go (game)|Go]],<ref>{{cite web|url=http://link.springer.com/chapter/10.1007/978-3-540-87608-3_6|title=Parallel Monte-Carlo Tree Search|publisher=}}</ref> [[Tantrix]],<ref>http://www.tantrix.com:4321/Tantrix/TRobot/MCTS%20Final%20Report.pdf</ref> [[Battleship (game)|Battleship]],<ref>http://www0.cs.ucl.ac.uk/staff/D.Silver/web/Publications_files/pomcp.pdf</ref> [[Havannah]],<ref>{{cite web|url=http://link.springer.com/chapter/10.1007/978-3-642-17928-0_10|title=Improving Monte–Carlo Tree Search in Havannah|publisher=}}</ref> and [[Arimaa]].<ref>http://www.arimaa.com/arimaa/papers/ThomasJakl/bc-thesis.pdf</ref>  {{See also|Computer Go}}  ===Design and visuals=== Monte Carlo methods are also efficient in solving coupled integral differential equations of radiation fields and energy transport, and thus these methods have been used in [[global illumination]] computations that produce photo-realistic images of virtual 3D models, with applications in [[video game]]s, [[architecture]], [[design]], computer generated [[film]]s, and cinematic special effects.<ref>{{harvnb|Szirmay-Kalos|2008}}</ref>  ===Search and Rescue=== The [[US Coast Guard]] utilizes Monte Carlo methods within its computer modeling software [[SAROPS]] in order to calculate the probable locations of vessels during [[Search and Rescue]] operations. Each simulation can generate as many as ten thousand data points which are randomly distributed based upon provided variables.<ref>{{cite web|url=http://insights.dice.com/2014/01/03/how-the-coast-guard-uses-analytics-to-search-for-those-lost-at-sea|title=How the Coast Guard Uses Analytics to Search for Those Lost at Sea|work=Dice Insights}}</ref> Search Patterns are then generated based upon extrapolations of this data in order to optimize the Probability of Containment (POC) and the Probability of Detection (POD), which together will equal an overall Probability of Success (POS). Ultimately this serves as a practical application of [[Probability distribution]] in order to provide the swiftest and most expedient method of rescue, saving both lives and resources.<ref>http://www.ifremer.fr/web-com/sar2011/Presentations/SARWS2011_STONE_L.pdf</ref>  ===Finance and business=== {{See also|Monte Carlo methods in finance| Quasi-Monte Carlo methods in finance| Monte Carlo methods for option pricing| Stochastic modelling (insurance) | Stochastic asset model}} [[Monte Carlo methods in finance]] are often used to [[Corporate finance#Quantifying uncertainty|evaluate investments in projects]] at a business unit or corporate level, or to evaluate [[derivative (finance)|financial derivatives]]. They can be used to model [[project management|project schedules]], where simulations aggregate estimates for worst-case, best-case, and most likely durations for each task to determine outcomes for the overall project. Monte Carlo methods are also used in option pricing, default risk analysis.<ref>{{Cite journal|title = An Introduction to Particle Methods with Financial Applications|url = http://link.springer.com/chapter/10.1007/978-3-642-25746-9_1|publisher = Springer Berlin Heidelberg|journal = Numerical Methods in Finance|date = 2012|isbn = 978-3-642-25745-2|pages = 3–49|series = Springer Proceedings in Mathematics|volume = 12|first = René|last = Carmona|first2 = Pierre|last2 = Del Moral|first3 = Peng|last3 = Hu|first4 = Nadia|last4 = Oudjane|editor-first = René A.|editor-last = Carmona|editor2-first = Pierre Del|editor2-last = Moral|editor3-first = Peng|editor3-last = Hu|editor4-first = Nadia|display-editors = 3 |editor4-last = Oudjane|doi=10.1007/978-3-642-25746-9_1}}</ref><ref>{{Cite journal|title = Numerical Methods in Finance - Springer|url = http://link.springer.com/10.1007/978-3-642-25746-9|journal = link.springer.com|doi=10.1007/978-3-642-25746-9}}</ref><ref name="kr11">{{cite book|last1 = Kroese|first1 = D. P.|last2 = Taimre|first2 = T.|last3 = Botev|first3 = Z. I. |title = Handbook of Monte Carlo Methods|year = 2011|publisher = John Wiley & Sons}}</ref>  ==Use in mathematics== In general, Monte Carlo methods are used in mathematics to solve various problems by generating suitable random numbers (see also [[Random number generation]]) and observing that fraction of the numbers that obeys some property or properties. The method is useful for obtaining numerical solutions to problems too complicated to solve analytically.  The most common application of the Monte Carlo method is Monte Carlo integration.  === Integration === {{Main|Monte Carlo integration}}  [[File:Monte-carlo2.gif|thumb|Monte-Carlo integration works by comparing random points with the value of the function]] [[File:Monte-Carlo method (errors).png|thumb|Errors reduce by a factor of <math>\scriptstyle 1/\sqrt{N}</math>]]  Deterministic [[numerical integration]] algorithms work well in a small number of dimensions, but encounter two problems when the functions have many variables. First, the number of function evaluations needed increases rapidly with the number of dimensions. For example, if 10 evaluations provide adequate accuracy in one dimension, then [[googol|10<sup>100</sup>]] points are needed for 100 dimensions—far too many to be computed. This is called the [[curse of dimensionality]]. Second, the boundary of a multidimensional region may be very complicated, so it may not be feasible to reduce the problem to an [[iterated integral]].<ref name=Press>{{harvnb|Press|Teukolsky|Vetterling|Flannery|1996}}</ref> 100 [[dimension]]s is by no means unusual, since in many physical problems, a "dimension" is equivalent to a [[degrees of freedom (physics and chemistry)|degree of freedom]].  Monte Carlo methods provide a way out of this exponential increase in computation time. As long as the function in question is reasonably [[well-behaved]], it can be estimated by randomly selecting points in 100-dimensional space, and taking some kind of average of the function values at these points. By the [[central limit theorem]], this method displays <math>\scriptstyle 1/\sqrt{N}</math> convergence—i.e., quadrupling the number of sampled points halves the error, regardless of the number of dimensions.<ref name=Press/>  A refinement of this method, known as [[importance sampling]] in statistics, involves sampling the points randomly, but more frequently where the integrand is large. To do this precisely one would have to already know the integral, but one can approximate the integral by an integral of a similar function or use adaptive routines such as [[stratified sampling]], [[Monte Carlo integration#Recursive stratified sampling|recursive stratified sampling]], adaptive umbrella sampling<ref>{{cite journal|last=MEZEI|first=M|title=Adaptive umbrella sampling: Self-consistent determination of the non-Boltzmann bias|journal=Journal of Computational Physics|date=31 December 1986|volume=68|issue=1|pages=237–248|doi=10.1016/0021-9991(87)90054-4|bibcode = 1987JCoPh..68..237M|ref=harv }}</ref><ref>{{cite journal|last=Bartels|first=Christian|last2=Karplus|first2=Martin|title=Probability Distributions for Complex Systems:  Adaptive Umbrella Sampling of the Potential Energy|journal=The Journal of Physical Chemistry B|date=31 December 1997|volume=102|issue=5|pages=865–880|doi=10.1021/jp972280j|ref=harv}}</ref> or the [[VEGAS algorithm]].  A similar approach, the [[quasi-Monte Carlo method]], uses [[low-discrepancy sequence]]s. These sequences "fill" the area better and sample the most important points more frequently, so quasi-Monte Carlo methods can often converge on the integral more quickly.  Another class of methods for sampling points in a volume is to simulate random walks over it ([[Markov chain Monte Carlo]]). Such methods include the [[Metropolis-Hastings algorithm]],  [[Gibbs sampling]], [[Wang and Landau algorithm]], and interacting type MCMC methodologies such as the [[Particle filter|Sequential Monte Carlo]] samplers.<ref>{{Cite journal|title = Sequential Monte Carlo samplers - Del Moral - Doucet - Jasra- 2006 - Journal of the Royal Statistical Society: Series B (Statistical Methodology) - Wiley Online Library|url = http://doi.wiley.com/10.1111/j.1467-9868.2006.00553.x|journal = Journal of the Royal Statistical Society: Series B (Statistical Methodology)|doi=10.1111/j.1467-9868.2006.00553.x|volume=68|pages=411–436}}</ref>  === Simulation and optimization === {{Main|Stochastic optimization}} Another powerful and very popular application for random numbers in numerical simulation is in [[Optimization (mathematics)|numerical optimization]]. The problem is to minimize (or maximize) functions of some vector that often has a large number of dimensions. Many problems can be phrased in this way: for example, a [[computer chess]] program could be seen as trying to find the set of, say, 10 moves that produces the best evaluation function at the end. In the [[traveling salesman problem]] the goal is to minimize distance traveled.  There are also applications to engineering design, such as [[multidisciplinary design optimization]]. It has been applied with [[quasi-one-dimensional models]] to solve particle dynamics problems by efficiently exploring large configuration space.  The [[traveling salesman problem]] is what is called a conventional optimization problem. That is, all the facts (distances between each destination point) needed to determine the optimal path to follow are known with certainty and the goal is to run through the possible travel choices to come up with the one with the lowest total distance. However, let's assume that instead of wanting to minimize the total distance traveled to visit each desired destination, we wanted to minimize the total time needed to reach each destination. This goes beyond conventional optimization since travel time is inherently uncertain (traffic jams, time of day, etc.). As a result, to determine our optimal path we would want to use simulation - optimization to first understand the range of potential times it could take to go from one point to another (represented by a probability distribution in this case rather than a specific distance) and then optimize our travel decisions to identify the best path to follow taking that uncertainty into account.  ===Inverse problems=== Probabilistic formulation of [[inverse problem]]s leads to the definition of a [[probability distribution]] in the model space. This probability distribution combines [[prior probability|prior]] information with new information obtained by measuring some observable parameters (data). As, in the general case, the theory linking data with model parameters is nonlinear, the posterior probability in the model space may not be easy to describe (it may be multimodal, some moments may not be defined, etc.).  When analyzing an inverse problem, obtaining a maximum likelihood model is usually not sufficient, as we normally also wish to have information on the resolution power of the data. In the general case we may have a large number of model parameters, and an inspection of the marginal probability densities of interest may be impractical, or even useless. But it is possible to pseudorandomly generate a large collection of models according to the posterior probability distribution and to analyze and display the models in such a way that information on the relative likelihoods of model properties is conveyed to the spectator. This can be accomplished by means of an efficient Monte Carlo method, even in cases where no explicit formula for the ''a priori'' distribution is available.  The best-known importance sampling method, the Metropolis algorithm, can be generalized, and this gives a method that allows analysis of (possibly highly nonlinear) inverse problems with complex ''a priori'' information and data with an arbitrary noise distribution.<ref>{{harvnb|Mosegaard|Tarantola|1995}}</ref><ref>{{harvnb|Tarantola|2005}}</ref>  ====Petroleum reservoir management==== Monte Carlo methods are very popular in hydrocarbon reservoir management in the context of nonlinear inverse problems. This includes generating computational models of oil and gas reservoirs for consistency with observed production data. For the goal of decision making and uncertainty assessment, Monte Carlo methods are used for generating multiple geological realizations.<ref>{{cite journal | last = Shirangi | first = Mehrdad Gharib | url = http://www.sciencedirect.com/science/article/pii/S0920410513003227 | doi=10.1016/j.petrol.2013.11.025 | volume=113 | title=History matching production data and uncertainty assessment with an efficient TSVD parameterization algorithm | journal=Journal of Petroleum Science and Engineering | pages=54–71}}</ref>  == In popular culture ==  *''The Monte Carlo Method'', the 1998 album by the southern California indie rock band [[Nothing Painted Blue]]. (Scat. 1998).  == See also == {{Portal|Statistics}}  {{Div col||30em}} * [[Auxiliary field Monte Carlo]] * [[Biology Monte Carlo method]] * [[Comparison of risk analysis Microsoft Excel add-ins]] * [[Direct simulation Monte Carlo]] * [[Dynamic Monte Carlo method]] * [[Kinetic Monte Carlo]] * [[Mean field particle methods]] * [[Particle filter]] * [[List of software for Monte Carlo molecular modeling]] * [[Monte Carlo method for photon transport]] * [[Monte Carlo methods for electron transport]] * [[Morris method]] * [[Genetic algorithms]] * [[Quasi-Monte Carlo method]] * [[Sobol sequence]] {{Div col end}}  ==Notes== {{Reflist|30em}}  ==References== * {{cite journal|first=Herbert L. |last=Anderson |authorlink= Herbert L. Anderson|url=http://library.lanl.gov/cgi-bin/getfile?00326886.pdf |title=Metropolis, Monte Carlo and the MANIAC |journal= Los Alamos Science|volume= 14|pages= 96–108|year= 1986 | ref=harvnb}} *{{Cite journal|first=Stephan A. |last=Baeurle|title=Multiscale modeling of polymer materials using field-theoretic methodologies: A survey about recent developments|journal=Journal of Mathematical Chemistry|volume=46|issue=2|pages=363–426|year=2009|doi=10.1007/s10910-008-9467-3 | ref=harvnb}} *{{Cite book |title=Markov Chain Monte Carlo Simulations and Their Statistical Analysis (With Web-Based Fortran Code) |last=Berg |first=Bernd A. |authorlink= |year=2004 |publisher=World Scientific |location=Hackensack, NJ |isbn=981-238-935-0 |page= |pages= |url= | ref=harvnb}} *{{Cite book |title=The Monte Carlo Method in Condensed Matter Physics |last=Binder |first=Kurt |authorlink=Kurt Binder |year=1995 |publisher=Springer |location=New York |isbn=0-387-54369-4 |page= |pages= |url=  | ref=harvnb}} *{{Cite book |title=Monte Carlo and quasi-Monte Carlo methods |last=Caflisch |first=R. E. |authorlink=Russel E. Caflisch |year=1998 |series=Acta Numerica |volume=7 |publisher=Cambridge University Press |location= |isbn= |page= |pages=1–49 |url=  | ref=harvnb}} *{{cite journal|last=Davenport |first=J. H. |authorlink= |title=Primality testing revisited |journal=Proceeding ISSAC '92 Papers from the international symposium on Symbolic and algebraic computation |pages=123&nbsp;129 |publisher= |doi=10.1145/143242.143290 |quote = | ref=harvnb|isbn=0-89791-489-9}} *{{Cite book |title=Sequential Monte Carlo methods in practice |last=Doucet |first=Arnaud |authorlink= |last2=Freitas|first2=Nando de|last3=Gordon|first3=Neil |year=2001 |publisher=Springer |location=New York |isbn=0-387-95146-6 |page= |pages= |url=  | ref=harvnb}} *{{cite journal | last=Eckhardt |first= Roger |year=1987 |title=Stan Ulam, John von Neumann, and the Monte Carlo method|journal= Los Alamos Science, Special Issue |issue=15|pages= 131–137 | ref=harvnb| url = http://library.lanl.gov/cgi-bin/getfile?15-13.pdf}} *{{Cite book |title=Monte Carlo: Concepts, Algorithms, and Applications |last=Fishman |first=G. S. |authorlink= |year=1995 |publisher=Springer |location=New York |isbn=0-387-94527-X |page= |pages= |url=  | ref=harvnb}} *{{cite journal | title = A Monte Carlo tool to simulate breast cancer screening programmes | author = C. Forastero and L. Zamora and D. Guirado and A. Lallena | journal = Phys. In Med. And Biol. |  volume = 55 |  issue = 17 |  pages = 5213–5229 |  year = 2010 |  doi = 10.1088/0031-9155/55/17/021 | ref=harvnb |bibcode = 2010PMB....55.5213F }} *{{Cite journal|first= Leslie M.|last= Golden|title= The Effect of Surface Roughness on the Transmission of Microwave Radiation Through a Planetary Surface |journal=[[Icarus (journal)|Icarus]]|volume= 38|year= 1979| pages=451–455|ref=harvnb|bibcode = 1979Icar...38..451G |doi = 10.1016/0019-1035(79)90199-4|issue= 3 }} *{{Cite book |title=An Introduction to Computer Simulation Methods, Part 2, Applications to Physical Systems |last=Gould |first=Harvey |authorlink= |last2=Tobochnik|first2=Jan |year=1988 |publisher=Addison-Wesley |location=Reading |isbn=0-201-16504-X |page= |pages= |url=  | ref=harvnb}} *{{Cite book |first=Charles|last=Grinstead|first2= J. Laurie|last2=Snell |title=Introduction to Probability| pages= 10–11|publisher=[[American Mathematical Society]]|year= 1997 | ref=harvnb}} *{{Cite book |title=Monte Carlo Methods |last=Hammersley |first=J. M. |authorlink= |last2=Handscomb|first2=D. C. |year=1975 |publisher=Methuen |location=London |isbn=0-416-52340-4 |page= |pages= |url=  | ref=harvnb}} *{{cite book| last=Hartmann| first= A.K.|year=2009|title=Practical Guide to Computer Simulations|publisher=World Scientific|isbn=978-981-283-415-7|url=http://www.worldscibooks.com/physics/6988.html}} *{{cite book|first=Douglas |last=Hubbard |title=How to Measure Anything: Finding the Value of Intangibles in Business | page= 46 |publisher=[[John Wiley & Sons]] |  year= 2007 | ref=harvnb}} *{{cite book|first=Douglas |last=Hubbard  |title=The Failure of Risk Management: Why It's Broken and How to Fix It |publisher= [[John Wiley & Sons]] |year=2009 | ref=harvnb}} *{{Cite book |title=Judgement under Uncertainty: Heuristics and Biases |last=Kahneman |first=D. |authorlink= |last2=Tversky|first2=A. |year=1982 |publisher=Cambridge University Press |location= |isbn= |page= |pages= |url=  | ref=harvnb}} *{{cite book|first=Malvin H.|last=Kalos|first2=Paula A.|last2=Whitlock|title=Monte Carlo  Methods| publisher=[[Wiley-VCH]]|year=2008|isbn=978-3-527-40760-6|ref=harvnb}} *{{Cite book |title=Handbook of Monte Carlo Methods|last=Kroese |first=D. P. |authorlink= |last2=Taimre|first2=T.|last3=Botev|first3=Z.I. |year=2011 |publisher=[[John Wiley & Sons]] |location=New York |isbn=0-470-17793-4 |page=772 |url=http://www.montecarlohandbook.org | ref=harvnb}} *{{Cite journal|first= H. T.|last= MacGillivray|first2= R. J. |last2=Dodd |title=Monte-Carlo simulations of galaxy systems |journal=[[Astrophysics and Space Science]]|volume= 86|issue= 2|year= 1982  | publisher=[[Springer Netherlands]] |url=http://www.springerlink.com/content/rp3g1q05j176r108/fulltext.pdf | ref=harvnb}} *{{Cite book |title=Stochastic Simulation in Physics |last=MacKeown |first=P. Kevin |authorlink= |year=1997 |publisher=Springer |location=New York |isbn=981-3083-26-3 |page= |pages= |url=  | ref=harvnb}} *{{Cite journal|last=Metropolis |first=N. |authorlink=Nicholas Metropolis|url=http://library.lanl.gov/la-pubs/00326866.pdf|title=The beginning of the Monte Carlo method|journal=Los Alamos Science|issue=1987 Special Issue dedicated to Stanislaw Ulam|pages=125–130|year=1987 | ref=harvnb}} *{{Cite journal |last=Metropolis |first=Nicholas |authorlink=Nicholas Metropolis |last2=Rosenbluth|first2=Arianna W.|last3=Rosenbluth|first3=Marshall N.|last4=Teller|first4=Augusta H.|last5=Teller|first5=Edward |year=1953 |title=[[Equation of State Calculations by Fast Computing Machines]] |journal=Journal of Chemical Physics |volume=21 |issue=6 |page=1087 |doi=10.1063/1.1699114 |url= |accessdate= |quote=  | ref=harvnb|bibcode = 1953JChPh..21.1087M }} *{{Cite journal |last=Metropolis |first=N. |authorlink=Nicholas Metropolis |last2=Ulam|first2 = S. |authorlink2=Stanislaw Ulam |year=1949 |title=The Monte Carlo Method |journal=Journal of the American Statistical Association |volume=44 |issue=247 |pages=335–341 |doi=10.2307/2280232|accessdate= |quote= |pmid=18139350 |publisher=American Statistical Association  | ref=harvnb |jstor=2280232}} *{{cite journal | doi = 10.1002/prot.340150104 | title = Insertion of peptide chains into lipid membranes: an off-lattice Monte Carlo dynamics model | author = M. Milik and J. Skolnick| journal = Proteins |  volume = 15 |  issue = 1 |  pages = 10–25 |date=Jan 1993 | pmid = 8451235 | ref=harvnb}} *{{Cite journal |last=Mosegaard |first=Klaus |authorlink= |last2=Tarantola|first2=Albert |year=1995 |title=Monte Carlo sampling of solutions to inverse problems |journal=J. Geophys. Res. |volume=100 |issue=B7 |pages=12431–12447 |doi=10.1029/94JB03097 |url= |accessdate= |quote=  | ref=harvnb|bibcode = 1995JGR...10012431M }} *{{cite journal | title = Monte Carlo Simulations of Proteins in Cages: Influence of Confinement on the Stability of Intermediate States | author = P. Ojeda and M. Garcia and A. Londono and N.Y. Chen | journal = Biophys. Jour. |  volume = 96 |  issue = 3 |  pages = 1076–1082 |date=Feb 2009 |  doi = 10.1529/biophysj.107.125369 |  publisher = Biophysical Society | ref=harvnb|bibcode = 2009BpJ....96.1076O }} *{{cite journal |doi=10.1504/IJVD.2001.001963 |last=Int Panis|first=L |last2= De Nocker |first2= L |last3= De Vlieger |first3= I |last4= Torfs |first4= R |year=2001 |title=Trends and uncertainty in air pollution impacts and external costs of Belgian passenger car traffic International |journal=Journal of Vehicle Design |volume=27 |issue=1–4 |pages=183–194 | ref=harvnb}} *{{cite journal |last=Int Panis |first= L |last2= Rabl |first2= A |last3= De Nocker |first3= L |last4= Torfs |first4= R |year=2002 |title=Diesel or Petrol ? An environmental comparison hampered by uncertainty |journal=Mitteilungen Institut für Verbrennungskraftmaschinen und Thermodynamik |editor=P. Sturm |publisher=Technische Universität Graz Austria |volume=Heft 81 Vol 1 |pages=48–54 | ref=harvnb}} *{{cite book |last1=Press |first1= William H.|authorlink1= |last2= Teukolsky|first2=Saul A. |last3= Vetterling|first3=William T. |last4= Flannery|first4=Brian P. |title= Numerical Recipes in Fortran 77: The Art of Scientific Computing |edition= Second |series= Fortran Numerical Recipes|volume= 1 |year=1996 |origyear= 1986|publisher= [[Cambridge University Press]]|isbn=0-521-43064-X |ref=harvnb}} *{{Cite book| last=Ripley|first=B. D.|title=Stochastic Simulation|publisher = [[Wiley & Sons]]|year=1987}} *{{Cite book |title=Monte Carlo Statistical Methods |last=Robert |first=C. P. |authorlink= |last2=Casella |first2=G. |year=2004 |edition=2nd |publisher=Springer |location=New York |isbn=0-387-21239-6 |page= |pages= |url=  | ref=harvnb}} *{{Cite book |title=Simulation and the Monte Carlo Method |last=Rubinstein |first=R. Y. |authorlink= |last2=Kroese |first2=D. P. |year=2007 |edition=2nd |publisher=John Wiley & Sons |location=New York |isbn=978-0-470-17793-8 |page= |pages= |url=  | ref=harvnb}} *{{Cite journal|last= Savvides|first= Savvakis C.|title=Risk Analysis in Investment Appraisal|journal= Project Appraisal Journal|volume= 9|year= 1994|doi=10.2139/ssrn.265905|ref=harvnb|issue= 1}} *{{cite book |last1=Sawilowsky |first1=Shlomo S. |last2=Fahoome |first2=Gail C. |year=2003 |title=Statistics via Monte Carlo Simulation with Fortran |publisher=Rochester Hills, MI: JMASM |isbn=0-9740236-0-4 | ref=harvnb}} *{{cite journal|last1=Sawilowsky |first1=Shlomo S. |title=You think you've got trivials? |journal =[[Journal of Modern Applied Statistical Methods]] | volume=2|issue=1|pages = 218–225|year=2003 | url = http://education.wayne.edu/jmasm/sawilowsky_effect_size_debate.pdf| ref=harvnb}} *{{Cite book | last =Silver | first =David | last2 =Veness | first2 =Joel | year =2010 | contribution =Monte-Carlo Planning in Large POMDPs | contribution-url =http://books.nips.cc/papers/files/nips23/NIPS2010_0740.pdf | editor-last =Lafferty | editor-first =J. | editor2-last =Williams | editor2-first =C. K. I. | editor3-last =Shawe-Taylor | editor3-first =J. | editor4-last =Zemel | editor4-first =R. S. | editor5-last =Culotta | editor5-first =A. | title =Advances in Neural Information Processing Systems 23 | publisher =Neural Information Processing Systems Foundation | volume = | pages = | isbn = | doi =   | ref =harv}} *{{cite book| first=László |last=Szirmay-Kalos|title=Monte Carlo Methods in Global Illumination - Photo-realistic Rendering with Randomization| publisher = VDM Verlag Dr. Mueller e.K.|year = 2008|isbn=978-3-8364-7919-6}} *{{Cite book |title=Inverse Problem Theory |last=Tarantola |first=Albert |authorlink=Albert Tarantola |year=2005 |publisher=Society for Industrial and Applied Mathematics |location=Philadelphia |isbn=0-89871-572-5 |page= |pages= |url=http://www.ipgp.jussieu.fr/~tarantola/Files/Professional/SIAM/index.html|ref=harvnb}} *{{Cite book|first=David |last=Vose |title=Risk Analysis, A Quantitative Guide|edition=Third|publisher=[[John Wiley & Sons]]|year= 2008 | ref=harvnb}}  {{Commons category|Monte Carlo method}}  {{Statistics}}  {{Authority control}}  [[Category:Monte Carlo methods| ]] [[Category:Numerical analysis]] [[Category:Statistical mechanics]] [[Category:Computational physics]] [[Category:Sampling techniques]] [[Category:Statistical approximations]] [[Category:Stochastic simulation]] [[Category:Probabilistic complexity theory]] [[Category:Risk analysis]] [[Category:Risk management]]
