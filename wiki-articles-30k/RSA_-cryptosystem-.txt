   RSA is one of the first practical public-key cryptosystems and is widely used for secure data transmission. In such a cryptosystem, the encryption key is public and differs from the decryption key which is kept secret. In RSA, this asymmetry is based on the practical difficulty of factoring the product of two large prime numbers, the factoring problem. RSA is made of the initial letters of the surnames of Ron Rivest, Adi Shamir, and Leonard Adleman, who first publicly described the algorithm in 1977. Clifford Cocks, an English mathematician working for the UK intelligence agency GCHQ, had developed an equivalent system in 1973, but it was not declassified until 1997. A user of RSA creates and then publishes a public key based on two large prime numbers, along with an auxiliary value. The prime numbers must be kept secret. Anyone can use the public key to encrypt a message, but with currently published methods, if the public key is large enough, only someone with knowledge of the prime numbers can feasibly decode the message. Breaking RSA encryption is known as the RSA problem; whether it is as hard as the factoring problem remains an open question. RSA is a relatively slow algorithm, and because of this it is less commonly used to directly encrypt user data. More often, RSA passes encrypted shared keys for symmetric key cryptography which in turn can perform bulk encryption-decryption operations at much higher speed.  The idea of an asymmetric public-private key cryptosystem is attributed to Diffie and Hellman, who published the concept in 1976. The same two also introduced digital signatures and attempted to apply number theory. Their formulation used a shared secret key created from exponentiation of some number, modulo a prime number. However, they left open the problem of realizing a one-way function, possibly because the difficulty of factoring was not well studied at the time. Ron Rivest, Adi Shamir, and Leonard Adleman at MIT made several attempts over the course of a year to create a one-way function that is hard to invert. Rivest and Shamir, as computer scientists, proposed many potential functions while Adleman, as a mathematician, was responsible for finding their weaknesses. They tried many approaches including "knapsack-based" and "permutation polynomials". For a time they thought it was impossible for what they wanted to achieve due to contradictory requirements. In April 1977, they spent Passover at the house of a student and drank a good deal of Manischewitz wine before returning to their home at around midnight. Rivest, unable to sleep, lay on the couch with a math textbook and started thinking about their one-way function. He spent the rest of the night formalizing his idea and had much of the paper ready by daybreak. The algorithm is now known as RSA – the initials of their surnames in same order as their paper. Clifford Cocks, an English mathematician working for the UK intelligence agency GCHQ, described an equivalent system in an internal document in 1973. However, given the relatively expensive computers needed to implement it at the time, it was mostly considered a curiosity and, as far as is publicly known, was never deployed. His discovery, however, was not revealed until 1997 due to its top-secret classification. Kid-RSA (KRSA) is a simplified public-key cipher published in 1997, designed for educational purposes. Some people feel that learning Kid-RSA gives insight into RSA and other public-key ciphers, analogous to simplified DES. Jim Sauerberg "From Private to Public Key Ciphers in Three Easy Steps".  Margaret Cozzens and Steven J. Miller. "The Mathematics of Encryption: An Elementary Introduction". p. 180.  Alasdair McAndrew. "Introduction to Cryptography with Open-Source Software". p. 12.  Surender R Chiluka. "Public key Cryptography".  Neal Koblitz. "Cryptography As a Teaching Tool". Cryptologia, Vol. 21, No. 4 (1997).  MIT was granted  for a "Cryptographic communications system and method" that used the algorithm, on September 20, 1983. Though the patent was going to expire on September 21, 2000 (the term of patent was 17 years at the time), the algorithm was released to the public domain by RSA Security on September 6, 2000, two weeks earlier. Since a paper describing the algorithm had been published in August 1977, prior to the December 1977 filing date of the patent application, regulations in much of the rest of the world precluded patents elsewhere and only the US patent was granted. Had Cocks' work been publicly known, a patent in the US would not have been possible either. From the DWPI's abstract of the patent,  The RSA algorithm involves four steps: key generation, key distribution, encryption and decryption. RSA involves a public key and a private key.  The public key can be known by everyone and is used for encrypting messages.  The intention is that messages encrypted with the public key can only be decrypted in a reasonable amount of time using the private key. The basic principle behind RSA is the observation that it is practical to find three very large positive integers , and  such that with modular exponentiation for all : (m^e)^d \mod{n} = m and that even knowing  and  or even  it can be extremely difficult to find . Additionally, for some operations it is convenient that the order of the two exponentiations can be changed and that this relation also implies: (m^d)^e \mod{n}= m To enable Bob to send his encrypted messages, Alice transmits her public key  to Bob via a reliable, but not necessarily secret route, and keeps the private key  secret and this is never revealed to anyone. Once distributed the keys can be reused over and over. Bob then wishes to send message  to Alice. He first turns  into an integer , such that   and  by using an agreed-upon reversible protocol known as a padding scheme. He then computes the ciphertext , using the public key  of Alice, corresponding to  c \equiv m^e \mod{n}  This can be done efficiently, even for 500-bit numbers, using modular exponentiation. Bob then transmits  to Alice. Alice can recover  from  by using her private key exponent  by computing c^d \equiv (m^e)^d \equiv m \mod{n} Given , she can recover the original message  by reversing the padding scheme. The keys for the RSA algorithm are generated the following way: :*This is more clearly stated as: solve for d given  :*d is kept as the private key exponent. The public key consists of the modulus n and the public (or encryption) exponent e. The private key consists of the modulus n and the private (or decryption) exponent d, which must be kept secret. p, q, and φ(n) must also be kept secret because they can be used to calculate d. Since any common factors of (p-1) and (q-1) are present in the factorisation of p*q-1,"Further Attacks ON Server-Aided RSA Cryptosystems", James McKee and Richard Pinch, http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.33.1333 it is recommended that (p-1) and (q-1) have only very small common factors, if any besides the necessary 2.A Course in Number Theory and Cryptography, Graduate Texts in Math. No. 114, Springer-Verlag, New York, 1987. Neal Koblitz, Second edition, 1994. p94"common factors in (p-1) and (q-1)",Viktor Dukhovni, openssl-dev Digest, Vol 9, Issue 4, https://www.mail-archive.com/openssl-dev%40openssl.org/msg39736.html, https://www.mail-archive.com/openssl-dev%40openssl.org/msg39725.html Here is an example of RSA encryption and decryption.  The parameters used here are  artificially small, but one can also use OpenSSL to generate and examine a real keypair. The public key is (, ). For a padded plaintext message m, the encryption function is c(m) = m^{17} \; \operatorname{mod}\; 3233 The private key is (). For an encrypted ciphertext c, the decryption function is m(c) = c^{2753} \; \operatorname{mod}\; 3233 For instance, in order to encrypt , we calculate c = 65^{17} \; \operatorname{mod}\; 3233 = 2790  To decrypt , we calculate m = 2790^{2753} \; \operatorname{mod}\; 3233 = 65  Both of these calculations can be computed efficiently using the square-and-multiply algorithm for modular exponentiation. In real-life situations the primes selected would be much larger; in our example it would be trivial to factor n, 3233 (obtained from the freely available public key) back to the primes p and q. Given e, also from the public key, we could then compute d and so acquire the private key. Practical implementations use the Chinese remainder theorem to speed up the calculation using modulus of factors (mod pq using mod p and mod q). The values dp, dq and qinv, which are part of the private key are computed as follows: \begin{align}            d_p &= d\; \operatorname{mod}\; (p-1) = 2753 \; \operatorname{mod}\; (61-1) = 53 \\            d_q &= d\; \operatorname{mod}\;(q-1) = 2753 \; \operatorname{mod}\; (53-1) = 49 \\   q_\text{inv} &= q^{-1} \; \operatorname{mod}\; p = 53^{-1} \; \operatorname{mod}\; 61 = 38 \\                &\Rightarrow (q_\text{inv} \times q) \; \operatorname{mod}\; p = 38 \times 53 \; \operatorname{mod}\; 61= 1 \end{align} Here is how dp, dq and qinv are used for efficient decryption. (Encryption is efficient by choice of public exponent e) \begin{align}   m_1 &= c^{d_p} \; \operatorname{mod}\; p = 2790^{53} \; \operatorname{mod}\; 61 = 4 \\   m_2 &= c^{d_q} \; \operatorname{mod}\; q = 2790^{49} \; \operatorname{mod}\; 53 = 12 \\     h &= (q_\text{inv} \times (m_1 - m_2)) \; \operatorname{mod}\; p = (38 \times -8) \; \operatorname{mod}\; 61 = 1 \\     m &= m_2 + h \times q = 12 + 1 \times 53 = 65 \end{align} A working example in JavaScript.  'use strict'; /** * RSA hash function reference implementation.  *  * @namespace  */ var RSA = {}; /** * Generates an RSA hash  * https://en.wikipedia.org/wiki/RSA_(cryptosystem)#A_working_example  *  * @returns {array} Result of RSA generation  */ RSA.generate = function(){ /**      * Calculate modular multiplicative inverse.      * https://en.wikipedia.org/wiki/Modular_multiplicative_inverse      * Function based on PHP variant on http://rosettacode.org/wiki/Modular_inverse      *      * @param   {a} int      * @param   {n} int      * @returns {int} Result of modular multiplicative inverse.      */     function modular_multiplicative_inverse(a, n){      var t  = 0,             nt = 1,             r  = n,             nr = a % n;         if (n  1) { return -1; }      if (t  Suppose Alice uses Bob's public key to send him an encrypted message.  In the message, she can claim to be Alice but Bob has no way of verifying that the message was actually from Alice since anyone can use Bob's public key to send him encrypted messages.  In order to verify the origin of a message, RSA can also be used to sign a message. Suppose Alice wishes to send a signed message to Bob. She can use her own private key to do so. She produces a hash value of the message, raises it to the power of d (modulo n) (as she does when decrypting a message), and attaches it as a "signature" to the message. When Bob receives the signed message, he uses the same hash algorithm in conjunction with Alice's public key. He raises the signature to the power of e (modulo n) (as he does when encrypting a message), and compares the resulting hash value with the message's actual hash value. If the two agree, he knows that the author of the message was in possession of Alice's private key, and that the message has not been tampered with since. The proof of the correctness of RSA is based on Fermat's little theorem. This theorem states that if p is prime and p does not divide an integer a then  a^{p - 1} \equiv 1 \pmod{p} We want to show that  for every integer m when p and q are distinct prime numbers and e and d are positive integers satisfying e d \equiv 1 \pmod{\phi(pq)}. Since \phi(pq) = (p - 1)(q - 1), we can write ed - 1 = h(p - 1)(q - 1) for some nonnegative integer h. To check whether two numbers, like med and m, are congruent mod pq it suffices (and in fact is equivalent) to check they are congruent mod p and mod q separately. (This is part of the Chinese remainder theorem, although it is not the significant part of that theorem.) To show , we consider two cases:  and \not\equiv. In the first case med is a multiple of p, so . In the second case m^{e d} = m^{(ed - 1)}m = m^{h(p - 1)(q - 1)}m = \left(m^{p - 1}\right)^{h(q - 1)}m \equiv 1^{h(q - 1)}m \equiv m \pmod{p} where we used Fermat's little theorem to replace mp−1 mod p with 1. The verification that  proceeds in a similar way, treating separately the cases  and \not\equiv, using Fermat's little theorem for modulus q in the second case. This completes the proof that, for any integer m, and integers e, d such that e d \equiv 1 \pmod{\phi(pq)}, \left(m^e\right)^d \equiv m \pmod{pq} Although the original paper of Rivest, Shamir, and Adleman used Fermat's little theorem to explain why RSA works, it is common to find proofs that rely instead on Euler's theorem. We want to show that , where  is a product of two different prime numbers and e and d are positive integers satisfying . Since e and d are positive, we can write  for some non-negative integer h. Assuming that m is relatively prime to n, we have m^{ed} = m^{1 + h\varphi(n)} = m \left(m^{\varphi(n)}\right)^{h} \equiv m (1)^{h} \equiv m \pmod{n}  where the second-last congruence follows from Euler's theorem. When m is not relatively prime to n, the argument just given is invalid. This is highly improbable (only a proportion of  numbers have this property), but even in this case the desired congruence is still true. Either  or , and these cases can be treated using the previous proof. There are a number of attacks against plain RSA as described below. To avoid these problems, practical RSA implementations typically embed some form of structured, randomized padding into the value m before encrypting it.  This padding ensures that m does not fall into the range of insecure plaintexts, and that a given message, once padded, will encrypt to one of a large number of different possible ciphertexts. Standards such as PKCS#1 have been carefully designed to securely pad messages prior to RSA encryption.  Because these schemes pad the plaintext m with some number of additional bits, the size of the un-padded message M must be somewhat smaller.  RSA padding schemes must be carefully designed so as to prevent sophisticated attacks which may be facilitated by a predictable message structure.  Early versions of the PKCS#1 standard (up to version 1.5) used a construction that appears to make RSA semantically secure. However, at Eurocrypt 2000, Coron et al. showed that for some types of messages, this padding does not provide a high enough level of security. Furthermore, at Crypto 1998, Bleichenbacher showed that this version is vulnerable to a practical adaptive chosen ciphertext attack. Later versions of the standard include Optimal Asymmetric Encryption Padding (OAEP), which prevents these attacks. As such, OAEP should be used in any new application, and PKCS#1 v1.5 padding should be replaced wherever possible. The PKCS#1 standard also incorporates processing schemes designed to provide additional security for RSA signatures, e.g. the Probabilistic Signature Scheme for RSA (RSA-PSS). Secure padding schemes such as RSA-PSS are as essential for the security of message signing as they are for message encryption. Two US patents on PSS were granted (USPTO 6266771 and USPTO 70360140); however, these patents expired on 24 July 2009 and 25 April 2010, respectively.  Use of PSS no longer seems to be encumbered by patents.  Note that using different RSA key-pairs for encryption and signing is potentially more secure.http://stackoverflow.com/questions/5133246/what-is-the-purpose-of-using-separate-key-pairs-for-signing-and-encryptionhttp://www.di-mgt.com.au/rsa_alg.html#weaknesses For efficiency many popular crypto libraries (like OpenSSL, Java and .NET) use the following optimization for decryption and signing based on the Chinese remainder theorem. The following values are precomputed and stored as part of the private key: These values allow the recipient to compute the exponentiation  more efficiently as follows: This is more efficient than computing exponentiation by squaring even though two modular exponentiations have to be computed. The reason is that these two modular exponentiations both use a smaller exponent and a smaller modulus.  The security of the RSA cryptosystem is based on two mathematical problems: the problem of factoring large numbers and the RSA problem.  Full decryption of an RSA ciphertext is thought to be infeasible on the assumption that both of these problems are hard, i.e., no efficient algorithm exists for solving them.  Providing security against partial decryption may require the addition of a secure padding scheme. The RSA problem is defined as the task of taking eth roots modulo a composite n: recovering a value m such that , where  is an RSA public key and c is an RSA ciphertext.  Currently the most promising approach to solving the RSA problem is to factor the modulus n.  With the ability to recover prime factors, an attacker can compute the secret exponent d from a public key , then decrypt c using the standard procedure.  To accomplish this, an attacker factors n into p and q, and computes  which allows the determination of d from e.  No polynomial-time method for factoring large integers on a classical computer has yet been found, but it has not been proven that none exists.  See integer factorization for a discussion of this problem. Multiple polynomial quadratic sieve (MPQS) can be used to factor the public modulus n. The time taken to factor 128-bit and 256-bit n on a desktop computer  are respectively 2 seconds and 35 minutes. A tool called yafu can be used to optimize this process.The automation within YAFU is state-of-the-art, combining factorization algorithms in an intelligent and adaptive methodology that minimizes the time to find the factors of arbitrary input integers. Most algorithm implementations are multi-threaded, allowing YAFU to fully utilize multi- or many-core processors (including SNFS, GNFS, SIQS, and ECM). YAFU is primarily a command-line driven tool.http://yafu.sourceforge.net/ The time taken to factor n using yafu on the same computer was reduced to 103.1746 seconds. Yafu requires the GGNFS binaries to factor N that are 320 bits or larger. This is a very complicated software that requires a certain amount of technical skill to install and configure. It took about 5720s to factor 320bit-N on the same computer. In 2009, Benjamin Moody has factored an RSA-512 bit key in 73 days using only public software (GGNFS) and his desktop computer (dual-core Athlon64 at 1,900&nbsp;MHz). Just under 5 gigabytes of disk was required and about 2.5 gigabytes of RAM for the sieving process. The first RSA-512 factorization in 1999 required the equivalent of 8,400 MIPS years over an elapsed time of about 7 months.http://lukenotricks.blogspot.se/2009/08/solo-desktop-factorization-of-rsa-512.html Rivest, Shamir and Adleman note that Miller has shown that – assuming the Extended Riemann Hypothesis – finding d from n and e is as hard as factoring n into p and q (up to a polynomial time difference).Gary L. Miller, "Riemann's Hypothesis and Tests for Primality"  However, Rivest, Shamir and Adleman note (in section IX / D of their paper) that they have not found a proof that inverting RSA is equally hard as factoring. , the largest factored RSA number was 768 bits long (232 decimal digits, see RSA-768). Its factorization, by a state-of-the-art distributed implementation, took around fifteen hundred CPU years (two years of real time, on many hundreds of computers). No larger RSA key is publicly known to have been factored. In practice, RSA keys are typically 1024 to 4096 bits long. Some experts believe that 1024-bit keys may become breakable in the near future or may already be breakable by a sufficiently well-funded attacker (though this is disputed); few see any way that 4096-bit keys could be broken in the foreseeable future.  Therefore, it is generally presumed that RSA is secure if n is sufficiently large.  If n is 300 bits or shorter, it can be factored in a few hours on a personal computer, using software already freely available. Keys of 512 bits have been shown to be practically breakable in 1999 when RSA-155 was factored by using several hundred computers and are now factored in a few weeks using common hardware.518-bit GNFS with msieve Exploits using 512-bit code-signing certificates that may have been factored were reported in 2011.RSA-512 certificates abused in-the-wild A theoretical hardware device named TWIRL and described by Shamir and Tromer in 2003 called into question the security of 1024 bit keys. It is currently recommended that n be at least 2048 bits long.Has the RSA algorithm been compromised as a result of Bernstein's Paper? What key size should I be using? In 1994, Peter Shor showed that a quantum computer (if one could ever be practically created for the purpose) would be able to factor in polynomial time, breaking RSA; see Shor's algorithm. Finding the large primes p and q is usually done by testing random numbers of the right size with probabilistic primality tests which quickly eliminate virtually all non-primes. Numbers p and q should not be 'too close', lest the Fermat factorization for n be successful, if p − q, for instance is less than 2n1/4 (which for even small 1024-bit values of n is ) solving for p and q is trivial. Furthermore, if either p − 1 or q − 1 has only small prime factors, n can be factored quickly by Pollard's p − 1 algorithm, and these values of p or q should therefore be discarded as well. It is important that the private key d be large enough. Michael J. Wiener showed  that if p is between q and 2q (which is quite typical) and , then d can be computed efficiently from n and&nbsp;e. There is no known attack against small public exponents such as , provided that proper padding is used.  Coppersmith's Attack has many applications in attacking RSA specifically if the public exponent e is small and if the encrypted message is short and not padded. 65537 is a commonly used value for&nbsp;e; this value can be regarded as a compromise between avoiding potential small exponent attacks and still allowing efficient encryptions (or signature verification). The NIST Special Publication on Computer Security (SP 800-78 Rev 1 of August 2007) does not allow public exponents e smaller than 65537, but does not state a reason for this restriction. A cryptographically strong random number generator, which has been properly seeded with adequate entropy, must be used to generate the primes p and q. An analysis comparing millions of public keys gathered from the Internet was carried out in early 2012 by Arjen K. Lenstra, James P. Hughes, Maxime Augier, Joppe W. Bos, Thorsten Kleinjung and Christophe Wachter. They were able to factor 0.2% of the keys using only Euclid's algorithm. They exploited a weakness unique to cryptosystems based on integer factorization. If  is one public key and  is another, then if by chance  (but q is not equal to q'), then a simple computation of  factors both n and n′, totally compromising both keys. Lenstra et al. note that this problem can be minimized by using a strong random seed of bit-length twice the intended security level, or by employing a deterministic function to choose q given p, instead of choosing p and q independently. Nadia Heninger was part of a group that did a similar experiment. They used an idea of Daniel J. Bernstein to compute the GCD of each RSA key n against the product of all the other keys n′ they had found (a 729 million digit number), instead of computing each gcd(n,n′) separately, thereby achieving a very significant speedup since after one large division the GCD problem is of normal size. Heninger says in her blog that the bad keys occurred almost entirely in embedded applications, including "firewalls, routers, VPN devices, remote server administration devices, printers, projectors, and VOIP phones" from over 30 manufacturers. Heninger explains that the one-shared-prime problem uncovered by the two groups results from situations where the pseudorandom number generator is poorly seeded initially and then reseeded between the generation of the first and second primes. Using seeds of sufficiently high entropy obtained from key stroke timings or electronic diode noise or atmospheric noise from a radio receiver tuned between stations should solve the problem.https://freedom-to-tinker.com/blog/nadiah/new-research-theres-no-need-panic-over-factorable-keys-just-mind-your-ps-and-qs Strong random number generation is important throughout every phase of public key cryptography. For instance, if a weak generator is used for the symmetric keys that are being distributed by RSA, then an eavesdropper could bypass the RSA and guess the symmetric keys directly. Kocher described a new attack on RSA in 1995: if the attacker Eve knows Alice's hardware in sufficient detail and is able to measure the decryption times for several known ciphertexts, she can deduce the decryption key d quickly.  This attack can also be applied against the RSA signature scheme.  In 2003, Boneh and Brumley demonstrated a more practical attack capable of recovering RSA factorizations over a network connection (e.g., from a Secure Sockets Layer (SSL)-enabled webserver)Remote timing attacks are practical. . SSYM'03 Proceedings of the 12th conference on USENIX Security Symposium.  This attack takes advantage of information leaked by the Chinese remainder theorem optimization used by many RSA implementations. One way to thwart these attacks is to ensure that the decryption operation takes a constant amount of time for every ciphertext.  However, this approach can significantly reduce performance.  Instead, most RSA implementations use an alternate technique known as cryptographic blinding.  RSA blinding makes use of the multiplicative property of RSA.  Instead of computing , Alice first chooses a secret random value r and computes .  The result of this computation after applying Euler's Theorem is  and so the effect of r can be removed by multiplying by its inverse.  A new value of r is chosen for each ciphertext.  With blinding applied, the decryption time is no longer correlated to the value of the input ciphertext and so the timing attack fails. In 1998, Daniel Bleichenbacher described the first practical adaptive chosen ciphertext attack, against RSA-encrypted messages using the PKCS #1 v1 padding scheme (a padding scheme randomizes and adds structure to an RSA-encrypted message, so it is possible to determine whether a decrypted message is valid). Due to flaws with the PKCS #1 scheme, Bleichenbacher was able to mount a practical attack against RSA implementations of the Secure Socket Layer protocol, and to recover session keys. As a result of this work, cryptographers now recommend the use of provably secure padding schemes such as Optimal Asymmetric Encryption Padding, and RSA Laboratories has released new versions of PKCS #1 that are not vulnerable to these attacks. A side-channel attack using branch prediction analysis (BPA) has been described. Many processors use a branch predictor to determine whether a conditional branch in the instruction flow of a program is likely to be taken or not. Often these processors also implement simultaneous multithreading (SMT). Branch prediction analysis attacks use a spy process to discover (statistically) the private key when processed with these processors. Simple Branch Prediction Analysis (SBPA) claims to improve BPA in a non-statistical way. In their paper, "On the Power of Simple Branch Prediction Analysis",http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.80.1438&rep=rep1&type=pdf the authors of SBPA (Onur Aciicmez and Cetin Kaya Koc) claim to have discovered 508 out of 512 bits of an RSA key in 10 iterations. A power fault attack on RSA implementations has been described in 2010.FaultBased Attack of RSA Authentication The authors  recovered the key by varying the CPU power voltage outside limits; this caused multiple power faults on the server.   Bits !! Time 128 Less than 2 seconds 192 16 seconds 256 35 minutes 260 1 hour Bits !! Time !! Memory used 128 0.4886 seconds 0.1&nbsp;MiB 192 3.9979 seconds 0.5&nbsp;MiB 256 103.1746 seconds 3&nbsp;MiB 300 1175.7826 seconds 10.9&nbsp;MiB Choose two distinct prime numbers p and q. For security purposes, the integers p and q should be chosen at random, and should be similar in magnitude but 'differ in length by a few digits' to make factoring harder. Prime integers can be efficiently found using a primality test. Compute . n is used as the modulus for both the public and private keys.  Its length, usually expressed in bits, is the key length. Compute , where φ is Euler's totient function. This value is kept private. Choose an integer e such that  and ; i.e., e and φ(n) are coprime. e is released as the public key exponent. e having a short bit-length and small Hamming weight results in more efficient encryption – most commonly . However, much smaller values of e (such as 3) have been shown to be less secure in some settings. Determine d as ; i.e., d is the modular multiplicative inverse of e (modulo φ(n)). An alternative, used by PKCS#1, is to choose d matching   with , where lcm is the least common multiple. Using λ instead of φ(n) allows more choices for d. λ can also be defined using the Carmichael function, λ(n). Choose two distinct prime numbers, such as : p = 61 and q = 53 Compute  giving : n = 61\times 53 = 3233 Compute the totient of the product as  giving : \varphi(3233) = (61 - 1)(53 - 1) = 3120 Choose any number  that is coprime to 3120. Choosing a prime number for e leaves us only to check that e is not a divisor of 3120. : Let e = 17 Compute d, the modular multiplicative inverse of  yielding, : d = 2753 : Worked example for the modular multiplicative inverse: : e \times d \; \operatorname{mod}\; \varphi(n) = 1 : 17 \times 2753  \; \operatorname{mod}\; 3120 = 1 When encrypting with low encryption exponents (e.g., ) and small values of the m, (i.e., ) the result of  is strictly less than the modulus n.  In this case, ciphertexts can be easily decrypted by taking the eth root of the ciphertext over the integers. If the same clear text message is sent to e or more recipients in an encrypted way, and the receivers share the same exponent e, but different p, q, and therefore n, then it is easy to decrypt the original clear text message via the Chinese remainder theorem. Johan Håstad noticed that this attack is possible even if the cleartexts are not equal, but the attacker knows a linear relation between them. This attack was later improved by Don Coppersmith. Because RSA encryption is a deterministic encryption algorithm (i.e., has no random component) an attacker can successfully launch a chosen plaintext attack against the cryptosystem, by encrypting likely plaintexts under the public key and test if they are equal to the ciphertext. A cryptosystem is called semantically secure if an attacker cannot distinguish two encryptions from each other even if the attacker knows (or has chosen) the corresponding plaintexts. As described above, RSA without padding is not semantically secure.  RSA has the property that the product of two ciphertexts is equal to the encryption of the product of the respective plaintexts. That is . Because of this multiplicative property a chosen-ciphertext attack is possible. E.g., an attacker, who wants to know the decryption of a ciphertext  may ask the holder of the private key to decrypt an unsuspicious-looking ciphertext  for some value r chosen by the attacker. Because of the multiplicative property c′ is the encryption of . Hence, if the attacker is successful with the attack, he will learn  from which he can derive the message m by multiplying mr with the modular inverse of r modulo n. p and q: the primes from the key generation, d_P = d\text{ (mod }p - 1\text{)}, d_Q = d\text{ (mod }q - 1\text{)} and q_\text{inv} = q^{-1}\text{ (mod }p\text{)}. m_1 = c^{d_P}\text{ (mod }p\text{)} m_2 = c^{d_Q}\text{ (mod }q\text{)} h = q_\text{inv}(m_1 - m_2)\text{ (mod }p\text{)} (if m_1 < m_2</math> then some libraries compute ''h'' as <math>q_\text{inv}((m_1 + \left\lceil q/p \right\rceil p) - m_2)\text{ (mod }p\text{)}) m = m_2 + hq\, Trapdoor function Public-key cryptography Key exchange Diffie–Hellman key exchange Key management Cryptographic key length Computational complexity theory Acoustic cryptanalysis The Original RSA Patent as filed with the U.S. Patent Office by Rivest; Ronald L. (Belmont, MA), Shamir; Adi (Cambridge, MA), Adleman; Leonard M. (Arlington, MA), December 14, 1977, . PKCS #1: RSA Cryptography Standard (RSA Laboratories website) The PKCS #1 standard "provides recommendations for the implementation of public-key cryptography based on the RSA algorithm, covering the following aspects: cryptographic primitives; encryption schemes; signature schemes with appendix; ASN.1 syntax for representing keys and for identifying the schemes". Thorough walk through of RSA Prime Number Hide-And-Seek: How the RSA Cipher Works Onur Aciicmez, Cetin Kaya Koc, Jean-Pierre Seifert: On the Power of Simple Branch Prediction Analysis A New Vulnerability In RSA Cryptography, CAcert NEWS Blog Example of an RSA implementation with PKCS#1 padding (GPL source code) Kocher's article about timing attacks An animated explanation of RSA with its mathematical background by CrypTool A spreadsheet implementing RSA Hacking Secret Ciphers with Python, Chapter 24, Public Key Cryptography and the RSA Cipher How RSA Key used for Encryption in in real world
