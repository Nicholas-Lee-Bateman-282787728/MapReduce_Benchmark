 Unit quaternions, also known as versors, provide a convenient mathematical notation for representing orientations and rotations of objects in three dimensions. Compared to Euler angles they are simpler to compose and avoid the problem of gimbal lock. Compared to rotation matrices they are more numerically stable and may be more efficient. Quaternions have found their way into applications in computer graphics, computer vision, robotics, navigation, molecular dynamics, flight dynamics,Amnon Katz (1996) Computational Rigid Vehicle Dynamics, Krieger Publishing Co. ISBN 978-1575240169 orbital mechanics of satellitesJ. B. Kuipers (1999) Quaternions and rotation Sequences: a Primer with Applications to Orbits, Aerospace, and Virtual Reality, Princeton University Press ISBN 978-0-691-10298-6 and  crystallographic texture analysis. When used to represent rotation, unit quaternions are also called rotation quaternions. When used to represent an orientation (rotation relative to a reference coordinate system), they are called orientation quaternions or attitude quaternions.   In 3-dimensional space, according to Euler's rotation theorem, any rotation or sequence of rotations of a rigid body or coordinate system about a fixed point is equivalent to a single rotation by a given angle  about a fixed axis (called Euler axis) that runs through the fixed point. The Euler axis is typically represented by a unit vector&nbsp;. Therefore, any rotation in three dimensions can be represented as a combination of a vector&nbsp; and a scalar . Quaternions give a simple way to encode this axis–angle representation in four numbers, and can be used to apply the corresponding rotation to a position vector, representing a point relative to the origin in R3. A Euclidean vector such as  or  can be rewritten as  or , where , ,  are unit vectors representing the three Cartesian axes. A rotation through an angle of  around the axis defined by a unit vector \vec{u} = (u_x, u_y, u_z) = u_x\mathbf{i} + u_y\mathbf{j} + u_z\mathbf{k} can be represented by a quaternion. This can be done using an extension of Euler's formula:  \mathbf{q} = e^{\frac{\theta}{2}{(u_x\mathbf{i} + u_y\mathbf{j} + u_z\mathbf{k})}} = \cos \frac{\theta}{2} + (u_x\mathbf{i} + u_y\mathbf{j} + u_z\mathbf{k}) \sin \frac{\theta}{2} It can be shown that the desired rotation can be applied to an ordinary vector \mathbf{p} = (p_x, p_y, p_z) = p_x\mathbf{i} + p_y\mathbf{j} + p_z\mathbf{k} in 3-dimensional space, considered as a quaternion with a real coordinate equal to zero, by evaluating the conjugation of&nbsp; by&nbsp;: \mathbf{p'} = \mathbf{q} \mathbf{p} \mathbf{q}^{-1} using the Hamilton product, where  is the new position vector of the point after the rotation. In a programmatic implementation, this is achieved by constructing a quaternion whose vector part is p and real part equals zero and then performing the quaternion multiplication. The vector part of the resulting quaternion is the desired vector p'. Mathematically, this operation carries the set of all "pure" quaternions p (those with real part equal to zero) — which constitute a 3-dimensional space among the quaternions — into itself, by the desired rotation about the axis u, by the angle θ. (Each real quaternion is carried into itself by this operation. But for the purpose of rotations in 3-dimensional space, we ignore the real quaternions.) The rotation is clockwise if our line of sight points in the same direction as . In this instance,  is a unit quaternion and  \mathbf{q}^{-1} = e^{-\frac{\theta}{2}{(u_x\mathbf{i} + u_y\mathbf{j} + u_z\mathbf{k})}} = \cos \frac{\theta}{2} - (u_x\mathbf{i} + u_y\mathbf{j} + u_z\mathbf{k}) \sin \frac{\theta}{2} . It follows that conjugation by the product of two quaternions is the composition of conjugations by these quaternions: If  and  are unit quaternions, then rotation (conjugation) by&nbsp; is \mathbf{p q} \vec{v} (\mathbf{p q})^{-1} = \mathbf{p q} \vec{v} \mathbf{q}^{-1} \mathbf{p}^{-1} = \mathbf{p} (\mathbf{q} \vec{v} \mathbf{q}^{-1}) \mathbf{p}^{-1}, which is the same as rotating (conjugating) by&nbsp; and then by&nbsp;. The scalar component of the result is necessarily zero. The quaternion inverse of a rotation is the opposite rotation, since \mathbf{q}^{-1} (\mathbf{q} \vec{v} \mathbf{q}^{-1}) \mathbf{q} = \vec{v}. The square of a quaternion rotation is a rotation by twice the angle around the same axis. More generally  is a rotation by&nbsp; times the angle around the same axis as . This can be extended to arbitrary real , allowing for smooth interpolation between spatial orientations; see Slerp. Two rotation quaternions can be combined into one equivalent quaternion by the relation: \mathbf{q}' = \mathbf{q}_2 \mathbf{q}_1  in which  corresponds to the rotation  followed by the rotation . (Note that quaternion multiplication is not commutative.) Thus, an arbitrary number of rotations can be composed together and then applied as a single rotation. Conjugating  by  refers to the operation . Consider the rotation  around the axis \vec{v} = \mathbf{i} + \mathbf{j} + \mathbf{k}, with a rotation angle of 120°, or &nbsp;radians. \alpha = \frac{2 \pi}{3}  The length of  is , the half angle is  (60°) with cosine , () and sine , ().  We are therefore dealing with a conjugation by the unit quaternion \begin{array}{lll} u &=& \cos\frac{\alpha}{2} + \sin\frac{\alpha}{2}\cdot \frac{1}{\| \vec{v} \| }\vec{v}\\ &=& \cos \frac{\pi}{3} + \sin \frac{\pi}{3}\cdot \frac{1}{\sqrt{3}}\vec{v}\\ &=& \frac{1}{2} + \frac{\sqrt{3}}{2}\cdot \frac{1}{\sqrt{3}}\vec{v}\\ &=& \frac{1}{2} + \frac{\sqrt{3}}{2}\cdot \frac{\mathbf{i}+\mathbf{j}+\mathbf{k}}{\sqrt{3}}\\ &=& \frac{1 + \mathbf{i} + \mathbf{j} + \mathbf{k}}{2} \end{array} If  is the rotation function, f(a\mathbf{i} + b\mathbf{j} + c\mathbf{k}) = u (a\mathbf{i} + b\mathbf{j} + c\mathbf{k}) u^{-1} It can be proved that the inverse of a unit quaternion is obtained simply by changing the sign of its imaginary components. As a consequence, u^{-1} = \frac{1- \mathbf{i} - \mathbf{j} - \mathbf{k}}{2} and f(a\mathbf{i} + b\mathbf{j} + c\mathbf{k}) = \frac{1 + \mathbf{i} + \mathbf{j} + \mathbf{k}}{2}(a\mathbf{i} + b\mathbf{j} + c\mathbf{k}) \frac{1 - \mathbf{i} - \mathbf{j} - \mathbf{k}}{2} This can be simplified, using the ordinary rules for quaternion arithmetic, to f(a\mathbf{i} + b\mathbf{j} + c\mathbf{k}) = c\mathbf{i} + a\mathbf{j} + b\mathbf{k} As expected, the rotation corresponds to keeping a cube held fixed at one point, and rotating it 120° about the long diagonal through the fixed point (observe how the three axes are permuted cyclically). Let's show how we reached the previous result. Let's develop the expression of  (in two stages), and apply the rules \begin{alignat}{2} \mathbf{ij} & = \mathbf{k}, & \mathbf{ji} & = \mathbf{-k}, \\ \mathbf{jk} & = \mathbf{i}, & \mathbf{kj} & = \mathbf{-i}, \\ \mathbf{ki} & = \mathbf{j}, & \mathbf{ik} & = \mathbf{-j}, \\ \mathbf{i}^{2} & = \mathbf{j}^{2}& = \mathbf{k}^{2} & = -1 \end{alignat} It gives us: \begin{align} f(a\mathbf{i} + b\mathbf{j} + c\mathbf{k}) ={}& \frac{1 + \mathbf{i} + \mathbf{j} + \mathbf{k}}{2} (a\mathbf{i} + b\mathbf{j} + c\mathbf{k}) \frac{1 - \mathbf{i} - \mathbf{j} - \mathbf{k}}{2} \\[6pt] ={}& \frac{1}{4} ( (a\mathbf{i} + b\mathbf{j} + c\mathbf{k}) +(- a + b\mathbf{k} - c\mathbf{j}) + (-a\mathbf{k} - b +c\mathbf{i}) + (a\mathbf{j} - b\mathbf{i} - c))\\[6pt] & (1 - \mathbf{i} - \mathbf{j} - \mathbf{k})\\[6pt] ={}& \frac{1}{4} ( (-a - b - c) + (a - b+ c) \mathbf{i} + (a + b - c) \mathbf{j} + (-a + b + c) \mathbf{k})\\[6pt] & (1 - \mathbf{i} - \mathbf{j} - \mathbf{k})\\[6pt] ={}& \frac{1}{4} ( ( (-a - b - c) + (a - b + c) \mathbf{i} + (a + b - c) \mathbf{j} + (-a + b + c) \mathbf{k})\\[6pt] &{}+ ( (a + b + c) \mathbf{i} + (a - b + c) + (a + b - c) \mathbf{k} + (a - b - c) \mathbf{j})\\[6pt] &{}+ ( (a + b + c) \mathbf{j} + (-a + b - c) \mathbf{k} + (a + b - c) + (-a + b + c) \mathbf{i})\\[6pt] &+  ( (a + b + c) \mathbf{k} + (a - b + c) \mathbf{j} + (-a - b + c) \mathbf{i} + (-a + b + c))\\[6pt] ={}& \frac{1}{4} ( ( (-a - b - c) + (a - b + c) + (a + b - c) + (-a + b + c) )\\[6pt] &{}+ ( (a - b + c) + (a + b + c) + (-a + b + c) + (-a - b + c) ) \mathbf{i}\\[6pt] &{}+ ( (a + b - c) + (a - b - c) + (a + b + c) + (a - b + c) ) \mathbf{j}\\[6pt] &{}+ ( (-a + b + c) + (a + b - c) + (-a + b - c) + (a + b + c) ) \mathbf{k})\\[6pt] ={}& \frac{1}{4} (0 + 4c \mathbf{i} + 4a \mathbf{j} + 4b \mathbf{k})\\[6pt] ={}&c\mathbf{i} + a\mathbf{j} + b\mathbf{k} \end{align} which is the expected result. As we can see, such computations are relatively long and tedious if done manually; however, in a computer program, this amounts to calling the quaternion multiplication routine twice. A quaternion rotation can be algebraically manipulated into a quaternion-derived rotation matrix. By simplifying the quaternion multiplications , they can be rewritten as a rotation matrix given an axis–angle representation:  \mathbf{R}= \begin{bmatrix} c + a_x^2 (1-c) & a_x a_y (1-c) - a_z s & a_x a_z (1-c) + a_y s \\ a_y a_x (1-c) + a_z s & c + a_y^2 (1-c) & a_y a_z (1-c) - a_x s \\ a_z a_x (1-c) - a_y s & a_z a_y (1-c) + a_x s & c + a_z^2 (1-c) \end{bmatrix}  where  and  are shorthand for  and , respectively. So to get the rotation of a vector  about an arbitrary axis we get  \mathbf{p'}=\mathbf{R}\mathbf{p}  Although care should be taken (due to degeneracy as the quaternion approaches the identity quaternion () or the sine of the angle approaches zero) the axis and angle can be extracted via:  \begin{align} \mathbf{q} & = q_r + q_i \mathbf{i} + q_j \mathbf{j} + q_k \mathbf{k} \\ \theta &= 2 \arccos q_r = 2 \arcsin \sqrt{q_i^2 + q_j^2 + q_k^2} \\ (a_x, a_y, a_z) &= \frac{1}{\sin \tfrac{1}{2} \theta} (q_i, q_j, q_k) \end{align}  Note that the  equality holds only when  is non-negative. Alternatively, the rotation matrix can be expressed as  \mathbf{R} = \begin{bmatrix} 1 - 2 q_j^2 - 2 q_k^2 & 2 (q_i q_j - q_k q_r) & 2 (q_i q_k + q_j q_r) \\ 2 (q_i q_j + q_k q_r) & 1 - 2 q_i^2 - 2 q_k^2 & 2 (q_j q_k - q_i q_r) \\ 2 (q_i q_k - q_j q_r) & 2 (q_j q_k + q_i q_r) & 1 - 2 q_i^2 - 2 q_j^2 \end{bmatrix}  As with other schemes to apply rotations, the centre of rotation must be translated to the origin before the rotation is applied and translated back to its original position afterwards. We will rotate the vector  about the vector  by 90 degrees \begin{array}{lll} \mathbf{p} &= &<1,0,0>\\ \mathbf{a} &= &<0,1,0>\\ \mathbf{p'} &= &\mathbf{Rp}\\ \mathbf{R} &=&\begin{bmatrix}  0 & 0 & 1\\ 0 & 1 & 0\\ -1& 0 & 0 \end{bmatrix}\\ \mathbf{p'} &=& \begin{bmatrix} 0 & 0 & 1\\ 0 & 1 & 0\\ -1& 0 & 0 \end{bmatrix} \begin{bmatrix} 1\\ 0\\ 0\\ \end{bmatrix}\\ &= &<0,0,-1> \end{array}  As we can see if we rotate the \hat{i} about the \hat{j} by \theta=\frac{\pi}{2} we get -\hat{k}. This can be verified by the right hand rule.  The complex numbers can be defined by introducing an abstract symbol  which satisfies the usual rules of algebra and additionally the rule . This is sufficient to reproduce all of the rules of complex number arithmetic: for example: (a+b\mathbf{i})(c+d\mathbf{i}) = ac + ad\mathbf{i} + b\mathbf{i}c + b\mathbf{i}d\mathbf{i} = ac + ad\mathbf{i} + bc\mathbf{i} + bd\mathbf{i}^2 = (ac - bd) + (bc + ad) \mathbf{i}. In the same way the quaternions can be defined by introducing abstract symbols , ,  which satisfy the rules  and the usual algebraic rules except the commutative law of multiplication (a familiar example of such a noncommutative multiplication is matrix multiplication). From this all of the rules of quaternion arithmetic follow: for example, one can show that: (a + b\mathbf{i} + c\mathbf{j} + d\mathbf{k}) (e + f\mathbf{i} + g\mathbf{j} + h\mathbf{k}) =  (ae - bf - cg - dh) + (af + be + ch - dg) \mathbf{i} + (ag - bh + ce + df) \mathbf{j} + (ah + bg - cf + de) \mathbf{k}. The imaginary part b\mathbf{i} + c\mathbf{j} + d\mathbf{k} of a quaternion behaves like a vector \vec{v} = (b,c,d) in three dimension vector space, and the real part  behaves like a scalar in . When quaternions are used in geometry, it is more convenient to define them as a scalar plus a vector: a + b\mathbf{i} + c\mathbf{j} + d\mathbf{k} = a + \vec{v}. Those who have studied vectors at school might find it strange to add a number to a vector, as they are objects of very different natures, or to multiply two vectors together, as this operation is usually undefined. However, if one remembers that it is a mere notation for the real and imaginary parts of a quaternion, it becomes more legitimate. In other words, the correct reasoning is the addition of two quaternions, one with zero vector/imaginary part, and another one with zero scalar/real part: a + \vec{v} = (a, \vec{0}) + (0, \vec{v}). We can express quaternion multiplication in the modern language of vector cross and dot products (which were actually inspired by the quaternions in the first place). When multiplying the vector/imaginary parts, in place of the rules  we have the quaternion multiplication rule: \vec{v} \vec{w} = \vec{v} \times \vec{w} - \vec{v} \cdot \vec{w}, where: Quaternion multiplication is noncommutative (because of the cross product, which anti-commutes), while scalar–scalar and scalar–vector multiplications commute. From these rules it follows immediately that (see details): (s + \vec{v}) (t + \vec{w}) = (s t - \vec{v} \cdot \vec{w}) + (s \vec{w} + t \vec{v} + \vec{v} \times \vec{w}). The (left and right) multiplicative inverse or reciprocal of a nonzero quaternion is given by the conjugate-to-norm ratio (see details): (s + \vec{v})^{-1} = \frac{(s + \vec{v})^*}{\lVert s + \vec{v} \rVert^2} = \frac{s - \vec{v}}{s^2 + \lVert \vec{v} \rVert^2}, as can be verified by direct calculation. Let \vec{u} be a unit vector (the rotation axis) and let q = \cos \frac{\alpha}{2} + \vec{u} \sin \frac{\alpha}{2}. Our goal is to show that \vec{v'} = q \vec{v} q^{-1} = \left( \cos \frac{\alpha}{2} + \vec{u} \sin \frac{\alpha}{2} \right) \, \vec{v} \, \left( \cos \frac{\alpha}{2} - \vec{u} \sin \frac{\alpha}{2} \right) yields the vector \vec{v} rotated by an angle \alpha around the axis \vec{u}. Expanding out, we have \begin{align} \vec{v'} &= \vec{v} \cos^2 \frac{\alpha}{2} + (\vec{u}\vec{v} - \vec{v}\vec{u}) \sin \frac{\alpha}{2} \cos \frac{\alpha}{2} - \vec{u}\vec{v}\vec{u} \sin^2 \frac{\alpha}{2} \\[6pt] &= \vec{v} \cos^2 \frac{\alpha}{2} + 2 (\vec{u} \times \vec{v}) \sin \frac{\alpha}{2} \cos \frac{\alpha}{2} - (\vec{v} (\vec{u} \cdot \vec{u}) - 2 \vec{u} (\vec{u} \cdot \vec{v})) \sin^2 \frac{\alpha}{2} \\[6pt] &= \vec{v} (\cos^2 \frac{\alpha}{2} - \sin^2 \frac{\alpha}{2}) + (\vec{u} \times \vec{v}) (2 \sin \frac{\alpha}{2} \cos \frac{\alpha}{2}) + \vec{u} (\vec{u} \cdot \vec{v}) (2 \sin^2 \frac{\alpha}{2}) \\[6pt] &= \vec{v} \cos \alpha + (\vec{u} \times \vec{v}) \sin \alpha + \vec{u} (\vec{u} \cdot \vec{v}) (1 - \cos \alpha) \\[6pt] &= (\vec{v} - \vec{u} (\vec{u} \cdot \vec{v})) \cos \alpha + (\vec{u} \times \vec{v}) \sin \alpha + \vec{u} (\vec{u} \cdot \vec{v}) \\[6pt] &= \vec{v}_\bot \cos \alpha + (\vec{u} \times \vec{v}) \sin \alpha + \vec{v}_{\|} \end{align} where \vec{v}_{\bot} and \vec{v}_{\|} are the components of  perpendicular and parallel to  respectively. This is the formula of a rotation by  around the  axis. A very formal explanation of the properties used in this section is given by Altman.Simon L. Altman (1986) Rotations, Quaternions, and Double Groups, Dover Publications (see especially Ch. 12). Unit quaternions represent the group of Euclidean rotations in three dimensions in a very straightforward way. The correspondence between rotations and quaternions can be understood by first visualizing the space of rotations itself. In order to visualize the space of rotations, it helps to consider a simpler case. Any rotation in three dimensions can be described by a rotation by some angle about some axis; for our purposes, we will use an axis vector to establish handedness for our angle. Consider the special case in which the axis of rotation lies in the xy plane. We can then specify the axis of one of these rotations by a point on a circle through which the vector crosses, and we can select the radius of the circle to denote the angle of rotation. Similarly, a rotation whose axis of rotation lies in the xy plane can be described as a point on a sphere of fixed radius in three dimensions. Beginning at the north pole of a sphere in three-dimensional space, we specify the point at the north pole to be the identity rotation (a zero angle rotation). Just as in the case of the identity rotation, no axis of rotation is defined, and the angle of rotation (zero) is irrelevant. A rotation having a very small rotation angle can be specified by a slice through the sphere parallel to the xy plane and very near the north pole. The circle defined by this slice will be very small, corresponding to the small angle of the rotation. As the rotation angles become larger, the slice moves in the negative z direction, and the circles become larger until the equator of the sphere is reached, which will correspond to a rotation angle of 180 degrees. Continuing southward, the radii of the circles now become smaller (corresponding to the absolute value of the angle of the rotation considered as a negative number). Finally, as the south pole is reached, the circles shrink once more to the identity rotation, which is also specified as the point at the south pole. Notice that a number of characteristics of such rotations and their representations can be seen by this visualization. The space of rotations is continuous, each rotation has a neighborhood of rotations which are nearly the same, and this neighborhood becomes flat as the neighborhood shrinks. Also, each rotation is actually represented by two antipodal points on the sphere, which are at opposite ends of a line through the center of the sphere. This reflects the fact that each rotation can be represented as a rotation about some axis, or, equivalently, as a negative rotation about an axis pointing in the opposite direction (a so-called double cover). The "latitude" of a circle representing a particular rotation angle will be half of the angle represented by that rotation, since as the point is moved from the north to south pole, the latitude ranges from zero to 180 degrees, while the angle of rotation ranges from 0 to 360 degrees. (the "longitude" of a point then represents a particular axis of rotation.) Note however that this set of rotations is not closed under composition. Two successive rotations with axes in the xy plane will not necessarily give a rotation whose axis lies in the xy plane, and thus cannot be represented as a point on the sphere. This will not be the case with a general rotation in 3-space, in which rotations do form a closed set under composition. This visualization can be extended to a general rotation in 3-dimensional space. The identity rotation is a point, and a small angle of rotation about some axis can be represented as a point on a sphere with a small radius. As the angle of rotation grows, the sphere grows, until the angle of rotation reaches 180 degrees, at which point the sphere begins to shrink, becoming a point as the angle approaches 360 degrees (or zero degrees from the negative direction). This set of expanding and contracting spheres represents a hypersphere in four dimensional space (a 3-sphere). Just as in the simpler example above, each rotation represented as a point on the hypersphere is matched by its antipodal point on that hypersphere. The "latitude" on the hypersphere will be half of the corresponding angle of rotation, and the neighborhood of any point will become "flatter" (i.e. be represented by a 3-D Euclidean space of points) as the neighborhood shrinks. This behavior is matched by the set of unit quaternions: A general quaternion represents a point in a four dimensional space, but constraining it to have unit magnitude yields a three-dimensional space equivalent to the surface of a hypersphere. The magnitude of the unit quaternion will be unity, corresponding to a hypersphere of unit radius. The vector part of a unit quaternion represents the radius of the 2-sphere corresponding to the axis of rotation, and its magnitude is the cosine of half the angle of rotation. Each rotation is represented by two unit quaternions of opposite sign, and, as in the space of rotations in three dimensions, the quaternion product of two unit quaternions will yield a unit quaternion. Also, the space of unit quaternions is "flat" in any infinitesimal neighborhood of a given unit quaternion. We can parameterize the surface of a sphere with two coordinates, such as latitude and longitude. But latitude and longitude are ill-behaved (degenerate) at the north and south poles, though the poles are not intrinsically different from any other points on the sphere. At the poles (latitudes +90° and −90°), the longitude becomes meaningless. It can be shown that no two-parameter coordinate system can avoid such degeneracy. We can avoid such problems by embedding the sphere in three-dimensional space and parameterizing it with three Cartesian coordinates , placing the north pole at , the south pole at , and the equator at , . Points on the sphere satisfy the constraint , so we still have just two degrees of freedom though there are three coordinates.  A point  on the sphere represents a rotation in the ordinary space around the horizontal axis directed by the vector  by an angle \alpha= 2 \cos^{-1} w = 2 \sin^{-1} \sqrt{x^2+y^2}. In the same way the hyperspherical space of 3D rotations can be parameterized by three angles (Euler angles), but any such parameterization is degenerate at some points on the hypersphere, leading to the problem of gimbal lock. We can avoid this by using four Euclidean coordinates , with . The point  represents a rotation around the axis directed by the vector  by an angle \alpha = 2 \cos^{-1} w = 2 \sin^{-1} \sqrt{x^2+y^2+z^2}. The multiplication of quaternions is non-commutative. This fact explains how the  formula can work at all, having  by definition. Since the multiplication of unit quaternions corresponds to the composition of three-dimensional rotations, this property can be made intuitive by showing that three-dimensional rotations are not commutative in general. Set two books next to each other. Rotate one of them 90&nbsp;degrees clockwise around the z axis, then flip it 180&nbsp;degrees around the x axis. Take the other book, flip it 180° around x axis first, and 90° clockwise around z later. The two books do not end up parallel. This shows that, in general, the composition of two different rotations around two distinct spatial axes will not commute. The vector cross product, used to define the axis–angle representation, does confer an orientation ("handedness") to space: in a three-dimensional vector space, the three vectors in the equation  will always form a right-handed set (or a left-handed set, depending on how the cross product is defined), thus fixing an orientation in the vector space. Alternatively, the dependence on orientation is expressed in referring to such  that specifies a rotation as to axial vectors. In quaternionic formalism the choice of an orientation of the space corresponds to order of multiplication:  but . If one reverses the orientation, then the formula above becomes , i.e., a unit  is replaced with the conjugate quaternion – the same behaviour as of axial vectors. The representation of a rotation as a quaternion (4 numbers) is more compact than the representation as an orthogonal matrix (9 numbers).  Furthermore, for a given axis and angle, one can easily construct the corresponding quaternion, and conversely, for a given quaternion one can easily read off the axis and the angle.  Both of these are much harder with matrices or Euler angles. In video games and other applications, one is often interested in “smooth rotations”, meaning that the scene should slowly rotate and not in a single step.  This can be accomplished by choosing a curve such as the spherical linear interpolation in the quaternions, with one endpoint being the identity transformation 1 (or some other initial rotation) and the other being the intended final rotation.  This is more problematic with other representations of rotations. When composing several rotations on a computer, rounding errors necessarily accumulate.  A quaternion that’s slightly off still represents a rotation after being normalised: a matrix that’s slightly off may not be orthogonal any more and is harder to convert back to a proper orthogonal matrix. Quaternions also avoid a phenomenon called gimbal lock which can result when, for example in pitch/yaw/roll rotational systems, the pitch is rotated 90° up or down, so that yaw and roll then correspond to the same motion, and a degree of freedom of rotation is lost. In a gimbal-based aerospace inertial navigation system, for instance, this could have disastrous results if the aircraft is in a steep dive or ascent. The orthogonal matrix corresponding to a rotation by the unit quaternion  (with ) when post-multiplying with a column vector is given by R = \begin{pmatrix} a^2+b^2-c^2-d^2&2bc-2ad        &2bd+2ac        \\ 2bc+2ad        &a^2-b^2+c^2-d^2&2cd-2ab        \\ 2bd-2ac        &2cd+2ab        &a^2-b^2-c^2+d^2\\ \end{pmatrix}. This rotation matrix is used on vector  as w_{rotated} = R \cdot w. The quaternion representation of this rotation is given by: \begin{bmatrix} 0\\ w_{rotated} \end{bmatrix} = z \begin{bmatrix} 0 \\ w\end{bmatrix} z^*,  where z^* is the conjugate of the quaternion  z , given by  \mathbf{z}^* = a - b\mathbf{i} - c\mathbf{j} - d\mathbf{k} Also, quaternion multiplication is defined as (assuming a and b are quaternions, like z above): ab = (a_0 b_0 - \vec{a}\cdot \vec{b}; a_0 \vec{b} + b_0 \vec{a} + \vec{a}\times \vec{b}) where the order a,b is important since the cross product of two vectors is not commutative. One must be careful when converting a rotation matrix to a quaternion, as several straightforward methods tend to be unstable when the trace (sum of the diagonal elements) of the rotation matrix is zero or very small. For a stable method of converting an orthogonal matrix to a quaternion, see Rotation matrix#Quaternion. The above section described how to recover a quaternion  from a  rotation matrix . Suppose, however, that we have some matrix  that is not a pure rotation—due to round-off errors, for example—and we wish to find the quaternion  that most accurately represents . In that case we construct a symmetric  matrix  K = \frac13  \begin{bmatrix}   Q_{xx}-Q_{yy}-Q_{zz} & Q_{yx}+Q_{xy} & Q_{zx}+Q_{xz} & Q_{yz}-Q_{zy} \\   Q_{yx}+Q_{xy} & Q_{yy}-Q_{xx}-Q_{zz} & Q_{zy}+Q_{yz} & Q_{zx}-Q_{xz} \\   Q_{zx}+Q_{xz} & Q_{zy}+Q_{yz} & Q_{zz}-Q_{xx}-Q_{yy} & Q_{xy}-Q_{yx} \\   Q_{yz}-Q_{zy} & Q_{zx}-Q_{xz} & Q_{xy}-Q_{yx} & Q_{xx}+Q_{yy}+Q_{zz}  \end{bmatrix} ,  and find the eigenvector  corresponding to the largest eigenvalue (that value will be 1 if and only if  is a pure rotation). The quaternion so obtained will correspond to the rotation closest to the original matrix    This section discusses the performance implications of using quaternions versus other methods (axis/angle or rotation matrices) to perform rotations in 3D. * Note: angle/axis can be stored as 3 elements by multiplying the unit rotation axis by half of the rotation angle, forming the logarithm of the quaternion, at the cost of additional calculations. There are three basic approaches to rotating a vector : A pair of unit quaternions  and  can represent any rotation in 4D space. Given a four dimensional vector , and pretending that it is a quaternion, we can rotate the vector  like this: f(\vec{v})=\mathbf{z}_{\rm{l}} \vec{v} \mathbf{z}_{\rm{r}}= \begin{pmatrix} a_{\rm{l}}&-b_{\rm{l}}&-c_{\rm{l}}&-d_{\rm{l}}\\ b_{\rm{l}}&a_{\rm{l}}&-d_{\rm{l}}&c_{\rm{l}}\\ c_{\rm{l}}&d_{\rm{l}}&a_{\rm{l}}&-b_{\rm{l}}\\ d_{\rm{l}}&-c_{\rm{l}}&b_{\rm{l}}&a_{\rm{l}} \end{pmatrix}\begin{pmatrix} a_{\rm{r}}&-b_{\rm{r}}&-c_{\rm{r}}&-d_{\rm{r}}\\ b_{\rm{r}}&a_{\rm{r}}&d_{\rm{r}}&-c_{\rm{r}}\\ c_{\rm{r}}&-d_{\rm{r}}&a_{\rm{r}}&b_{\rm{r}}\\ d_{\rm{r}}&c_{\rm{r}}&-b_{\rm{r}}&a_{\rm{r}} \end{pmatrix}\begin{pmatrix} w\\x\\y\\z \end{pmatrix}.  The pair of matrices represents a rotation of ℝ4. Note that since (\mathbf{z}_{\rm{l}} \vec{v}) \mathbf{z}_{\rm{r}} = \mathbf{z}_{\rm{l}} (\vec{v} \mathbf{z}_{\rm{r}}), the two matrices must commute. Therefore, there are two commuting subgroups of the set of four dimensional rotations. Arbitrary four dimensional rotations have 6 degrees of freedom, each matrix represents 3 of those 6 degrees of freedom. Since the generators of the four-dimensional rotations can be represented by pairs of quaternions (as follows), all four-dimensional rotations can also be represented. \mathbf{z}_{\rm{l}} \vec{v} \mathbf{z}_{\rm{r}} = \begin{pmatrix} 1      &-dt_{ab}&-dt_{ac}&-dt_{ad}\\ dt_{ab}&1       &-dt_{bc}&-dt_{bd}\\ dt_{ac}& dt_{bc}&1       &-dt_{cd}\\ dt_{ad}& dt_{bd}& dt_{cd}&1 \end{pmatrix}\begin{pmatrix} w\\ x\\ y\\ z \end{pmatrix}  \mathbf{z}_{\rm{l}}= 1+{dt_{ab}+dt_{cd}\over 2}i+{dt_{ac}-dt_{bd}\over 2}j+{dt_{ad}+dt_{bc}\over 2}k  \mathbf{z}_{\rm{r}}= 1+{dt_{ab}-dt_{cd}\over 2}i+{dt_{ac}+dt_{bd}\over 2}j+{dt_{ad}-dt_{bc}\over 2}k   E. P. Battey-Pratt & T. J. Racey (1980) Geometric Model for Fundamental Particles International Journal of Theoretical Physics. Vol 19, No. 6 Method                        !! Storage Rotation matrix 9 Quaternion 4 Angle/axis 3* Method                !! # multiplies !! # add/subtracts !! total operations Rotation matrices 27 18 45 Quaternions 16 12 28 Method      !! # multiplies !! # add/subtracts !! # sin/cos !! total operations Rotation matrix 9 6 0 15 Quaternions 15 15 0 30 Angle/axis 18 12 2 30 \vec{v} \vec{w} is the resulting quaternion, \vec{v} \times \vec{w} is vector cross product (a vector), \vec{v} \cdot \vec{w} is vector scalar product (a scalar). Compute the matrix product of a 3&#8201;×&#8201;3 rotation matrix  and the original 3&#8201;×&#8201;1 column matrix representing . This requires 3 × (3 multiplications + 2 additions) = 9 multiplications and 6 additions, the most efficient method for rotating a vector. A rotation can be represented by a unit-length quaternion  with scalar (real) part  and vector (imaginary) part . The rotation can be applied to a 3D vector  via the formula  \vec{v}_\text{new}=\vec{v} + 2\vec{r} \times (\vec{r} \times \vec{v} + w \vec{v}). This requires only 15 multiplications and 15 additions to evaluate (or 18 muls and 12 adds if the factor of 2 is done via multiplication.) This formula, originally thought to be used with axis/angle notation (Rodrigues' formula), can also be applied to quaternion notation. This yields the same result as the less efficient but more compact formula of quaternion multiplication  \vec{v}_\text{new} = q \vec{v} q^{-1}. Use the angle/axis formula to convert an angle/axis to a rotation matrix  then multiplying with a vector, or, similarly, use a formula to convert quaternion notation to a rotation matrix, then multiplying with a vector. Converting the angle/axis to  costs 12 multiplies, 2 function calls (sin, cos), and 10 add/subtracts; from item 1, rotating using  adds an additional 9 multiplications and 6 additions for a total of 21 multiplies, 16 add/subtracts, and 2 function calls (sin, cos). Converting a quaternion to  costs 12 multiplies and 12 add/subtracts; from item 1, rotating using  adds an additional 9 multiplications and 6 additions for a total of 21 multiplies and 18 add/subtracts. Anti-twister mechanism Binary polyhedral group Biquaternion Charts on SO(3) Clifford algebras Conversion between quaternions and Euler angles Covering space Dual quaternion Elliptic geometry#Elliptic space Rotation formalisms in three dimensions Rotation (mathematics) Spin group Slerp, spherical linear interpolation Olinde Rodrigues William Rowan Hamilton Shoemake, Ken. Quaternions Simple Quaternion type and operations in over thirty computer languages on Rosetta Code Hart, Francis, Kauffman. Quaternion demo Dam, Koch, Lillholm. Quaternions, Interpolation and Animation Vicci, Leandra. Quaternions and Rotations in 3-Space: The Algebra and its Geometric Interpretation, 2001 Howell, Thomas and Lafon, Jean-Claude. The Complexity of the Quaternion Product, TR75-245, Cornell University, 1975 Berthold K.P. Horn. Some Notes on Unit Quaternions and Rotation, 2001 Byung-Uk Lee, Unit Quaternion Representation of Rotation, Appendix A, Ph. D. Thesis, Stereo Matching of Skull Landmarks, Stanford University, 1991 .
