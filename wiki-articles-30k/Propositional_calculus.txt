  Propositional calculus (also called propositional logic, sentential calculus, or sentential logic) is the branch of mathematical logic concerned with the study of propositions (whether they are true or false) that are formed by other propositions with the use of logical connectives, and how their value depends on the truth value of their components. Logical connectives are found in natural languages. In English for example, some examples are "and" (conjunction), "or" (disjunction),  "not” (negation) and "if" (but only when used to denote material conditional). The following is an example of a very simple inference within the scope of propositional logic: Premise 1: If it's raining then it's cloudy. Premise 2: It's raining. Conclusion: It's cloudy. Both premises and the conclusion are propositions. The premises are taken for granted and then with the application of modus ponens (an inference rule) the conclusion follows. As propositional logic is not concerned with the structure of propositions beyond the point where they can't be decomposed anymore by logical connectives, this inference can be restated replacing those atomic statements with statement letters, which are interpreted as variables representing statements: Premise 1: P \to Q Premise 2: P Conclusion: Q The same can be stated succinctly in the following way: P \to Q, P \vdash Q When  is interpreted as “It's raining” and  as “it's cloudy” the above symbolic expressions can be seen to exactly correspond with the original expression in natural language. Not only that, but they will also correspond with any other inference of this form, which will be valid on the same basis that this inference is. Propositional logic may be studied through a formal system in which formulas of a formal language may be interpreted to represent propositions. A system of inference rules and axioms allows certain formulas to be derived. These derived formulas are called theorems and may be interpreted to be true propositions. A constructed sequence of such formulas is known as a derivation or proof and the last formula of the sequence is the theorem. The derivation may be interpreted as proof of the proposition represented by the theorem. When a formal system is used to represent formal logic, only statement letters are represented directly. The natural language propositions that arise when they're interpreted are outside the scope of the system, and the relation between the formal system and its interpretation is likewise outside the formal system itself. Usually in truth-functional propositional logic, formulas are interpreted as having either a truth value of true or a truth value of false. Truth-functional propositional logic and systems isomorphic to it, are considered to be zeroth-order logic.  Although propositional logic (which is interchangeable with propositional calculus) had been hinted by earlier philosophers, it was developed into a formal logic by Chrysippus in the 3rd century BCAncient Logic (Stanford Encyclopedia of Philosophy) and expanded by the Stoics. The logic was focused on propositions. This advancement was different from the traditional syllogistic logic which was focused on terms. However, later in antiquity, the propositional logic developed by the Stoics was no longer understood . Consequently, the system was essentially reinvented by Peter Abelard in the 12th century. Propositional logic was eventually refined using symbolic logic. The 17th/18th-century mathematician Gottfried Leibniz has been credited with being the founder of symbolic logic for his work with the calculus ratiocinator. Although his work was the first of its kind, it was unknown to the larger logical community. Consequently, many of the advances achieved by Leibniz were reachieved by logicians like George Boole and Augustus De Morgan completely independent of Leibniz.Leibniz's Influence on 19th Century Logic Just as propositional logic can be considered an advancement from the earlier syllogistic logic, Gottlob Frege's predicate logic was an advancement from the earlier propositional logic. One author describes predicate logic as combining "the distinctive features of syllogistic logic and propositional logic." Consequently, predicate logic ushered in a new era in logic's history; however, advances in propositional logic were still made after Frege, including Natural Deduction, Truth-Trees and Truth-Tables. Natural deduction was invented by Gerhard Gentzen and Jan Łukasiewicz. Truth-Trees were invented by Evert Willem Beth.Beth, Evert W.; "Semantic entailment and formal derivability", series: Mededlingen van de Koninklijke Nederlandse Akademie van Wetenschappen, Afdeling Letterkunde, Nieuwe Reeks, vol. 18, no. 13, Noord-Hollandsche Uitg. Mij., Amsterdam, 1955, pp. 309–42. Reprinted in Jaakko Intikka (ed.) The Philosophy of Mathematics, Oxford University Press, 1969 The invention of truth-tables, however, is of controversial attribution. Within works by FregeTruth in Frege and Bertrand Russell,Russell's Use of Truth-Tables one finds ideas influential in bringing about the notion of truth tables. The actual 'tabular structure' (being formatted as a table), itself, is generally credited to either Ludwig Wittgenstein or Emil Post (or both, independently). Besides Frege and Russell, others credited with having ideas preceding truth-tables include Philo, Boole, Charles Sanders Peirce, and Ernst Schröder. Others credited with the tabular structure include Łukasiewicz, Schröder, Alfred North Whitehead, William Stanley Jevons, John Venn, and Clarence Irving Lewis.  Ultimately, some have concluded, like John Shosky, that "It is far from clear that any one person should be given the title of 'inventor' of truth-tables.". In general terms, a calculus is a formal system that consists of a set of syntactic expressions (well-formed formulas), a distinguished subset of these expressions (axioms), plus a set of formal rules that define a specific binary relation, intended to be interpreted to be logical equivalence, on the space of expressions. When the formal system is intended to be a logical system, the expressions are meant to be interpreted to be statements, and the rules, known to be inference rules, are typically intended to be truth-preserving. In this setting, the rules (which may include axioms) can then be used to derive ("infer") formulas representing true statements from given formulas representing true statements. The set of axioms may be empty, a nonempty finite set, a countably infinite set, or be given by axiom schemata. A formal grammar recursively defines the expressions and well-formed formulas of the language. In addition a semantics may be given which defines truth and valuations (or interpretations). The language of a propositional calculus consists of A well-formed formula is any atomic formula, or any formula that can be built up from atomic formulas by means of operator symbols according to the rules of the grammar. Mathematicians sometimes distinguish between propositional constants, propositional variables, and schemata.  Propositional constants represent some particular proposition, while propositional variables range over the set of all atomic propositions.  Schemata, however, range over all propositions. It is common to represent propositional constants by , , and , propositional variables by , , and , and schematic letters are often Greek letters, most often , , and . The following outlines a standard propositional calculus. Many different formulations exist which are all more or less equivalent but differ in the details of: Any given proposition may be represented with a letter called a 'propositional constant', analogous to representing a number by a letter in mathematics, for instance, . All propositions require exactly one of two truth-values:  true or false. For example, let  be the proposition that it is raining outside.  This will be true () if it is raining outside and false otherwise (). The conjunction of  and  is true in case 1 and is false otherwise.  Where  is the proposition that it is raining outside and  is the proposition that a cold-front is over Kansas,  is true when it is raining outside and there is a cold-front over Kansas.  If it is not raining outside, then  is false; and if there is no cold-front over Kansas, then  is false. It is extremely helpful to look at the truth tables for these different operators, as well as the method of analytic tableaux. Propositional logic is closed under truth-functional connectives.  That is to say, for any proposition ,  is also a proposition.  Likewise, for any propositions  and ,  is a proposition, and similarly for disjunction, conditional, and biconditional.  This implies that, for instance,  is a proposition, and so it can be conjoined with another proposition.  In order to represent this, we need to use parentheses to indicate which proposition is conjoined with which.  For instance,  is not a well-formed formula, because we do not know if we are conjoining  with  or if we are conjoining  with .  Thus we must write either  to represent the former, or  to represent the latter.  By evaluating the truth conditions, we see that both expressions have the same truth conditions (will be true in the same cases), and moreover that any proposition formed by arbitrary conjunctions will have the same truth conditions, regardless of the location of the parentheses.  This means that conjunction is associative, however, one should not assume that parentheses never serve a purpose.  For instance, the sentence  does not have the same truth conditions of , so they are different sentences distinguished only by the parentheses.  One can verify this by the truth-table method referenced above. Note:  For any arbitrary number of propositional constants, we can form a finite number of cases which list their possible truth-values.  A simple way to generate this is by truth-tables, in which one writes , , ..., , for any list of  propositional constants—that is to say, any list of propositional constants with  entries.  Below this list, one writes  rows, and below  one fills in the first half of the rows with true (or T) and the second half with false (or F).  Below  one fills in one-quarter of the rows with T, then one-quarter with F, then one-quarter with T and the last quarter with F.  The next column alternates between true and false for each eighth of the rows, then sixteenths, and so on, until the last propositional constant varies between T and F for each row.  This will give a complete listing of cases or truth-value assignments possible for those propositional constants. The propositional calculus then defines an argument to be a set of propositions.  A valid argument is a set of propositions, the last of which follows from—or is implied by—the rest.  All other arguments are invalid.  The simplest valid argument is modus ponens, one instance of which is the following set of propositions:  \begin{array}{rl} 1. & P \to Q \\ 2. & P \\ \hline \therefore & Q \end{array}  This is a set of three propositions, each line is a proposition, and the last follows from the rest.  The first two lines are called premises, and the last line the conclusion. We say that any proposition  follows from any set of propositions (P_1, ..., P_n), if  must be true whenever every member of the set (P_1, ..., P_n) is true.  In the argument above, for any  and , whenever  and  are true, necessarily  is true.  Notice that, when  is true, we cannot consider cases 3 and 4 (from the truth table).  When  is true, we cannot consider case 2.  This leaves only case 1, in which  is also true.  Thus  is implied by the premises. This generalizes schematically.  Thus, where  and  may be any propositions at all,  \begin{array}{rl} 1. & \varphi \to \psi \\ 2. & \varphi \\ \hline \therefore & \psi \end{array}  Other argument forms are convenient, but not necessary.  Given a complete set of axioms (see below for one such set), modus ponens is sufficient to prove all other argument forms in propositional logic, thus they may be considered to be a derivative.  Note, this is not true of the extension of propositional logic to other logics like first-order logic.  First-order logic requires at least one additional rule of inference in order to obtain completeness. The significance of argument in formal logic is that one may obtain new truths from established truths.  In the first example above, given the two premises, the truth of  is not yet known or stated.  After the argument is made,  is deduced.  In this way, we define a deduction system to be a set of all propositions that may be deduced from another set of propositions.  For instance, given the set of propositions A = \{ P \or Q, \neg Q \and R, (P \or Q) \to R \}, we can define a deduction system, , which is the set of all propositions which follow from . Reiteration is always assumed, so P \or Q, \neg Q \and R, (P \or Q) \to R \in \Gamma.  Also, from the first element of , last element, as well as modus ponens,  is a consequence, and so R \in \Gamma.  Because we have not included sufficiently complete axioms, though, nothing else may be deduced.  Thus, even though most deduction systems studied in propositional logic are able to deduce (P \or Q) \leftrightarrow (\neg P \to Q), this one is too weak to prove such a proposition. A propositional calculus is a formal system \mathcal{L} = \mathcal{L} \left( \Alpha,\ \Omega,\ \Zeta,\ \Iota \right), where: ::\Omega = \Omega_0 \cup \Omega_1 \cup \ldots \cup \Omega_j \cup \ldots \cup \Omega_m. In this partition, \Omega_j is the set of operator symbols of arity . In the more familiar propositional calculi,  is typically partitioned as follows: ::\Omega_1 = \{ \lnot \}, ::\Omega_2 \subseteq \{ \land, \lor, \to, \leftrightarrow \}. A frequently adopted convention treats the constant logical values as operators of arity zero, thus: ::\Omega_0 = \{ 0, 1 \}. Some writers use the tilde (~), or N, instead of ; and some use the ampersand (&), the prefixed K, or \cdot instead of \wedge. Notation varies even more for the set of logical values, with symbols like {false, true}, {F, T}, or \{ \bot, \top \} all being seen in various contexts instead of {0, 1}. The language of \mathcal{L}, also known as its set of formulas, well-formed formulas, is inductively defined by the following rules: Repeated applications of these rules permits the construction of complex formulas. For example: Let \mathcal{L}_1 = \mathcal{L}(\Alpha,\Omega,\Zeta,\Iota), where \Alpha, \Omega, \Zeta, \Iota are defined as follows: ::\Alpha = \{p, q, r, s, t, u \}. Adopting negation and implication as the two primitive operations of a propositional calculus is tantamount to having the omega set \Omega = \Omega_1 \cup \Omega_2 partition as follows: :: \Omega_1 = \{ \lnot \}, :: \Omega_2 = \{ \to \}. :* (p \to (q \to p)) :* ((p \to (q \to r)) \to ((p \to q) \to (p \to r))) :* ((\neg p \to \neg q) \to (q \to p)) Let \mathcal{L}_2 = \mathcal{L}(\Alpha, \Omega, \Zeta, \Iota), where \Alpha, \Omega, \Zeta, \Iota are defined as follows: In the following example of a propositional calculus, the transformation rules are intended to be interpreted as the inference rules of a so-called natural deduction system. The particular system presented here has no initial points, which means that its interpretation for logical applications derives its theorems from an empty axiom set. Our propositional calculus has ten inference rules. These rules allow us to derive other true formulas given a set of formulas that are assumed to be true. The first nine simply state that we can infer certain well-formed formulas from other well-formed formulas. The last rule however uses hypothetical reasoning in the sense that in the premise of the rule we temporarily assume an (unproven) hypothesis to be part of the set of inferred formulas to see if we can infer a certain other formula. Since the first nine rules don't do this they are usually described as non-hypothetical rules, and the last one as a hypothetical rule. In describing the transformation rules, we may introduce a metalanguage symbol \vdash. It is basically a convenient shorthand for saying "infer that". The format is \Gamma \vdash \psi, in which  is a (possibly empty) set of formulas called premises, and  is a formula called conclusion. The transformation rule \Gamma \vdash \psi means that if every proposition in  is a theorem (or has the same truth value as the axioms), then  is also a theorem. Note that considering the following rule Conjunction introduction, we will know whenever  has more than one formula, we can always safely reduce it into one formula using conjunction. So for short, from that time on we may represent  as one formula instead of a set. Another omission for convenience is when  is an empty set, in which case  may not appear. One of the main uses of a propositional calculus, when interpreted for logical applications, is to determine relations of logical equivalence between propositional formulas. These relationships are determined by means of the available transformation rules, sequences of which are called derivations or proofs. In the discussion to follow, a proof is presented as a sequence of numbered lines, with each line consisting of a single formula followed by a reason or justification for introducing that formula. Each premise of the argument, that is, an assumption introduced as an hypothesis of the argument, is listed at the beginning of the sequence and is marked as a "premise" in lieu of other justification. The conclusion is listed on the last line. A proof is complete if every line follows from the previous ones by the correct application of a transformation rule. (For a contrasting approach, see proof-trees). Interpret A \vdash A as "Assuming , infer ". Read \vdash A \to A as "Assuming nothing, infer that  implies ", or "It is a tautology that  implies ", or "It is always true that  implies ". The crucial properties of this set of rules are that they are sound and complete. Informally this means that the rules are correct and that no other rules are required. These claims can be made more formal as follows. We define a truth assignment as a function that maps propositional variables to true or false. Informally such a truth assignment can be understood as the description of a possible state of affairs (or possible world) where certain statements are true and others are not. The semantics of formulas can then be formalized by defining for which "state of affairs" they are considered to be true, which is what is done by the following definition. We define when such a truth assignment  satisfies a certain well-formed formula with the following rules: With this definition we can now formalize what it means for a formula  to be implied by a certain set  of formulas. Informally this is true if in all worlds that are possible given the set of formulas  the formula  also holds. This leads to the following formal definition: We say that a set  of well-formed formulas semantically entails (or implies) a certain well-formed formula  if all truth assignments that satisfy all the formulas in  also satisfy . Finally we define syntactical entailment such that  is syntactically entailed by  if and only if we can derive it with the inference rules that were presented above in a finite number of steps. This allows us to formulate exactly what it means for the set of inference rules to be sound and complete: Soundness: If the set of well-formed formulas  syntactically entails the well-formed formula  then  semantically entails . Completeness: If the set of well-formed formulas  semantically entails the well-formed formula  then  syntactically entails . For the above set of rules this is indeed the case. (For most logical systems, this is the comparatively "simple" direction of proof) Notational conventions: Let  be a variable ranging over sets of sentences. Let  and  range over sentences. For " syntactically entails " we write " proves ". For " semantically entails " we write " implies ". We want to show:  (if  proves , then  implies ). We note that " proves " has an inductive definition, and that gives us the immediate resources for demonstrating claims of the form "If  proves , then ...". So our proof proceeds by induction.  Notice that Basis Step II can be omitted for natural deduction systems because they have no axioms. When used, Step II involves showing that each of the axioms is a (semantic) logical truth. The Basis steps demonstrate that the simplest provable sentences from  are also implied by , for any . (The proof is simple, since the semantic fact that a set implies any of its members, is also trivial.) The Inductive step will systematically cover all the further sentences that might be provable—by considering each case where we might reach a logical conclusion using an inference rule—and shows that if a new sentence is provable, it is also logically implied. (For example, we might have a rule telling us that from "" we can derive " or ". In III.a We assume that if  is provable it is implied. We also know that if  is provable then " or " is provable. We have to show that then " or " too is implied. We do so by appeal to the semantic definition and the assumption we just made.  is provable from , we assume. So it is also implied by . So any semantic valuation making all of  true makes  true. But any valuation making  true makes " or " true, by the defined semantics for "or". So any valuation which makes all of  true makes " or " true. So " or " is implied.) Generally, the Inductive step will consist of a lengthy but simple case-by-case analysis of all the rules of inference, showing that each "preserves" semantic implication. By the definition of provability, there are no sentences provable other than by being a member of , an axiom, or following by a rule; so if all of those are semantically implied, the deduction calculus is sound. (This is usually the much harder direction of proof.) We adopt the same notational conventions as above. We want to show: If  implies , then  proves . We proceed by contraposition: We show instead that if  does not prove  then  does not imply . QED If a formula is a tautology, then there is a truth table for it which shows that each valuation yields the value true for the formula. Consider such a valuation. By mathematical induction on the length of the subformulas, show that the truth or falsity of the subformula follows from the truth or falsity (as appropriate for the valuation) of each propositional variable in the subformula. Then combine the lines of the truth table together two at a time by using "( is true implies ) implies (( is false implies ) implies )". Keep repeating this until all dependencies on propositional variables have been eliminated. The result is that we have proved the given tautology. Since every tautology is provable, the logic is complete. An interpretation of a truth-functional propositional calculus \mathcal{P} is an assignment to each propositional symbol of \mathcal{P} of one or the other (but not both) of the truth values truth (T) and falsity (F), and an assignment to the connective symbols of \mathcal{P} of their usual truth-functional meanings. An interpretation of a truth-functional propositional calculus may also be expressed in terms of truth tables. For n distinct propositional symbols there are 2^n distinct possible interpretations. For any particular symbol a, for example, there are 2^1=2 possible interpretations: For the pair a, b there are 2^2=4 possible interpretations: Since \mathcal{P} has \aleph_0, that is, denumerably many propositional symbols, there are 2^{\aleph_0}=\mathfrak c, and therefore uncountably many distinct possible interpretations of \mathcal{P}. If  and  are formulas of \mathcal{P} and \mathcal{I} is an interpretation of \mathcal{P} then: \models\phi means that  is logically valid Some consequences of these definitions: It is possible to define another version of propositional calculus, which defines most of the syntax of the logical operators by means of axioms, and which uses only one inference rule. Let , , and  stand for well-formed formulas.  (The well-formed formulas themselves would not contain any Greek letters, but only capital Roman letters, connective operators, and parentheses.) Then the axioms are as follows: The inference rule is modus ponens:  \phi, \ \phi \to \chi \vdash \chi . Let a demonstration be represented by a sequence, with hypotheses to the left of the turnstile and the conclusion to the right of the turnstile. Then the deduction theorem can be stated as follows: If the sequence : \phi_1, \ \phi_2, \ ... , \ \phi_n, \ \chi \vdash \psi  has been demonstrated, then it is also possible to demonstrate the sequence : \phi_1, \ \phi_2, \ ..., \ \phi_n \vdash \chi \to \psi . This deduction theorem (DT) is not itself formulated with propositional calculus: it is not a theorem of propositional calculus, but a theorem about propositional calculus. In this sense, it is a meta-theorem, comparable to theorems about the soundness or completeness of propositional calculus. On the other hand, DT is so useful for simplifying the syntactical proof process that it can be considered and used as another inference rule, accompanying modus ponens. In this sense, DT corresponds to the natural conditional proof inference rule which is part of the first version of propositional calculus introduced in this article. The converse of DT is also valid: If the sequence : \phi_1, \ \phi_2, \ ..., \ \phi_n \vdash \chi \to \psi  has been demonstrated, then it is also possible to demonstrate the sequence : \phi_1, \ \phi_2, \ ... , \ \phi_n, \ \chi \vdash \psi  in fact, the validity of the converse of DT is almost trivial compared to that of DT: If :  \phi_1, \ ... , \ \phi_n \vdash \chi \to \psi  then : 1:  \phi_1, \ ... , \ \phi_n, \ \chi \vdash \chi \to \psi  : 2:  \phi_1, \ ... , \ \phi_n, \ \chi \vdash \chi  and from (1) and (2) can be deduced : 3:  \phi_1, \ ... , \ \phi_n, \ \chi \vdash \psi  by means of modus ponens, Q.E.D. The converse of DT has powerful implications: it can be used to convert an axiom into an inference rule. For example, the axiom AND-1,  \vdash \phi \wedge \chi \to \phi  can be transformed by means of the converse of the deduction theorem into the inference rule  \phi \wedge \chi \vdash \phi  which is conjunction elimination, one of the ten inference rules used in the first version (in this article) of the propositional calculus. The following is an example of a (syntactical) demonstration, involving only axioms THEN-1 and THEN-2: Prove: A \to A (Reflexivity of implication). Proof: The preceding alternative calculus is an example of a Hilbert-style deduction system. In the case of propositional systems the axioms are terms built with logical connectives and the only inference rule is modus ponens. Equational logic as standardly used informally in high school algebra is a different kind of calculus from Hilbert systems. Its theorems are equations and its inference rules express the properties of equality, namely that it is a congruence on terms that admits substitution. Classical propositional calculus as described above is equivalent to Boolean algebra, while intuitionistic propositional calculus is equivalent to Heyting algebra. The equivalence is shown by translation in each direction of the theorems of the respective systems. Theorems \phi of classical or intuitionistic propositional calculus are translated as equations \phi = 1 of Boolean or Heyting algebra respectively. Conversely theorems x = y of Boolean or Heyting algebra are translated as theorems (x \to y) \land (y \to x) of classical or intuitionistic calculus respectively, for which x \equiv y is a standard abbreviation. In the case of Boolean algebra x = y can also be translated as (x \land y) \lor (\neg x \land \neg y), but this translation is incorrect intuitionistically. In both Boolean and Heyting algebra, inequality x \le y can be used in place of equality. The equality x = y is expressible as a pair of inequalities x \le y and y \le x. Conversely the inequality x \le y is expressible as the equality x \land y = x, or as x \lor y = y. The significance of inequality for Hilbert-style systems is that it corresponds to the latter's deduction or entailment symbol \vdash. An entailment : \phi_1, \ \phi_2, \ \dots, \ \phi_n \vdash \psi is translated in the inequality version of the algebraic framework as : \phi_1\ \land\ \phi_2\ \land\ \dots\ \land \ \phi_n\ \ \le\ \ \psi Conversely the algebraic inequality x \le y is translated as the entailment :x\ \vdash\ y. The difference between implication x \to y and inequality or entailment x \le y or x\ \vdash\ y is that the former is internal to the logic while the latter is external. Internal implication between two terms is another term of the same kind. Entailment as external implication between two terms expresses a metatruth outside the language of the logic, and is considered part of the metalanguage. Even when the logic under study is intuitionistic, entailment is ordinarily understood classically as two-valued: either the left side entails, or is less-or-equal to, the right side, or it is not. Similar but more complex translations to and from algebraic logics are possible for natural deduction systems as described above and for the sequent calculus. The entailments of the latter can be interpreted as two-valued, but a more insightful interpretation is as a set, the elements of which can be understood as abstract proofs organized as the morphisms of a category. In this interpretation the cut rule of the sequent calculus corresponds to composition in the category. Boolean and Heyting algebras enter this picture as special categories having at most one morphism per homset, i.e., one proof per entailment, corresponding to the idea that existence of proofs is all that matters: any proof will do and there is no point in distinguishing them.  It is possible to generalize the definition of a formal language from a set of finite sequences over a finite basis to include many other sets of mathematical structures, so long as they are built up by finitary means from finite materials. What's more, many of these families of formal structures are especially well-suited for use in logic. For example, there are many families of graphs that are close enough analogues of formal languages that the concept of a calculus is quite easily and naturally extended to them. Indeed, many species of graphs arise as parse graphs in the syntactic analysis of the corresponding families of text structures. The exigencies of practical computation on formal languages frequently demand that text strings be converted into pointer structure renditions of parse graphs, simply as a matter of checking whether strings are well-formed formulas or not. Once this is done, there are many advantages to be gained from developing the graphical analogue of the calculus on strings. The mapping from strings to parse graphs is called parsing and the inverse mapping from parse graphs to strings is achieved by an operation that is called traversing the graph. Propositional calculus is about the simplest kind of logical calculus in current use. It can be extended in several ways. (Aristotelian "syllogistic" calculus, which is largely supplanted in modern logic, is in some ways simpler – but in other ways more complex – than propositional calculus.) The most immediate way to develop a more complex logical calculus is to introduce rules that are sensitive to more fine-grained details of the sentences being used. First-order logic (a.k.a. first-order predicate logic) results when the "atomic sentences" of propositional logic are broken up into terms, variables, predicates, and quantifiers, all keeping the rules of propositional logic with some new ones introduced. (For example, from "All dogs are mammals" we may infer "If Rover is a dog then Rover is a mammal".) With the tools of first-order logic it is possible to formulate a number of theories, either with explicit axioms or by rules of inference, that can themselves be treated as logical calculi. Arithmetic is the best known of these; others include set theory and mereology. Second-order logic and other higher-order logics are formal extensions of first-order logic. Thus, it makes sense to refer to propositional logic as "zeroth-order logic", when comparing it with these logics. Modal logic also offers a variety of inferences that cannot be captured in propositional calculus. For example, from "Necessarily " we may infer that . From  we may infer "It is possible that ". The translation between modal logics and algebraic logics concerns classical and intuitionistic logics but with the introduction of a unary operator on Boolean or Heyting algebras, different from the Boolean operations, interpreting the possibility modality, and in the case of Heyting algebra a second operator interpreting necessity (for Boolean algebra this is redundant since necessity is the De Morgan dual of possibility). The first operator preserves 0 and disjunction while the second preserves 1 and conjunction. Many-valued logics are those allowing sentences to have values other than true and false. (For example, neither and both are standard "extra values"; "continuum logic" allows each sentence to have any of an infinite number of "degrees of truth" between true and false.)  These logics often require calculational devices quite distinct from propositional calculus. When the values form a Boolean algebra (which may have more than two or even infinitely many values), many-valued logic reduces to classical logic; many-valued logics are therefore only of independent interest when the values form an algebra that is not Boolean. Finding solutions to propositional logic formulas is an NP-complete problem. However, practical methods exist (e.g., DPLL algorithm, 1962; Chaff algorithm, 2001) that are very fast for many useful cases. Recent work has extended the SAT solver algorithms to work with propositions containing arithmetic expressions; these are the SMT solvers.       Basic and Derived Argument Forms Name Sequent Description Modus Ponens ((p \to q) \land p) \vdash q If  then ; ; therefore  Modus Tollens ((p \to q) \land \neg q) \vdash \neg p If  then ; not ; therefore not  Hypothetical Syllogism ((p \to q) \land (q \to r)) \vdash (p \to r) If  then ; if  then ; therefore, if  then  Disjunctive Syllogism ((p \lor q) \land \neg p) \vdash q Either  or , or both; not ; therefore,  Constructive Dilemma ((p \to q) \land (r \to s) \land (p \lor r)) \vdash (q \lor s) If  then ; and if  then ; but  or ; therefore  or  Destructive Dilemma ((p \to q) \land (r \to s) \land(\neg q \lor \neg s)) \vdash (\neg p \lor \neg r) If  then ; and if  then ; but not  or not ; therefore not  or not  Bidirectional Dilemma ((p \to q) \land (r \to s) \land(p \lor \neg s)) \vdash (q \lor \neg r) If  then ; and if  then ; but  or not ; therefore  or not  Simplification (p \land q) \vdash p  and  are true; therefore  is true Conjunction p, q \vdash (p \land q)  and  are true separately; therefore they are true conjointly Addition p \vdash (p \lor q)  is true; therefore the disjunction ( or ) is true Composition ((p \to q) \land (p \to r)) \vdash (p \to (q \land r)) If  then ; and if  then ; therefore if  is true then  and  are true De Morgan's Theorem (1) \neg (p \land q) \vdash (\neg p \lor \neg q) The negation of ( and ) is equiv. to (not  or not ) De Morgan's Theorem (2) \neg (p \lor q) \vdash (\neg p \land \neg q) The negation of ( or ) is equiv. to (not  and not ) Commutation (1) (p \lor q) \vdash (q \lor p) ( or ) is equiv. to ( or ) Commutation (2) (p \land q) \vdash (q \land p) ( and ) is equiv. to ( and ) Commutation (3) (p \leftrightarrow q) \vdash (q \leftrightarrow p) ( is equiv. to ) is equiv. to ( is equiv. to ) Association (1) (p \lor (q \lor r)) \vdash ((p \lor q) \lor r)  or ( or ) is equiv. to ( or ) or  Association (2) (p \land (q \land r)) \vdash ((p \land q) \land r)  and ( and ) is equiv. to ( and ) and  Distribution (1) (p \land (q \lor r)) \vdash ((p \land q) \lor (p \land r))  and ( or ) is equiv. to ( and ) or ( and ) Distribution (2) (p \lor (q \land r)) \vdash ((p \lor q) \land (p \lor r))  or ( and ) is equiv. to ( or ) and ( or ) Double Negation p \vdash \neg \neg p  is equivalent to the negation of not  Transposition (p \to q) \vdash (\neg q \to \neg p) If  then  is equiv. to if not  then not  Material Implication (p \to q) \vdash (\neg p \lor q) If  then  is equiv. to not  or  Material Equivalence (1) (p \leftrightarrow q) \vdash ((p \to q) \land (q \to p)) ( iff ) is equiv. to (if  is true then  is true) and (if  is true then  is true) Material Equivalence (2) (p \leftrightarrow q) \vdash ((p \land q) \lor (\neg p \land \neg q)) ( iff ) is equiv. to either ( and  are true) or (both  and  are false) Material Equivalence (3) (p \leftrightarrow q) \vdash ((p \lor \neg q) \land (\neg p \lor q)) ( iff ) is equiv to., both ( or not  is true) and (not  or  is true) Exportation ((p \land q) \to r) \vdash (p \to (q \to r)) from (if  and  are true then  is true) we can prove (if  is true then  is true, if  is true) Importation (p \to (q \to r)) \vdash ((p \land q) \to r) If  then (if  then ) is equivalent to if  and  then  Tautology (1) p \vdash (p \lor p)  is true is equiv. to  is true or  is true Tautology (2) p \vdash (p \land p)  is true is equiv. to  is true and  is true Tertium non datur (Law of Excluded Middle) \vdash (p \lor \neg p)  or not  is true Law of Non-Contradiction \vdash \neg (p \land \neg p)  and not  is false, is a true statement Example of a Proof Number Formula Reason 1 A premise 2 A \lor A From (1) by disjunction introduction 3 (A \lor A) \land A From (1) and (2) by conjunction introduction 4 A From (3) by conjunction elimination 5 A \vdash A Summary of (1) through (4) 6 \vdash A \to A From (5) by conditional proof Axioms Name Axiom Schema Description THEN-1 \phi \to (\chi \to \phi) Add hypothesis , implication introduction THEN-2 (\phi \to (\chi \to \psi)) \to ((\phi \to \chi) \to (\phi \to \psi)) Distribute hypothesis  over implication AND-1 \phi \land \chi \to \phi Eliminate conjunction AND-2 \phi \land \chi \to \chi &nbsp; AND-3 \phi \to (\chi \to (\phi \land \chi)) Introduce conjunction OR-1 \phi \to \phi \lor \chi Introduce disjunction OR-2 \chi \to \phi \lor \chi &nbsp; OR-3 (\phi \to \psi) \to ((\chi \to \psi) \to (\phi \lor \chi \to \psi)) Eliminate disjunction NOT-1 (\phi \to \chi) \to ((\phi \to \neg \chi) \to \neg \phi) Introduce negation NOT-2 \phi \to (\neg \phi \to \chi) Eliminate negation NOT-3 \phi \lor \neg \phi Excluded middle, classical logic IFF-1 (\phi \leftrightarrow \chi) \to (\phi \to \chi) Eliminate equivalence IFF-2 (\phi \leftrightarrow \chi) \to (\chi \to \phi) &nbsp; IFF-3 (\phi \to \chi) \to ((\chi \to \phi) \to (\phi \leftrightarrow \chi)) Introduce equivalence From (p \to q) and (p \to \neg q), infer \neg p. That is, \{ (p \to q), (p \to \neg q) \} \vdash \neg p. From \neg p, infer (p \to r). That is, \{ \neg p \} \vdash (p \to r). From \neg \neg p, infer . That is, \neg \neg p \vdash p. From  and , infer (p \land q). That is, \{ p, q \} \vdash (p \land q). From (p \land q), infer . From (p \land q), infer . That is, (p \land q) \vdash p and (p \land q) \vdash q. From , infer (p \lor q). From , infer (p \lor q). That is, p \vdash (p \lor q) and q \vdash (p \lor q). From (p \lor q) and (p \to r) and (q \to r), infer . That is, \{p \lor q, p \to r, q \to r\} \vdash r. From (p \to q) and (q \to p), infer (p \leftrightarrow q). That is, \{p \to q, q \to p\} \vdash (p \leftrightarrow q). From (p \leftrightarrow q), infer (p \to q). From (p \leftrightarrow q), infer (q \to p). That is, (p \leftrightarrow q) \vdash (p \to q) and (p \leftrightarrow q) \vdash (q \to p). From  and (p \to q), infer . That is, \{ p, p \to q\} \vdash q. From [accepting  allows a proof of ], infer (p \to q). That is, (p \vdash q) \vdash (p \to q). a set of primitive symbols, variously referred to be atomic formulas, placeholders, proposition letters, or variables, and a set of operator symbols, variously interpreted to be logical operators or logical connectives. their language, that is, the particular collection of primitive symbols and operator symbols, the set of axioms, or distinguished formulas, and the set of inference rules. We then define truth-functional operators, beginning with negation.   represents the negation of , which can be thought of as the denial of .  In the example above,  expresses that it is not raining outside, or by a more standard reading: "It is not the case that it is raining outside."  When  is true,  is false; and when  is false,  is true.  always has the same truth-value as . Conjunction is a truth-functional connective which forms a proposition out of two simpler propositions, for example,  and .  The conjunction of  and  is written , and expresses that each are true.  We read  for " and ".  For any two propositions, there are four possible assignments of truth values:  is true and  is true  is true and  is false  is false and  is true  is false and  is false Disjunction resembles conjunction in that it forms a proposition out of two simpler propositions.  We write it , and it is read " or ".  It expresses that either  or  is true.  Thus, in the cases listed above, the disjunction of  and  is true in all cases except 4.  Using the example above, the disjunction expresses that it is either raining outside or there is a cold front over Kansas.  (Note, this use of disjunction is supposed to resemble the use of the English word "or".  However, it is most like the English inclusive "or", which can be used to express the truth of at least one of two propositions.  It is not like the English exclusive "or", which expresses the truth of exactly one of two propositions.  That is to say, the exclusive "or" is false when both  and  are true (case 1).  An example of the exclusive or is:  You may have a bagel or a pastry, but not both. Often in natural language, given the appropriate context, the addendum "but not both" is omitted but implied. In mathematics, however, "or" is always inclusive or; if exclusive or is meant it will be specified, possibly by "xor".) Material conditional also joins two simpler propositions, and we write , which is read "if  then ".  The proposition to the left of the arrow is called the antecedent and the proposition to the right is called the consequent.  (There is no such designation for conjunction or disjunction, since they are commutative operations.)  It expresses that  is true whenever  is true.  Thus it is true in every case above except case 2, because this is the only case when  is true but  is not. Using the example, if  then  expresses that if it is raining outside then there is a cold-front over Kansas. The material conditional is often confused with physical causation.  The material conditional, however, only relates two propositions by their truth-values—which is not the relation of cause and effect.  It is contentious in the literature whether the material implication represents logical causation. Biconditional joins two simpler propositions, and we write , which is read " if and only if ".  It expresses that  and  have the same truth-value, thus  if and only if  is true in cases 1 and 4, and false otherwise. The alpha set \Alpha is a finite set of elements called proposition symbols or propositional variables. Syntactically speaking, these are the most basic elements of the formal language \mathcal{L}, otherwise referred to as atomic formulas or terminal elements. In the examples to follow, the elements of \Alpha are typically the letters , , , and so on. The omega set  is a finite set of elements called operator symbols or logical connectives. The set  is partitioned into disjoint subsets as follows: The zeta set \Zeta is a finite set of transformation rules that are called inference rules when they acquire logical applications. The iota set \Iota is a finite set of initial points that are called axioms when they receive logical interpretations. Base: Any element of the alpha set \Alpha is a formula of \mathcal{L}. If p_1, p_2, \ldots, p_j are formulas and f is in \Omega_j, then \left( f(p_1, p_2, \ldots, p_j) \right) is a formula. Closed: Nothing else is a formula of \mathcal{L}. By rule 1,  is a formula. By rule 2, \neg p is a formula. By rule 1,  is a formula. By rule 2, ( \neg p \lor q ) is a formula. The alpha set \Alpha, is a finite set of symbols that is large enough to supply the needs of a given discussion, for example: Of the three connectives for conjunction, disjunction, and implication (\wedge, \lor, and ), one can be taken as primitive and the other two can be defined in terms of it and negation ().Wernick, William (1942) "Complete Sets of Logical Functions," Transactions of the American Mathematical Society 51, pp. 117&ndash;132. Indeed, all of the logical connectives can be defined in terms of a sole sufficient operator. The biconditional () can of course be defined in terms of conjunction and implication, with a \leftrightarrow b defined as (a \to b) \land (b \to a). An axiom system discovered by Jan Łukasiewicz formulates a propositional calculus in this language as follows. The axioms are all substitution instances of: The rule of inference is modus ponens (i.e., from  and (p \to q), infer ). Then a \lor b is defined as \neg a \to b, and a \land b is defined as \neg(a \to \neg b). This system is used in Metamath set.mm formal proof database. The alpha set \Alpha, is a finite set of symbols that is large enough to supply the needs of a given discussion, for example: : \Alpha = \{p, q, r, s, t, u \}. The omega set \Omega = \Omega_1 \cup \Omega_2 partitions as follows: : \Omega_1 = \{ \lnot \}, : \Omega_2 = \{ \land, \lor, \to, \leftrightarrow \}. The set of initial points is empty, that is, \Iota = \varnothing. The set of transformation rules, \Zeta, is described as follows: To be shown that . One possible proof of this (which, though valid, happens to contain more steps than are necessary) may be arranged as follows:  satisfies the propositional variable  if and only if   satisfies  if and only if  does not satisfy   satisfies  if and only if  satisfies both  and   satisfies  if and only if  satisfies at least one of either  or   satisfies  if and only if it is not the case that  satisfies  but not   satisfies  if and only if  satisfies both  and  or satisfies neither one of them a is assigned T, or a is assigned F. both are assigned T, both are assigned F, a is assigned T and b is assigned F, or a is assigned F and b is assigned T. A sentence of propositional logic is true under an interpretation \mathcal{I} iff \mathcal{I} assigns the truth value T to that sentence. If a sentence is true under an interpretation, then that interpretation is called a model of that sentence.  is false under an interpretation \mathcal{I} iff  is not true under \mathcal{I}. A sentence of propositional logic is logically valid if it is true under every interpretation A sentence  of propositional logic is a semantic consequence of a sentence  iff there is no interpretation under which  is true and  is false. A sentence of propositional logic is consistent iff it is true under at least one interpretation. It is inconsistent if it is not consistent. For any given interpretation a given formula is either true or false. No formula is both true and false under the same interpretation.  is false for a given interpretation iff \neg\phi is true for that interpretation; and  is true under an interpretation iff \neg\phi is false under that interpretation. If  and (\phi \to \psi) are both true under a given interpretation, then  is true under that interpretation. If \models_{\mathrm P}\phi and \models_{\mathrm P}(\phi \to \psi), then \models_{\mathrm P}\psi. \neg\phi is true under \mathcal{I} iff  is not true under \mathcal{I}. (\phi \to \psi) is true under \mathcal{I} iff either  is not true under \mathcal{I} or  is true under \mathcal{I}. A sentence  of propositional logic is a semantic consequence of a sentence  iff (\phi \to \psi) is logically valid, that is, \phi \models_{\mathrm P} \psi iff  \models_{\mathrm P}(\phi \to \psi). Axiom THEN-2 may be considered to be a "distributive property of implication with respect to implication." Axioms AND-1 and AND-2 correspond to "conjunction elimination". The relation between AND-1 and AND-2 reflects the commutativity of the conjunction operator. Axiom AND-3 corresponds to "conjunction introduction." Axioms OR-1 and OR-2 correspond to "disjunction introduction." The relation between OR-1 and OR-2 reflects the commutativity of the disjunction operator. Axiom NOT-1 corresponds to "reductio ad absurdum." Axiom NOT-2 says that "anything can be deduced from a contradiction." Axiom NOT-3 is called "tertium non datur" (Latin: "a third is not given") and reflects the semantic valuation of propositional formulas: a formula can have a truth-value of either true or false. There is no third truth-value, at least not in classical logic. Intuitionistic logicians do not accept the axiom NOT-3. (A \to ((B \to A) \to A)) \to ((A \to (B \to A)) \to (A \to A)) : Axiom THEN-2 with \phi = A, \chi = B \to A, \psi = A A \to ((B \to A) \to A) : Axiom THEN-1 with \phi = A, \chi = B \to A (A \to (B \to A)) \to (A \to A) : From (1) and (2) by modus ponens. A \to (B \to A) : Axiom THEN-1 with \phi = A, \chi = B A \to A : From (3) and (4) by modus ponens. First-order logic Second-order propositional logic Second-order logic Higher-order logic Boolean algebra (logic) Boolean algebra (structure) Boolean algebra topics Boolean domain Boolean function Boolean-valued function Categorical logic Combinational logic Combinatory logic Conceptual graph Disjunctive syllogism Entitative graph Existential graph Frege's propositional calculus Implicational propositional calculus Intuitionistic propositional calculus Jean Buridan Laws of Form Logical graph Logical NOR Logical value Operation Paul of Venice Peirce's law Peter of Spain Propositional formula Symmetric difference Truth function Truth table Walter Burley William of Sherwood Brown, Frank Markham (2003), Boolean Reasoning: The Logic of Boolean Equations, 1st edition, Kluwer Academic Publishers, Norwell, MA. 2nd edition, Dover Publications, Mineola, NY. Chang, C.C. and Keisler, H.J. (1973), Model Theory, North-Holland, Amsterdam, Netherlands. Kohavi, Zvi (1978), Switching and Finite Automata Theory, 1st edition, McGraw–Hill, 1970. 2nd edition, McGraw–Hill, 1978. Korfhage, Robert R. (1974), Discrete Computational Structures, Academic Press, New York, NY. Lambek, J. and Scott, P.J. (1986), Introduction to Higher Order Categorical Logic, Cambridge University Press, Cambridge, UK. Mendelson, Elliot (1964), Introduction to Mathematical Logic, D. Van Nostrand Company. Klement, Kevin C. (2006), "Propositional Logic", in James Fieser and Bradley Dowden (eds.), Internet Encyclopedia of Philosophy, Eprint. Formal Predicate Calculus, contains a systematic formal development along the lines of Alternative calculus forall x: an introduction to formal logic, by P.D. Magnus, covers formal semantics and proof theory for sentential logic. Category:Propositional Calculus on ProofWiki (GFDLed) An Outline of Propositional Logic
